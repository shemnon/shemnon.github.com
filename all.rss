<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>...and they shall know me by my speling errors.</title>
    <description>Danno Ferrin (aka shemnon) on stuff that matters to him.</description>
    <link>http://speling.shemnon.com/</link>
    <atom:link href="http://speling.shemnon.com//all.rss" rel="self" type="application/rss+xml" />
    <language>en-us</language>
    <pubDate>Tue, 23 Oct 2012 22:16:28 -0600</pubDate>
    <lastBuildDate>Tue, 23 Oct 2012 22:16:28 -0600</lastBuildDate>
    
      
    <item>
      <title><![CDATA[Conventions and Configuratons]]></title>
      <description><![CDATA[<p>Creating an app in any new framework can sometimes be a bit of a chore.  Have you looked at the files that come form a new Hello World JavaFX app from NetBeans?  Not very dry at all and a lot of esoteric stuff in side directories is created, you know just in case you want to customize it.  And the problem isn&#8217;t NetBeans, they are doing the best they can with Ant.</p>

<p><strong>The Ideal Build</strong></p>

<p>To me the ideal build setup for a JavaFX application would involve putting your source files in a specific directory layout, placing supporting files in a similarly conventional manner, adding a <em>minimal</em> build script, pressing a button, and catching my .app or .exe as it falls out the other side.</p>

<!-- more -->


<p>One of the keys here is the minimal build script.  If I am doing things the standard way then my actions should be presumed.  Presumed without comment.  Part of the legacy of the <a href="http://ant.apache.org/">ant</a> build system is you cannot simply say &#8216;my Java code is here, make a jar.&#8217;  You have to hand walk the build from where your source code lives, to where you want the compiled class files to go, to where you want the jar to go, to what you want to name it.  And heaven forbid if you use other peoples libraries, or expect other people to use yours.</p>

<p>I&#8217;m being a little harsh on Ant here. Let&#8217;s roll back our memory to 13 years ago and realize how Ant was eight kinds of awesome compared to a <a href="http://www.gnu.org/software/make/manual/make.html">make</a> file.  Many builds I saw used to drop class files in the source tree.  And if you had to add a package you either had to update the make file or hope some side voodoo script could sniff it out, and the mess leftover was barely tolerable.  Recursive file sniffing and a separate build directories were the gold standard back at the turn of the century.  But the problem with higher standards is eventually they become the baseline expectation.  Consider how much building software stunk before even make existed!</p>

<p><strong>Hand Cranked to Configurable to Conventional</strong></p>

<p>The evolution we are witnessing here is one of increased automation, and the standardization.  This is just like the industrial revolution and the classic example of firearms.  You can hand craft a rife, and it will work just fine.  If anything breaks, however, you have to hand craft a replacement and often craft other pieces to make sure it continues to work.  When the parts were standardized, in both assembly and interface, you can mass produce many different rifles and do many interesting things with the various add ons.  If you want a slightly different grip or trigger, you can replace it because if the interface.  If you find a broken rifle you can figure out what is wrong with it because of the standard assembly,  And if you stick to the standards, ammunition is readily interchangeable between any rifle.</p>

<p>One of the key issues with interchangeable parts, however, is the need for a critical mass.  With a small audience conventions are merely incidental.  In large groups and with enough adoption they become the rules of society, for example what side you pass someone on the sidewalk.</p>

<p><strong>File Conventions</strong></p>

<p>To take us closer to the industrialized build we need to agree on some conventions. Even though I am building a Gradle plugin, I feel we need to accept and adopt widely some Maven conventions.  Specifically the <code>src/&lt;set&gt;/&lt;language|role&gt;/...</code> pattern for source files.  Gradle already adopts this pattern by default, which is good from the viewpoint of interchangeable parts.</p>

<pre><code>&lt;root&gt;/
+--src/
   +--main/
      +--java/
      |  +--&lt;Java Classes by package&gt;
      +--resources/
      |  +--&lt;Resources, like CSS and image, by package&gt;
      +--package/
         +--win/
         |  +--&lt;Bundle specific files&gt;
         +--macosx/
         |  +--&lt;Bundle specific files&gt;
         +--linux/
         |  +--&lt;Bundle specific files&gt;
         +--&lt;icon files for bundles&gt;
</code></pre>

<p>This is notional, and I am more than willing to hear comments as to where I am getting stuff wrong.  This is currently the file layout I am using for my Gradle JavaFX plugin, and I&#8217;ve pulled three of the JavaFX sample apps into this directory format, and the build files are all quite short (after the yak shaving to install the plugin).  <a href="https://bitbucket.org/shemnon/javafx-gradle/src/c52be485c341796394ae9c7ba9d44f1d79c45889/samples/brickbreaker/build.gradle?at=master">Brickbreaker</a> just installs the plugin.  <a href="https://bitbucket.org/shemnon/javafx-gradle/src/c52be485c341/samples/ConferenceScheduleApp/build.gradle?at=master">ConferenceScheduleApp</a> only names the executable (with bonus Java Version yak shaving) while <a href="https://bitbucket.org/shemnon/javafx-gradle/src/c52be485c341/samples/Ensemble2/build.gradle?at=master">Ensemble2</a> has the most to do, and none of it involved JavaFX but it is peculiar to how the app works.</p>

<p>My goal here, is to make all of the JavaFX yak shaving transparent, so you can focus on indexing your samples in your build rather than remembering the syntax of the ant deploy task.</p>
]]></description>
      <pubDate>Tue, 23 Oct 2012 22:13:00 -0600</pubDate>
      <author>Danno Ferrin &lt;danno.ferrin@shemnon.com&gt;</author>
      <link>http://speling.shemnon.com//blog/2012/10/23/conventions-and-configurations/</link>
      <guid isPermaLink="true">http://speling.shemnon.com//blog/2012/10/23/conventions-and-configurations/</guid>
    </item>
      
    
      
    <item>
      <title><![CDATA[Starting a JavaFX Gradle Plugin]]></title>
      <description><![CDATA[<p>I wanted to get this out there early, since &#8220;release early release often&#8221; is one of the open source mantras.  I have a longer blog post planned on this subject, but I have so many balls in the air right now I&#8217;m not sure when I&#8217;ll get to write it.</p>

<p>I am starting to write a <a href="https://bitbucket.org/shemnon/javafx-gradle">JavaFX 2.0 Gradle Plugin</a> over at bitbucket.  Right now it handles just the <code>fx:jar</code> and <code>fx:deploy</code> ant tasks.  And not completely. I don&#8217;t have the resources wired into the native bundles.  But that will come.  I also am not doing binary CSS or Jar signing.</p>

<!-- more -->


<p>There are two samples in the repo demonstrating the build.  I pulled from the JavaFX 2.2.0 Samples brickbreaker and Ensemble2 which represents a small and large project. I moved the files around into a conventional layout, and provided the barest of Gradle scripts I could, with the help of the plugin.  The script for <a href="https://bitbucket.org/shemnon/javafx-gradle/src/4f1f197a845d5fccc4408ad3c49167e65421b1df/brickbreaker/build.gradle?at=master">brickbreaker</a> is awesomely short.  And <a href="https://bitbucket.org/shemnon/javafx-gradle/src/955cc9b99dc86c3b384b40157801ffd3c1adfe94/Ensemble2/build.gradle?at=master">Ensemble2</a> is a bit longer because of the custom build work it is doing to bring the source of the samples into the jar.  When you run &#8216;gradle assemble` it will actually create the Mac OSX .app and .dmg files.  It probably does the correct thing on Linux and Windows but I haven&#8217;t tried yet.  But first you need to install the plugin via &#8216;gradle install&#8217; in the plugin dir.</p>

<p><strong>Conventions</strong></p>

<p>My main purpose in this exercise is to try and nail down a set of file layout conventions that Gradle and Maven can use to create a shippable app with a minimum of configuration.  Layouts that match the Maven way for the most part.  And Ant scripts can be written to these conventions.  If, you know, Ant is your thing.</p>

<p>The only out there conventions would be the bundle resources, which I am placing in <code>src/main/resources</code>.  I also intend to add some other standard files, like <code>src/main/resources/icon.png</code> and associated files and directories being loaded into the proper place for native bundling.  I also need to figure out what to do about signing keys.  Likely this will have to be a configuration thing since checking in your signing key to source control would be a bad idea, even if you have the world&#8217;s most awesome password.</p>

<p>Finally, I have zero intention of writing this hypothetical Maven plugin. Gradle is what I do for fun. I&#8217;de rather write Perl scripts than Maven plugins, no offense to the Perl crowd. But being part of the conversation to set the conventions is something I intend to be a part of.</p>
]]></description>
      <pubDate>Wed, 17 Oct 2012 22:47:00 -0600</pubDate>
      <author>Danno Ferrin &lt;danno.ferrin@shemnon.com&gt;</author>
      <link>http://speling.shemnon.com//blog/2012/10/17/javafx-gradle-plugin/</link>
      <guid isPermaLink="true">http://speling.shemnon.com//blog/2012/10/17/javafx-gradle-plugin/</guid>
    </item>
      
    
      
    <item>
      <title><![CDATA[Mirroring OpenJFX on BitBucket]]></title>
      <description><![CDATA[<p>I&#8217;ve started mirroring the OpenJFX repositories over at <a href="http://bitbucket.org/shemnon/">bitbucket</a>.  Viewing the repos on bitbucket has several advantages:</p>

<ol>
<li>It has an easier on the eyes user interface.  Really, I could stop here.</li>
<li>The push request mechanism encourages social coding</li>
<li>It has a code review feature</li>
</ol>


<p>This last point is the most recent one.  You can comment on commits and comment at specific lines in the commit.  Useful when you have to send a pull request back.</p>

<p><strong>Repos</strong></p>

<p>As for the repositories I have four repos right now.</p>

<!-- more -->


<p>The first three are direct mirrors of their <code>rt</code> counterparts in the JavaFX portion of the <a href="http://hg.openjdk.java.net/">official OpenJDK Mercurial repository</a>.</p>

<ul>
<li><a href="http://hg.openjdk.java.net/openjfx/8/master/rt/">master/rt</a> -> <a href="https://bitbucket.org/shemnon/openjfx-8-rt-master-branch">openjfx-rt-master-branch</a></li>
<li><a href="http://hg.openjdk.java.net/openjfx/8/controls/rt/">controls/rt</a> -> <a href="https://bitbucket.org/shemnon/openjfx-8-rt-controls-branch">openjfx-rt-controls-branch</a></li>
<li><a href="http://hg.openjdk.java.net/openjfx/8/graphics/rt/">graphics/rt</a> -> <a href="https://bitbucket.org/shemnon/openjfx-8-rt-graphics-branch">openjfx-rt-graphics-branch</a></li>
</ul>


<p>I am not mirroring the parent repo nor the <code>test</code> repo.  The parent repo is just a holder for the <code>rt</code> repo and (presumed) binary repos.  The <code>test</code> repo contains jemmy and a smoke test driven off of ensemble, i.e. parts needed for a professional build but not needed for the casual hack.  The casual hack is why I am doing this.</p>

<p>The fourth repo is my <a href="https://bitbucket.org/shemnon/openjfx-rt/">openfx-rt</a> repo.  This is a merger of the three previous repos.  Instead of keeping a branch for each I am pushing the bookmark for <code>controls</code>, <code>graphics</code>, and <code>master</code> to match the current tip of each of the real repos.  Bookmarks in Mercurial are more like branches in Git, just pointers to a change list.  Branches in mercurial embed themselves in the commit message, so you cannot retroactively create them without rewriting history.</p>

<p>This is also the repo where I do my hacks.  Look for the stray tips.</p>

<p><strong>Builds</strong></p>

<p>Also, as best as I can tell the open source build is currently broken.  The instructions pre-date the JRE integration of JavaFX, and also predate the addition of some of the more interesting sub projects, like FXML.  So to fix that I threw together some Gradle builds <a href="https://bitbucket.org/shemnon/openjfx-rt/changeset/46b2f08c0a3cb40c12a1e67184ba0b05c70d5596">here</a> and <a href="https://bitbucket.org/shemnon/openjfx-rt/changeset/a5a78c8ed2c4f287d2525ddf2231ea05f3659a99">here</a> that will compile the code and the tests.  Some of the tests even run. To completion. Successfully.  But it doesn&#8217;t create a usable <code>jfxrt.jar</code> at the end.  Until the while kit and caboodle is released I don&#8217;t think it&#8217;s worth going that far.  i.e. not fit for production use.  But perfect for casual hacking.</p>

<p>To run it you need to either</p>

<ul>
<li>Run Gradle with a <a href="http://jdk8.java.net/download.html">current JDK8 build</a></li>
<li>Point the env var <code>JFXRT_HOME</code> to the directory <code>jfxrt.jar</code> lives from a <a href="http://jdk8.java.net/download.html">current JDK8 build</a> before running Gradle.</li>
</ul>


<p>Then do something like <code>gradle assemble</code>, <code>gradle test</code>, <code>gradle compileJava</code>, <code>gradle compileTest</code>.  Be careful with the <code>test</code> task, it will go into an infinite loop in <code>javafx-concurrent</code>, I&#8217;m sure I don&#8217;t have something set up right.</p>

<p><strong>Casual Hacking</strong></p>

<p>I did this to aid my casual hacking, or as I like to call it &#8220;random acts of coding.&#8221;  You will note that I hooked up the JIRA bugs to the <a href="http://javafx-jira.kenai.com/">OpenJFX bug database</a>, and that <a href="https://bitbucket.org/shemnon/openjfx-rt/changeset/ab6e4c5150e45a92391bd2bf4c6a78255c283535">my first random act of code</a> is hooked up to the <a href="http://javafx-jira.kenai.com/browse/RT-25559">associated JIRA</a>.  It is a feature request I tweeted to Jonathan Giles several months ago, and was too lazy to write up a JIRA specifying what I want. The problem was that it seemed like a long loop of (a) landing in someone&#8217;s bug queue then (b) they have the bandwidth to do it and (c) that they do it the way I intended it to work.  If (c) fails it is another giant loop with the jiras to iterate (a), (b), and (c) again.  That and I&#8217;ve always been the type of person who would rather jump in and do it. I do have to say thug, that this has been quite a bit of yak shaving for 10 lines of code. And my <a href="http://preshavedyak.com/">pre shaved yak hoodie</a> I got at JavaOne only helps me with web apps.</p>

<p>If we want to make OpenJFX more accessible to casual hacking then some of the barriers need to be removed.  A &#8216;blessed&#8217; repo on BitBucket would make sandbox hacking more accessible.  A build that requires nothing more that a current Java 8 build and the build tool installed would be another great step.  With this casual hackers could push changes and a quick yes/no/maybe on the hack could be said in the pull queue before they fire up a JIRA and make sure their contributor paperwork is in order. In my opinion a hack then shave the yak ordering will get a lot more interest than a shave the yak then hack ordering.</p>

<p>But all of this only holds for the Java portions of the build.  When it comes to the native libraries I really don&#8217;t think you can wander too far from your yak shaving shears.</p>
]]></description>
      <pubDate>Tue, 09 Oct 2012 21:16:00 -0600</pubDate>
      <author>Danno Ferrin &lt;danno.ferrin@shemnon.com&gt;</author>
      <link>http://speling.shemnon.com//blog/2012/10/09/mirroring-openjfx-on-bitbucket/</link>
      <guid isPermaLink="true">http://speling.shemnon.com//blog/2012/10/09/mirroring-openjfx-on-bitbucket/</guid>
    </item>
      
    
      
    <item>
      <title><![CDATA[Fashion Forward: Styling your Controls in JavaFX 2.2]]></title>
      <description><![CDATA[<p>JavaFX is finally delivering on it&#8217;s promise (made 5 years) to open source JavaFX. It started last December with the controls code. And now that the <a href="http://hg.openjdk.java.net/openjfx/8/master/">JavaFX 8 repos</a> are open we can now look at the internals of JavaFX in a format much more readable than <code>javap</code> decompilations. (The previous statement is not an admission, wink wink nod nod).</p>


<p>One of the questions I had was how the CSS styles are used in a Node. And after looking at some of the innards I realized that I didn&#8217;t really care how JavaFX does it, I care about how I can get my control stylized like the built in controls. To demonstrate the CSS stylings, I created <code>DemoTwo</code> in my <a href="https://github.com/shemnon/DeckControl/">DeckControl</a> project, allowing you to customize the control via CSS. Only the shelf variants in this demo use the custom properties, the others are just using the built in <code>-fx-skin</code> style to do the switching.</p>




<!-- more -->




<p><strong>A Word of Warning</strong></p>


<p>These are all internal APIs, the kind that the java compiler ought to warn you about but doesn&#8217;t. These APIs will change before JavaFX 8 is released in some fashion (assuming that they can keep the schedule and get these APIs exposed properly). These changes may be as minor as package names but are likely to change in more substantive ways. So before you read further I want you to raise your right hand, place your left hand behind your back, cross your fingers, and swear to me that you will not whine, complain, or moan when Oracle changes things and ruins all your fun. Now pinky swear on it. Ok, now we can begin.</p>


<p><strong>Make Your Property Styleable</strong></p>


<p>First, you have to make the properties use the styleable types. The types you will want to use are the  <code>com.sun.javafx.css.Styleable&lt;Foo&gt;Property</code> classes. It&#8217;s not a find-and-replace option, you will need to use an inner class of some sort.The classes are abstract and three methods are not implemented: <code>getStyleableProperty()</code>, <code>getBean()</code>, and <code>getName()</code>. The first method <code>getStyleableProperty()</code> returns an instance of <code>StyleableProperty</code> that describes this property. We will discuss this more in the next section. The other two methods (<code>getBean()</code> and <code>getName()</code>) actually come from the <code>javafx.beans.properties.ReadOnlyProperties</code> interface, so their role is already a known quantity. You may also want to overload the <code>invalidated()</code> method, which at this point provides less overhead than attaching an invalidated listener.</p>


<p>There are also some stylistic concerns with extending the property. You may want to use some lazy loading of the property to make overriding easier to detect. You can also return a default value from the getter if the property is null, and only initialize the getter in the property method. Here is an example from my Deck class of the styleable property.</p>


<div><script src='https://gist.github.com/3711714.js?file=StyleableProperty1.java'></script>
<noscript><pre><code>    public final void setBackScale(double value) {
        backScaleProperty().set(value);
    }
    public final double getBackScale() {
        return backScale == null ? 0.7 : backScale.get();
    }

    public final DoubleProperty backScaleProperty() {
        if (backScale == null) {
            backScale = new StyleableDoubleProperty(0.7) {

                @Override
                protected void invalidated() {
                    styleablePropertyInvalidated();
                }

                @Override
                public StyleableProperty getStyleableProperty() {
                    return BACK_SCALE;
                }

                @Override
                public Object getBean() {
                    return ShelfDeckSkin.this;
                }

                @Override
                public String getName() {
                    return &quot;backScale&quot;;
                }
            };
        }
        return backScale;
    }
</code></pre></noscript></div>




<p><strong>Describe Your Styleable Property</strong></p>


<p>The next step is to describe your styleable property. It&#8217;s kind of chicken and egg with the property instance itself since you have to reference the description in the property and the description needs to know how to get the property.</p>


<p>All of these descriptions are of type <code>com.sun.javafx.css.StyleableProperty</code> and this class is (you guessed it) abstract. All of the concrete version of this class in the codebase I can find are all anonymous or implementation details.</p>


<p>The class is generically typed, with the first type <code>N</code> being the type of the <code>Node</code> you are creating the styleable property for, and the second type <code>V</code> being the type of the property in the Java code, such as Number or Boolean.</p>


<p>Since this is an abstract class and not an interface we have to deal with the parent constructor. The two required variables are the CSS name of the property and an object responsible for the conversions of the CSS strings to the real type. Do yourself a favor and just use one of the converters in <code>com.sun.javafx.css.convrrters</code>. There are constructors with more parameters, such as a default value, CSS inheritance flags, and information for marking the property as one that can be composed by other properties (such as font handling).  I would anticipate that the two or three argument constructors being the most useful ones.</p>


<p>The two methods you have to implement are <code>isSettable(N)</code> and <code>getWritableValue(N)</code>. The first method returns a boolean flag that tells the CSS engine if it should try and set the property from CSS or not. If you don&#8217;t want to set the property under some circumstances, like it is bound to some other properties value, you will return false. This is where the first type parameter comes into play, it doesn&#8217;t have to exactly be your type, but it will be the type of the parameter of this and the next method. The second method is where you return your property object from the previous section.  Since the declaration is shared among multiple controls, the particular instance is passed in as a parameter.</p>


<p>Remember, this object is more of a type declaration than the actual value of the property. We are telling the engine about the property and not becoming the property itself, that is what the previous section was about.</p>


<div><script src='https://gist.github.com/3711714.js?file=StyleableProperty2.java'></script>
<noscript><pre><code>    private static final StyleableProperty&lt;ShelfDeckSkin,Number&gt; BACK_SCALE =
            new StyleableProperty&lt;ShelfDeckSkin,Number&gt;(&quot;-x-back-scale&quot;,
                    SizeConverter.getInstance(), 0.7) {

                @Override
                public boolean isSettable(ShelfDeckSkin deck) {
                    return deck.backScale == null || !deck.backScale.isBound();
                }

                @Override
                public WritableValue&lt;Number&gt; getWritableValue(ShelfDeckSkin deck) {
                    return deck.backScaleProperty();
                }
            };
</code></pre></noscript></div>




<p><strong>Enumerate Your Styleable Property</strong></p>


<p>Finally we have to let the engine know about our CSS properties. The magic incantation in this case is to add a method <code>public List&lt;StyleableProperty&gt; impl_getStyleableProperties()</code> to your control class. Note that this method is marked as deprecated and starts with <code>impl_</code>. The combination of these two markings are how the JavaFX team tells us that this method will change and break in unexpected ways. But I think we are safe for JavaFX 2.2.x.</p>


<p>In this method simply return all of the <code>StyleableProperty</code> objects that you want the CSS engine to set and alter. Remember, this is all of the properties, including the properties of the parent class. So be sure you return those (unless you explicitly want to hide them). You can be a good software engineer and use a lazy cache if you like. It will perform (slightly) better.</p>


<div><script src='https://gist.github.com/3711714.js?file=StyleableProperty3.java'></script>
<noscript><pre><code>    private static List&lt;StyleableProperty&gt; STYLEABLES;

    @Override
    @Deprecated
    public List&lt;StyleableProperty&gt; impl_getStyleableProperties() {
        if (STYLEABLES == null) {
            final List&lt;StyleableProperty&gt; styleables = new ArrayList&lt;StyleableProperty&gt;(super.impl_getStyleableProperties());
            Collections.addAll(styleables,
                    BACK_ANGLE,
                    BACK_OFFSET,
                    BACK_SCALE,
                    BACK_SPACING);
            STYLEABLES = Collections.unmodifiableList(styleables);
        }
        return STYLEABLES;    //To change body of overridden methods use File | Settings | File Templates.
    }
</code></pre></noscript></div>




<p><strong>The Proof is in the Pudding</strong></p>


<p>I am sure I violated some coding standards the JavaFX team uses to create their CSS properties, but at the end of the day the code works. I do have to say, there is quite a bit of Yak Shaving that goes on. Hopefully in JavaFX 8 they will come up with some amazingly simple means to mark properties as styleable (I have <a href="https://gist.github.com/3711882">some ideas</a>). But until that future day, you can do CSS styling on your custom controls now.</p>

]]></description>
      <pubDate>Thu, 13 Sep 2012 08:02:00 -0600</pubDate>
      <author>Danno Ferrin &lt;danno.ferrin@shemnon.com&gt;</author>
      <link>http://speling.shemnon.com//blog/2012/09/13/fashion-forward-styling-your-controls-in-javafx-2-dot-2/</link>
      <guid isPermaLink="true">http://speling.shemnon.com//blog/2012/09/13/fashion-forward-styling-your-controls-in-javafx-2-dot-2/</guid>
    </item>
      
    
      
    <item>
      <title><![CDATA[JavaFX, Groovy, and Griffon]]></title>
      <description><![CDATA[<p>Over the weekend the GroovyFX 0.3 libraries were released. &nbsp;With this domino as well as the release of Griffon 1.0.2 I was able to update my Gr8Conf US presentation on JavaFX use only published libraries, rather than the local snapshots I had been using.</p>


<p><strong>Gr8Cooking Presentation</strong></p>


<p>My first Session at Gr8 US this year talked about JavaFX, Groovy, and Griffon.  Having watched too many episodes of <a href="http://www.foodnetwork.com/chopped/index.html">Chopped</a> I decided that my presentation needed to use the required ingredients of JavaFX, Groovy, Griffon, and Dogfood.  The results are in the <a href="https://github.com/shemnon/Gr8Cooking">Gr8Cooking</a> project on my github account.  And this is an interactive presentation, feel free to click on buttons and whatnot that are actually on the slide.  That was the point of this presentation.</p>


<!-- more -->


<p><strong>Griffon JavaFX Archetype</strong></p>


<p>This presentation also was built using the JavaFX Archetype in Griffon.  The new release merely updates the required Griffon version since the latest version of GroovyFX depends on some bug fixes in the core of Griffon.  To use the archetype simply use the <code>-archetype</code> parameter at the command line: <div><script src='https://gist.github.com/3621275.js?file='></script>
<noscript><pre><code>griffon create-app MyJavaFXApp -archetype=javafx</code></pre></noscript></div>
</p>


<p><strong>Griffon JavaFX Plugin</strong></p>


<p>The JavaFX Plugin was also upgraded.  With the release of JavaFX 2.2 the Java Developers Kit now supports the creation of native installer and app bundles for JavaFX applications.  No need to pay someone to write InstallShield scripts anymore.  (There&#8217;s a reason I never mention that in my resume).  Creating a native JavaFX package of your Griffon application is now insanely easy: <div><script src='https://gist.github.com/3621291.js?file='></script>
<noscript><pre><code>griffon package jfx-native</code></pre></noscript></div>
 Afterwards you can look for the native installers in <code>&lt;app&gt;/dist/jfxnative/bundles</code>.  Of course you can only create native bundles for the platform you are building on, and there are some required libraries for each platform you must install that vary for each platform.  Oracle has the <a href="http://docs.oracle.com/javafx/2/deployment/self-contained-packaging.htm#A1324980">details</a> in it&#8217;s JDK documentation.</p>


<p><strong>GroovyFX</strong></p>


<p>The final piece of the puzzle is the GroovyFX library, the integration of JavaFX into Groovy.  GroovyFX has upgraded in version 0.3 to require the 2.2 release of JavaFX, which includes support for the new Canvas element.  Jim Clarke did nearly all the work on that piece and <a href="http://www.codetown.us/profiles/blogs/javafx-2-2-canvas">blogged about it</a> a couple of months ago.</p>


<p>The other major feature add is the ability to reference FXML elements in a <code>fxml</code> block in your Groovy scripts and code.  This allows you to take an FXML file with only a visual description of the nodes and add the behavior code in the code creating the FXML, rather than in the xml declarations.  It looks like this: <div><script src='https://gist.github.com/3621462.js?file='></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;?import java.lang.*?&gt;
&lt;?import javafx.scene.*?&gt;
&lt;?import javafx.scene.control.*?&gt;
&lt;?import javafx.scene.layout.*?&gt;

&lt;AnchorPane xmlns:fx=&quot;http://javafx.com/fxml&quot;
            id=&quot;AnchorPane&quot; 
            prefHeight=&quot;150.0&quot; prefWidth=&quot;320.0&quot; &gt;
  &lt;children&gt;
    &lt;Button id=&quot;buttonCSSID&quot; 
            layoutX=&quot;40.0&quot; layoutY=&quot;65.0&quot; 
            prefWidth=&quot;100.0&quot; 
            text=&quot;Click Me!&quot; /&gt;
    &lt;Label id=&quot;labelCSSID&quot; 
           alignment=&quot;CENTER&quot; contentDisplay=&quot;CENTER&quot; 
           layoutX=&quot;40.0&quot; layoutY=&quot;100.0&quot; 
           minHeight=&quot;16.0&quot; minWidth=&quot;69.0&quot; 
           prefHeight=&quot;16.0&quot; prefWidth=&quot;100.0&quot; /&gt;
    &lt;Button fx:id=&quot;buttonFXID&quot; 
            layoutX=&quot;180.0&quot; layoutY=&quot;65.0&quot; 
            prefWidth=&quot;100.0&quot; text=&quot;Click Me!&quot; /&gt;
    &lt;Label fx:id=&quot;labelFXID&quot; 
           alignment=&quot;CENTER&quot; contentDisplay=&quot;CENTER&quot; 
           layoutX=&quot;180.0&quot; layoutY=&quot;100.0&quot; 
           minHeight=&quot;16.0&quot; minWidth=&quot;69.0&quot; 
           prefHeight=&quot;16.0&quot; prefWidth=&quot;100.0&quot; /&gt;
  &lt;/children&gt;
&lt;/AnchorPane&gt;</code></pre></noscript></div>
</p>


<p><strong>Summary</strong></p>


<p>There are a lot of moving parts in getting a high quality JavaFX application written.  But Griffon makes a point to hide the mechanical details so that you can focus on what matters: the application itself.  Do you know how to convert a 64x64 PNG file into a Mac Application Icon?  Griffon does, and you don&#8217;t need to.</p>

]]></description>
      <pubDate>Tue, 04 Sep 2012 07:24:00 -0600</pubDate>
      <author>Danno Ferrin &lt;danno.ferrin@shemnon.com&gt;</author>
      <link>http://speling.shemnon.com//blog/2012/09/04/javafx-groovy-and-griffon/</link>
      <guid isPermaLink="true">http://speling.shemnon.com//blog/2012/09/04/javafx-groovy-and-griffon/</guid>
    </item>
      
    
      
    <item>
      <title><![CDATA[The Life and Times of a JavaFX Skin]]></title>
      <description><![CDATA[<p>As a consequence of the <a href="http://gr8conf.us/Presentations/Groovy-plus-JavaFX-equals-Grif">talk</a> I gave at <a href="http://gr8conf.us/">Gr8Conf US</a> I&#8217;ve been wanting to create a real &#8220;Deck&#8221; control. Basically it is a stack of nodes that can be added to and navigated arbitrarily. And it displays these nodes in interesting ways. Something like a Powerpoint deck or a deck of cards. Also useful for UIs that use the &#8220;back&#8221; metaphor but the path forward isn&#8217;t fixed, like a Wizard.</p>


<p>Last evening I finally got around to coding some stuff up. My work is currently on github under my craftily named <a href="https://github.com/shemnon/DeckControl/">DeckControl</a> project. Nothing earth shattering (yet). So there will be no screenshots or demos in this post. What I do want to talk about is the Skin model JavaFX is using. These tidbits I have yet to find in any documentation. But that also may be because I haven&#8217;t really read the documentation beyond a cursory level, or any of the books for that matter.  I still haven&#8217;t finished reading the Wheel of Time, so it&#8217;s not too surprising.</p>


<!-- more -->


<p>Skins in JavaFX provide something Swing never could fully arrive at: total separation between the abstract control and the literal representation of the control on the screen. There were always ways to subvert and abuse the PLAF mechanisms. While a poorly constructed control can still present problems the architecture is there for a complete look and structure separation.</p>


<p><strong>Structure of a Skin</strong></p>


<p>A Skin is mostly a class that extends <code>javafx.scene.control.Skin</code>. I say mostly because there are two caveats. First, the <code>Skin</code> interface is a generic interface. The type parameter must be the same type as the control you are skinning. Second you must provide a constructor that takes a single argument of the type of the generic parameter. A piece of trivia is that the Skin need not be a <code>javafx.scene.Node</code>, although they often are a <code>StackPane</code>.  Just to prove my point my skin didn&#8217;t extend from <code>Node</code>.</p>


<p><strong>Lifecycle of a Skin</strong></p>


<p>The lifecycle of the skin is fairly straight forward. Simplified by the fact that skins are created for only one control, ever. No double dipping or reuse here. Garbage Collection has come a long way in the last 15 years.</p>


<ol>
<li><strong>Construct the Skin</strong><br />First the single argument constructor is called. If you are subclassing a skin pass the argument to the super. If not, stash the node you are passed in. You will need it later.<br />Next you will need to prepare everything you need. The constructor is a good place, although lazily in the next step is an option. But I think initializing in the constructor is the best place.</li>
<li><strong>Stuff Happens</strong><br />Stuff in the world will now happen. Some of this may or may not affect your control you are skinning. It&#8217;s hard to tell, unless you attached listeners to the parts of the world you care about.</li>
<li><strong>Node and Control Queried</strong><br />Two of the interface methods may now get called. They may get called multiple times, or once. Or not at all in pathological cases. (The kind of pathological cases QA departments are paid to find).<br />First for <code>getSkinnable()</code> you must return the control passed into your constructor.  If you subclassed an existing skin you are in the clear.<br />Second, <code>getNode()</code> will be called to get the <em>singular</em> node you are using to represent the control.  If you extend a Node class and it is the representation, return <code>this</code>.  Otherwise return the node you are using.  But whatever you do you must always return the same value (until you don&#8217;t have to, see step 6).</li>
<li><strong>More Stuff Happens</strong><br />This is much like step 2.  Except now that your node is in the wild anything in the world that changes that you need to reflect in the skin node tree must be reflected in that node.  In my case I have to pay attention to what nodes are being added to the deck and what node in the deck is showing.  This step repeats with step 3 for an indeterminate number of cycles, zero or more times.  Make sure you play nicely with repetition</li>
<li><strong>Disposal</strong><br />Finally, <code>dispose()</code> is called.  This is JavaFX saying &#8220;we&#8217;re through&#8221; and storming out the door, never(?) to be seen again.  There is no getting back together, if a new skin of the same kind is needed it will be created anew.<br />All that is left to do now is to clean up whatever messes you made.  Most importantly this includes any listeners you have attached outside the world of your Skin.  So keep track of listeners you attach.  And if you are not sure if the listener left your little world then cut it off, just to be sure.</li>
<li><strong>Afterlife</strong><br />There is a chance that JavaFX may drunk-dial you and <code>getNode()</code> and <code>getSkinnable()</code> may be called again.  Don&#8217;t get excited, things won&#8217;t be like they were before, this was an accident.  You can return null at this point as long as you immediately start returning null after <code>dispose()</code> is called.</li>
</ol>


<p><strong>Clean up after yourself</strong></p>


<p>If there is one thing to point out in the lifecycle, it is that you should clean up after yourself. The listeners you attach don&#8217;t always fall away magically. And you should design for on the fly skin changes. This isn&#8217;t like Swing where changing the PLAF after the controls were shown was the exception to the rule, and formally dissed by core developers in conference sessions. Skins will change at runtime and they will result in magical effects, so plan accordingly.</p>

]]></description>
      <pubDate>Tue, 28 Aug 2012 21:06:00 -0600</pubDate>
      <author>Danno Ferrin &lt;danno.ferrin@shemnon.com&gt;</author>
      <link>http://speling.shemnon.com//blog/2012/08/28/the-life-and-times-of-a-javafx-skin/</link>
      <guid isPermaLink="true">http://speling.shemnon.com//blog/2012/08/28/the-life-and-times-of-a-javafx-skin/</guid>
    </item>
      
    
      
    <item>
      <title><![CDATA[NPEs: Permission vs. Forgiveness]]></title>
      <description><![CDATA[<p>Is it better to ask for permission or forgiveness? That is a question that always depends on the context.</p>


<!-- more -->


<p>For one shot events forgiveness is always less of a hassle. For example, if your motivational speaker for your group at work performs stunts like juggling flaming batons and swallowing swords, it&#8217;s best not to get HR involved. From your perspective it is a onetime deal and if nothing goes wrong it will just be an uncomfortable e-mail thread when the responsible adults in the company find out. And that is assuming HR isn&#8217;t dealing with any real issues (like making sure everyone has finished their sensitivity training). However, the speaker will likely have been through this process before. A true professional who does these stunts all the time will insist on signed releases from the company, especially from anyone authorized to sue.</p>


<p>Another context is programming. Instead of lawsuits we have exceptions. And instead of juggling flaming batons and swallowing swords we dereference pointers, a truly dangerous practice. When writing code to deal with these pointers there are two broad approaches: guard blocks where you check for null before dereferencing, and attempting it without the guard and catching the inevitable exception.</p>


<p>Old school C and C++ coders will always use guard blocks. This is primarily for two reasons, (a) null dereferences were almost always fatal, and (b) they didn&#8217;t always have fancy things like exception handling&#8230;&nbsp;<em>and they liked it!</em>&nbsp;Permission was the only reliable approach (now get off my lawn you script kiddie).</p>


<p>New generation languages like Java and later incarnations of C++ standardized exception catching. If you make a mistake you can pick up the pieces and move on. Forgiveness became an option. And for a lot of code it is easier to read and write forgiving code rather than permission seeking code.</p>


<p>But easier to read and write is a very subjective criteria. Whether permission or forgiveness is better has no hard metric. But which is more efficient and faster? That is a hard metric! Time of execution. So I&nbsp;<a href="https://gist.github.com/1871252">coded up an experiment</a>&nbsp;to get cold hard numbers.</p>


<p>But before we conduct this experiment we should predict the outcome. Can forgiveness ever be faster than permission? If we get rid of all of the null checks those are less cycles to burn on every execution through a loop. If the overhead of an exception is low enough then with infrequent enough exceptions it should be faster. Kind of like a parking ticket. If it&#8217;s 5 cents a minute to park and for every 4 hours you are parked you will get a $20 ticket (with no other consequences) should you feed the meter? Never! you can save about a dollar an our just paying the parking ticket. But if the fine is $24 then it&#8217;s a wash, and you depend on beating the parking enforcement officer to make any gains. So if the exception overhead is low enough eventually forgiveness makes sense. Right?</p>


<p><img style="border-style: initial; border-color: initial;" src="http://chart.apis.google.com/chart?chxl=0:|-5|-10|-15|-20|1:|1ms|0.5ms|0.3ms|0.2ms|0.1ms&amp;chxp=0,5,10,15,20|1,1,0.5,0.3,0.2,0.1&amp;chxr=0,4,20|1,0,1&amp;chxs=1,676767,11.5,0,lt,676767&amp;chxt=x,y&amp;chs=440x220&amp;cht=lxy&amp;chco=3072F3,FF0000&amp;chds=5,20,0,1,5,20,0,1&amp;chd=t:-1,-1,-1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20|0.109,0.098,0.098,0.094,0.092,0.092,0.093,0.093,0.092,0.093,0.095,0.098,0.095,0.093,0.092,0.095,0.094,0.094,0.094|-1,-1,-1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20|-1,-1,-1,0.998,0.55,0.331,0.213,0.151,0.127,0.11,0.104,0.098,0.097,0.096,0.095,0.105,0.116,0.094,0.093&amp;chdl=Permission|Forgiveness&amp;chg=0,20,4,9&amp;chls=2|1&amp;chma=5,0,5,25|0,5&amp;chtt=Permission+vs+Forgiveness" alt="Permission vs Forgiveness" width="440" height="220" /></p>


<p>Well, it looks like forgiveness is not very rewarding on the JVM. For this chart the Y axis is the average time through my test call, and the X axis is the increasing rarity of the exception, a probability of between 2<sup>-4</sup> and 2<sup>-20</sup>, or 1 in 16 to over 1 in a million (so your saying there&#8217;s a chance!). Forgiveness is&nbsp;<em>at best</em>&nbsp;nearly as good as permission, and at worst over two magnitudes of order worse (it&#8217;s like 147x at 100% forgiveness).</p>


<p>So that motivational speaker may really be awesome, but it is almost always better to ask for permission. Especially when he sets the carpet on fire.</p>


<p>&nbsp;</p>

]]></description>
      <pubDate>Mon, 20 Feb 2012 17:52:00 -0700</pubDate>
      <author>Danno Ferrin &lt;danno.ferrin@shemnon.com&gt;</author>
      <link>http://speling.shemnon.com//blog/2012/02/20/npes-permission-vs-forgiveness/</link>
      <guid isPermaLink="true">http://speling.shemnon.com//blog/2012/02/20/npes-permission-vs-forgiveness/</guid>
    </item>
      
    
  </channel>
</rss>