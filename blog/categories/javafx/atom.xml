<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaFX | ...and they shall know me by my speling errors.]]></title>
  <link href="http://speling.shemnon.com//blog/categories/javafx/atom.xml" rel="self"/>
  <link href="http://speling.shemnon.com//"/>
  <updated>2014-01-30T16:52:40-07:00</updated>
  <id>http://speling.shemnon.com//</id>
  <author>
    <name><![CDATA[Danno Ferrin]]></name>
    <email><![CDATA[danno.ferrin@shemnon.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaFX Gradle Plugin 0.4.0 Released]]></title>
    <link href="http://speling.shemnon.com//blog/2013/10/29/javafx-gradle-plugin-0-dot-4-0-released/"/>
    <updated>2013-10-29T18:36:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2013/10/29/javafx-gradle-plugin-0-dot-4-0-released</id>
    <content type="html"><![CDATA[<p>Yesterday I pushed the fifth rerelease of my JavaFX Plugin for Gradle to BinTray, version <a href="https://bintray.com/version/show/general/shemnon/javafx-gradle/gradle-javafx-plugin/0.4.0">0.4.0</a>. (Who came up wit the idea of zero indexed arrays anyway?) New in this release is the ability to specify a particular source set from which to package your runtime classes from. There were also a large number of bug fixes.</p>

<p>To use the plugin in your gradle script copy the following script into your root build directory:</p>

<pre><code>http://dl.bintray.com/content/shemnon/javafx-gradle/0.4.0/javafx.plugin
</code></pre>

<p>and then load it in your <code>build.gradle</code> file like so:</p>

<pre><code>apply from: ‘javafx.plugin’
</code></pre>

<p>This is a change from previous releases where I recommended you apply the script directly from the internet.  But that doesn’t works so well on an airplane or other similarly air-gapped networks, particularly in places with poor wifi reception.</p>

<!-- more -->


<h1>Specifying the Packaged Source Set</h1>

<p>Sometimes your gradle project may have a large number of source sets you compile your java code from (where large is larger than 2).  Often that means that the source set with the main class isn’t <code>main</code>.  In previous versions of the plugin I assumed that <code>main</code> was the source set to use for packaging, now you can specify a different source set in the <code>javafx</code> block:</p>

<pre><code>sourceSets {
  main 
  samples {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      runtimeClasspath += javadocJar.output
    }
  }
}

javafx {
    sourceSet = ‘samples’
} 
</code></pre>

<p>But to be honest, I strongly recommend that your samples be placed in a separate sub project following the maven conventional tree structure.  However since I am a strong advocate of choice in build tooling, you are now free to choose a different path than the opinion expressed by the build tool.  But these opinions exist for your own good, trust us. ;) P</p>

<h1>Bug fixes</h1>

<p>Nearly all of the other changes revolve around bug fixes, mostly from ones I learned about in the <a href="https://bitbucket.org/shemnon/javafx-gradle/issues">bug queue</a>. Keep them coming!  One dealt with playing nicely with the gradle <code>application</code> plugin, one with specifying manifest entries, and there were some unreported ones I fixed in relation to jar files in the 7u40 java updates</p>

<h1>Summary</h1>

<p>If the plugin isn’t addressing your needs be sure to drop me a line on twitter at <a href="https://twitter.com/shemnon">@shemnon</a> or via <a href="https://plus.google.com/107563042277462358434">Google+</a>.  Oh yea, there is still that e-mail thing too: danno dot ferrin at gmail or shemnon dot com.  If my responses aren’t quick that is likely because I am playing LEGO Marvel Super Heroes on my legacy XBox 360 (which I won filling out conference surveys at JavaOne 5 years ago).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaOne 2013: Dogfooding the Future Java]]></title>
    <link href="http://speling.shemnon.com//blog/2013/10/01/javaone-2013-dogfooding-the-future-java/"/>
    <updated>2013-10-01T19:10:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2013/10/01/javaone-2013-dogfooding-the-future-java</id>
    <content type="html"><![CDATA[<p>Last week I presented two talks at JavaOne 2013.  The first talk I gave on Monday was "Styling Your Custom Components with CSS in JavaFX."  My second talk on Tuesday was "Building and Deploying JavaFX Applications with Gradle or Maven (or Ant!)." Since these two sessions were very technical in nature I created demo applications for both and the source for these are on Bitbucket.  One repo for the <a href="https://bitbucket.org/shemnon/jfxcustomcss">custom CSS presentation</a> and another one for the <a href="https://bitbucket.org/shemnon/jfxdeployment">deployment build tools</a> talk. Since each talk dealt with different perspectives in the same talk I created a separate git branch for one, so keep your eye out for the branches.</p>

<h3>Dogfood</h3>

<p>Not only were my samples written for JavaFX, but the presentation itself was written with JavaFX and used JavaFX technologies for every pixel the presentation put on the screen. <!--more--> The whole dogfood slide deck thing isn't new (it's been <a href="http://artifacts.griffon-framework.org/plugin/slideware/installation">done before</a> and will not doubt be done again) but it is an important milestone for a graphics stack that it is capable of running an essential task for a conference presentation.</p>

<p>I made this decision 5 days before I was supposed to present, mostly because I really like the style that GitHub has for the markdown highlighting of code based text. I couldn't find an acceptable Keynote template that replicated that, so I realized that I had already written code for the two most basic parts: a markdown renderer and a deck control. Combine those with Java 8 Lambda syntax and the end result clocks in at only <a href="https://bitbucket.org/shemnon/jfxdeployment/src/1e2f5865df62ef5b3d35a5a171a3f1d7ee77429b/src/main/java/org/bitbucket/shemnon/preso/deploy/Preso.java?at=preso">313 lines of code</a> (the whole build is in the <code>preso</code> branch of each repo). Not that we are playing golf or anything, but I estimate the lambda free code would clock in somewhere between 350-400 lines of code for a lines of code code savings of 10-20%. I know, I know, Groovy could do it in fewer lines and if I used tabs instead of spaces I could save even more space on my hard drive. But those are left as an exercise to the reader.</p>

<h3>New and Exciting JavaFX 8 Features</h3>

<p>The whole stack also includes the features I talked about as well as new JavaFX 8 features (some are both). The <a href="https://bitbucket.org/shemnon/deckcontrol">deck control</a> uses the newly exposed CSS styling APIs. The <a href="https://bitbucket.org/shemnon/flowdown">Markdown node</a> uses the new TextFlow API (which interestingly enough had no conference coverage I could see). I packaged the apps up into runtime-free applications, so you will need to install a current build of Java 8. The CSS Presentation is available as a Windows <a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2935%20-%20CSS%20for%20Custom%20JavaFX%20Controls-0.0.0.exe">EXE</a> <a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2935%20-%20CSS%20for%20Custom%20JavaFX%20Controls-0.0.0.msi">MSI</a> and <a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2935%20-%20CSS%20for%20Custom%20JavaFX%20Controls.zip">zip</a> and as a MacOSX <a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2935%20-%20CSS%20for%20Custom%20JavaFX%20Controls.dmg">DMG</a>. The deployment presentation is also available as a Windows <a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2106%20-%20Building%20and%20Deploying%20JavaFX%20Applications%20with%20Gradle%20or%20Maven%20or%20Ant-0.0.0.exe">EXE</a>, <a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2106%20-%20Building%20and%20Deploying%20JavaFX%20Applications%20with%20Gradle%20or%20Maven%20or%20Ant-0.0.0.msi">MSI</a>, <a href="CON2106%20-%20Building%20and%20Deploying%20JavaFX%20Applications%20with%20Gradle%20or%20Maven%20or%20Ant.zip">zip</a>, and Mac <a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2106%20-%20Building%20and%20Deploying%20JavaFX%20Applications%20with%20Gradle%20or%20Maven%20%40or%20Ant!%41.dmg">DMG</a>.  Don't forget to install a <a href="https://jdk8.java.net/download.html">Java 8 Early access build</a> first.</p>

<p>One last surprise came when I attempted to upload my slides to the speaker portal. Apparently it only accepts PDF files and not markdown files. So this presented another opportunity to use yet another new feature in JavaFX 8: printing. Over the course of an afternoon I wired up a print button and printed my slides out to PDF. So now I have a PDF version of my slides generated from JavaFX (<a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2935_ferrin.pdf">CSS</a> and <a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2106_Ferrin.pdf">deployment</a>). Talk about dogfood.</p>

<h3>Buzz is the Word</h3>

<p>So, in summary, the source files for my JavaOne persecutions are on <a href="https://bitbucket.org/">BitBucket</a>, the binaries are on <a href="https://bintray.com/">Bintray</a> (congrats on the Duke's Choice award). And there are lots of neat new Java 8 features used: Lambdas, JavaFX Printing, TextFlow, CSSMetaData, javafxpackager, and a MarkDown renderer. And of course it is all built with my Gradle plugin.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle JavaFX Plugin 0.2.0 Released]]></title>
    <link href="http://speling.shemnon.com//blog/2013/01/30/gradle-javafx-plugin-0-dot-2-0-released/"/>
    <updated>2013-01-30T19:57:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2013/01/30/gradle-javafx-plugin-0-dot-2-0-released</id>
    <content type="html"><![CDATA[<p>The 0.2.0 release of the Gradle JavaFX Plugin is now live on <a href="http://l.aunch.us/fOjm">BinTray</a>. Get it while it's hot! More things changed in this release than the lat time around. First there has been a lot of work automating the use of icons in the packaged resource. My <a href="http://speling.shemnon.com/blog/2013/01/28/adding-icons-with-the-gradle-javafx-plugin/">previous post</a> has all the details. Second, the interaction between the Maven and Eclipse plugin has been improved. Finally, the distribution has move to BinTray for the release artifacts.</p>

<!-- more -->


<p><strong>Changed Conventions</strong></p>

<p>There is one notable change that needs to be called out. Previously package specific resources went under <code>src/main/resources</code>. I have moved them to <code>src/deploy/resources</code> to clarify that they are used for deployment and not at runtime. This was needed for the gradle eclipse plugin to create sensible projects. The sample applications have been adjusted appropriately.</p>

<p><strong>Changed Deployment Info</strong></p>

<p>The plugin is no longer deployed to the webdav repository on CloudBees, but instead has migrated over to <a href="http://l.aunch.us/fOjm">BinTray</a>. The new recommend release scripts for the most recent version of the plugin, regardless of version:</p>

<p><code>
apply from: 'http://dl.bintray.com/content/shemnon/javafx-gradle/javafx.plugin'
</code></p>

<p>For a version locked script you can use this script</p>

<p><code>
apply from: 'http://dl.bintray.com/content/shemnon/javafx-gradle/0.2.0/javafx.plugin'
</code></p>

<p>The repository location and co-ordinates also have changed. If you are using a direct build script dependency you will to use this co-ordinate</p>

<p><code>
org.bitbucket.shemnon.javafxplugin:gradle-javafx-plugin:0.2.0
</code></p>

<p>You will likely want to look at the <a href="http://dl.bintray.com/content/shemnon/javafx-gradle/0.2.0/javafx.plugin">apply script</a> anyway since there are also some other build time dependencies. <em>I wish gradle just had a way to apply plugins from a maven co-ordinate, with dependencies.</em></p>

<p><strong> Examples </strong></p>

<p>If you would like to see some samples built with the plugin you can download them from <a href="http://repository-javafx-gradle-plugin.forge.cloudbees.com/release/0.2.0/">the CloudBees repository</a>. Only the single file installers are available. The <a href="https://bitbucket.org/shemnon/javafx-gradle/src/009e6d4d2487/samples?at=release_0.2.0">source</a> is available at the <a href="https://bitbucket.org/shemnon/javafx-gradle/">bitbucket project</a>.</p>

<p><strong> Future Plans </strong></p>

<p>For the next release I am planning on spending more time focusing on making the per-platform packaging top notch. I will add in hooks and allowances so that the end user can build any of the packaged platforms without conflict. One example is that the <code>appId</code> means different, incompatible, things on Windows and Mac. Windows wants a GUID whereas Mac wants a CFBundleIdentifier (which is close to a package name). Then there is the issue of gatekeeper and other smaller details.</p>

<p>In the mean time, if you find any bugs please be sure to <a href="https://bitbucket.org/shemnon/javafx-gradle/issues?status=new&amp;status=open">report them</a>. I can also be found on twitter as <a href="http://twitter.com/shemnon">@shemnon</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Icons with the Gradle JavaFX Plugin]]></title>
    <link href="http://speling.shemnon.com//blog/2013/01/28/adding-icons-with-the-gradle-javafx-plugin/"/>
    <updated>2013-01-28T14:57:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2013/01/28/adding-icons-with-the-gradle-javafx-plugin</id>
    <content type="html"><![CDATA[<p>The 0.2.0 release of the Gradle JavaFX Plugin is just around the corner. I want to spend some time building all the samples on all of the platforms and making sure smoke doesn't come out. Expect it in a day or two.</p>

<p>The major feature for this release is better handling of packaged icons across the platforms. There is a file convention manner and a build script configuration method that will allow you to take a set of PNG images and let the build tool create the needed specialty file for each platform.</p>

<!-- more -->


<p>A quick word of warning before I dive into the details. You have to choose either the convention or the configuration, not both. If you do any configuration of your icons then none of the file conventions will be applied.</p>

<p><strong> Icons By Convention </strong></p>

<p>The easiest method is just to place specifically named icons in a specific place. The directory you should place the icons in is <code>src/deploy/package</code>. The icons also all need to be PNG images. The real magic is in how you name your icons. If they have the right pattern for their name then icon will be used and the sizes and other metadata are calculated by the plugin.</p>

<p>When naming icons for the conventional method the first part of the name describes the role of the icon. Right now the values are <code>shortcut</code>, <code>volume</code>, and <code>setup</code>. An icon of type <code>shortcut</code> will be the icon in the launcher, executable, taskbar, menu, or dock. An icon of type <code>volume</code> will be used for the MacOSX DMG folder icon. And an icon of type <code>setup</code> will appear in the corner of a Windows EXE setup wizard.</p>

<p>The second part of the name is any random set of characters. You would do this to distinguish the various sizes of the icons. However multiple icons are only recommend for the <code>shortcut</code> and <code>volume</code> icon sets, since the <code>setup</code> icon is converted into a BMP by the plugin. For MacOSX you also need to pay attention to the icon sizes, since only certain sizes are used by the MacOSX ICNS file. Those size are 16, 32, 128, 256, and 512 square. Note that 64x64 is not in that list!</p>

<p>The final part of the name is only relevant to MacOSX installers. If the file has '@2x' in it's name anywhere, it is presumed to be a HDPI icon for that size. This means that the pixel dimensions are twice as large for that icon then the size it is considered to be. Right now the string can occur anywhere, but future versions of the plugin may require it to be at the end of the name.</p>

<p>For example, a 16x16 icon named <code>shortcut.png</code> would be used as the shortcut icon. If there was another 512x512 icon named <code>shortcut-awesome.png</code> that icon would be used as well. And if a 1024x1024 icon was also in the correct directory and it was named <code>shortcutReallyAwesome@2x.png</code> then it would be a shortcut icon, at HDPI scale 2, used for the 512x512 icon. For a functional example of this see the <a href="https://bitbucket.org/shemnon/javafx-gradle/src/1bd371c2d4656d383636f84a37a5841e6894af23/samples/brickbreaker/src/deploy/package?at=master">brickbreaker</a> sample in the source code.</p>

<p><strong>Icons by Configuration</strong></p>

<p>If you want to have the build script configure the icons you can do that as well. This will allow the re-use of icons across different usage kinds. There are two methods of configuration both of which are supported when using the configuration option.</p>

<p>The shorthand method involved adding an <code>icons</code> configuration setting inside the <code>javafx</code> configuration setting. Inside this configuration you set a value for each kind of icon you are using to either a string or list of strings. These strings will be resolved as files against the <code>src/deploy/package</code> directory. For example, from the <a href="https://bitbucket.org/shemnon/javafx-gradle/src/1bd371c2d465/samples/FullyExpressed/build.gradle?at=master#cl-92">FullyExpressed</a> sample (which is a junk project that turns every knob and flips every switch just to do it) the icons are configured like this:</p>

<p>```
javafx {</p>

<pre><code>/*. . . snip . . .*/
icons {
    shortcut = ['shortcut-16.png', 'shortcut-32.png', 
                'shortcut-128.png', 'shortcut-256.png', 
                'shortcut-16@2x.png', 'shortcut-32@2x.png', 
                'shortcut-128@2x.png']
    volume = 'javafx-icon.png'
    setup = 'javafx-icon.png'
}
/*. . . snip . . .*/
</code></pre>

<p>}
```</p>

<p>Like the conventional way the sizes of the icons are sniffed out and the HDPI icons all contain '@2x' at the end of their name. The icons also all must be PNG icons. Finally, remember that any text between the kind and the possible end of the name is not used by the plugin, unless it is the <code>@2x</code> at the end to tell the icon it is a HDPI icon.</p>

<p>If you need total control over the JNLP descriptor you can specify each one in an <code>icon</code> setting. You repeat the setting for each icon. You can then set each attribute individually. For example, form the same <a href="https://bitbucket.org/shemnon/javafx-gradle/src/bbe9d6ebe08d/samples/FullyExpressed/build.gradle?at=master#cl-99">FullyExpressed</a> sample the splash and selected icons are configured manually.</p>

<p>```
javafx {</p>

<pre><code>/*. . . snip . . .*/
icon {
    href = 'src/main/resources/javafx-icon.png'
    kind = 'splash'
    width = 128
    height = 128
}
icon {
    href = 'shortcut-32@2x.png'
    kind = 'selected'
    width = 16
    height = 16
    scale = 1
}
/*. . . snip . . .*/
</code></pre>

<p>}
```</p>

<p><strong>Packager Defaults</strong></p>

<p>The defaults provided buy the JavaFX packaging library were not changed.  So if you see a grey embossed java coffee cup then the default for that icon has not been changed.</p>

<p>If you want to use the current code, you can add <code>apply from: 'https://repository-javafx-gradle-plugin.forge.cloudbees.com/snapshot/javafx.plugin</code> to the top of your gradle file.  Or you can wait a few days until I push the bits to BinTray.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mirroring OpenJFX on BitBucket, an Update]]></title>
    <link href="http://speling.shemnon.com//blog/2012/12/20/mirroring-openjfx-on-bitbucket-an-update/"/>
    <updated>2012-12-20T20:18:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2012/12/20/mirroring-openjfx-on-bitbucket-an-update</id>
    <content type="html"><![CDATA[<p>This is a quick update on my mirrors of OpenJFX on BitBucket.  I've moved some stuff around and automated it a bit.  I am also retiring my "combined" repo that would merge the master, graphics, and controls scrums together.  It got messy with multiple heads and bookmarks, and given the weekly merging the two scrums do wasn't really adding any value.</p>

<!-- more -->


<p><strong>Updates on Names</strong></p>

<p>The first major change that I did was to move the mirrors off of my personal account onto a team account named <a href="https://bitbucket.org/openjfxmirrors">'OpenJFX Mirrors'</a>.  That landing page is kind of ugly, so I created a repo to hold a wiki whose only page right now <a href="https://bitbucket.org/openjfxmirrors/mirrors/wiki/Home">describes the current mirrors</a>.</p>

<p>One advantage of the name change is that it allows for more participation.  On the free bitbucket account up to 4 other people can be added in to manage things.  There is also the marketing advantage of saying the BitBucket "team" is dedicated to mirroring OpenJFX, and that it is more than one of my many repos on BitBucket (I have many private repos).</p>

<p>There is a standard mapping of the OpenJDK repos to the BitBucket repos.  Basically you change the prefix and then replaces slashes with dashes.  For example this URL:</p>

<pre><code>https://hg.openjdk.java.net/openjfx/8/controls/rt
</code></pre>

<p>is mirrored to this URL:</p>

<pre><code>https://bitbucket.org/openjfxmirrors/openjfx-8-controls-rt
</code></pre>

<p>It is important to note that not every OpenJFX Repo is mirrored.  Right now I only mirror the Version 8 branches.  Of the 2.x line I only consider 2.2.6 to be worthy of mirroring, and then since it is just bug fixes and not feature adds I consider it less interesting.</p>

<p><strong>Automation</strong></p>

<p>The second major change is that I have automated the update of the repos.  Before I had a shell script on my MacBook Air that would do the pulling and pushing of the repo data.  It was slick and easy, but it required me opening up my Macbook air once in a while.  At my old job it was a more than daily occurrence.  But since I am starting up new work at Fluke Networks I have more interesting things to do all day than keeping up to date on all of Reddit's Advice Animals.</p>

<p>Writing this script is incredibly simple.  At the core of the loop are the two real commands that get work done:</p>

<pre><code>hg pull
hg push
</code></pre>

<p>That's all.  And I am not just pushing the repo back onto itself.  Mercurial comes with the concept of a <em>default push</em> repository.  Pulls come from the default, and pushes by default go to the default push repo, or just the default repo if not set.  The <code>.hg/hgrc</code> file contains this mapping:</p>

<pre><code>[paths]
default = http://hg.openjdk.java.net/openjfx/8/controls/rt
default-push = ssh://hg@bitbucket.org/openjfxmirrors/openjfx-8-controls-rt
</code></pre>

<p>Of note is that I use the SSH mapping with a public key so the script is never asked for my user password and never knows about it to begin with.</p>

<p><strong>Props to CloudBees and Atlassian</strong></p>

<p>None of this would have been possible without the gracious donation of disk space and processing time from two names you should already know.  Atlassian and CloudBees.</p>

<p><a href="http://www.atlassian.com/">Atlassian</a> owns and operates the <a href="https://bitbucket.org/">BitBucket</a> service, which hosts the Mercurial repositories that I am using to mirror.  The point of this mirroring is that the UI at BitBucket is orders of magnitude better than the one you get at OpenJDK.  Visualizing the changes and examining the source files is actually possible with this interface.</p>

<p>The automation is hosted over at <a href="http://www.cloudbees.com/">CloudBees</a> on their eponymous cloud build platform. It is awesome of them to offer free build server time to open source projects.  I even have one of their technical running shirts I snagged at JavaOne this year.  (And I promise it will get more use as a running shirt next year).</p>

<p>Give these companies some of your business, they deserve it.</p>
]]></content>
  </entry>
  
</feed>
