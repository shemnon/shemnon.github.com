<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Griffon | ...and they shall know me by my speling errors.]]></title>
  <link href="http://speling.shemnon.com//blog/categories/griffon/atom.xml" rel="self"/>
  <link href="http://speling.shemnon.com//"/>
  <updated>2014-01-30T09:54:46-07:00</updated>
  <id>http://speling.shemnon.com//</id>
  <author>
    <name><![CDATA[Danno Ferrin]]></name>
    <email><![CDATA[danno.ferrin@shemnon.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaFX, Groovy, and Griffon]]></title>
    <link href="http://speling.shemnon.com//blog/2012/09/04/javafx-groovy-and-griffon/"/>
    <updated>2012-09-04T07:24:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2012/09/04/javafx-groovy-and-griffon</id>
    <content type="html"><![CDATA[<p>Over the weekend the GroovyFX 0.3 libraries were released. &nbsp;With this domino as well as the release of Griffon 1.0.2 I was able to update my Gr8Conf US presentation on JavaFX use only published libraries, rather than the local snapshots I had been using.</p>


<p><strong>Gr8Cooking Presentation</strong></p>


<p>My first Session at Gr8 US this year talked about JavaFX, Groovy, and Griffon.  Having watched too many episodes of <a href="http://www.foodnetwork.com/chopped/index.html">Chopped</a> I decided that my presentation needed to use the required ingredients of JavaFX, Groovy, Griffon, and Dogfood.  The results are in the <a href="https://github.com/shemnon/Gr8Cooking">Gr8Cooking</a> project on my github account.  And this is an interactive presentation, feel free to click on buttons and whatnot that are actually on the slide.  That was the point of this presentation.</p>


<!-- more -->


<p><strong>Griffon JavaFX Archetype</strong></p>


<p>This presentation also was built using the JavaFX Archetype in Griffon.  The new release merely updates the required Griffon version since the latest version of GroovyFX depends on some bug fixes in the core of Griffon.  To use the archetype simply use the <code>-archetype</code> parameter at the command line: <div><script src='https://gist.github.com/3621275.js?file='></script>
<noscript><pre><code>griffon create-app MyJavaFXApp -archetype=javafx</code></pre></noscript></div>
</p>


<p><strong>Griffon JavaFX Plugin</strong></p>


<p>The JavaFX Plugin was also upgraded.  With the release of JavaFX 2.2 the Java Developers Kit now supports the creation of native installer and app bundles for JavaFX applications.  No need to pay someone to write InstallShield scripts anymore.  (There's a reason I never mention that in my resume).  Creating a native JavaFX package of your Griffon application is now insanely easy: <div><script src='https://gist.github.com/3621291.js?file='></script>
<noscript><pre><code>griffon package jfx-native</code></pre></noscript></div>
 Afterwards you can look for the native installers in <code>&lt;app&gt;/dist/jfxnative/bundles</code>.  Of course you can only create native bundles for the platform you are building on, and there are some required libraries for each platform you must install that vary for each platform.  Oracle has the <a href="http://docs.oracle.com/javafx/2/deployment/self-contained-packaging.htm#A1324980">details</a> in it's JDK documentation.</p>


<p><strong>GroovyFX</strong></p>


<p>The final piece of the puzzle is the GroovyFX library, the integration of JavaFX into Groovy.  GroovyFX has upgraded in version 0.3 to require the 2.2 release of JavaFX, which includes support for the new Canvas element.  Jim Clarke did nearly all the work on that piece and <a href="http://www.codetown.us/profiles/blogs/javafx-2-2-canvas">blogged about it</a> a couple of months ago.</p>


<p>The other major feature add is the ability to reference FXML elements in a <code>fxml</code> block in your Groovy scripts and code.  This allows you to take an FXML file with only a visual description of the nodes and add the behavior code in the code creating the FXML, rather than in the xml declarations.  It looks like this: <div><script src='https://gist.github.com/3621462.js?file='></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;?import java.lang.*?&gt;
&lt;?import javafx.scene.*?&gt;
&lt;?import javafx.scene.control.*?&gt;
&lt;?import javafx.scene.layout.*?&gt;

&lt;AnchorPane xmlns:fx=&quot;http://javafx.com/fxml&quot;
            id=&quot;AnchorPane&quot; 
            prefHeight=&quot;150.0&quot; prefWidth=&quot;320.0&quot; &gt;
  &lt;children&gt;
    &lt;Button id=&quot;buttonCSSID&quot; 
            layoutX=&quot;40.0&quot; layoutY=&quot;65.0&quot; 
            prefWidth=&quot;100.0&quot; 
            text=&quot;Click Me!&quot; /&gt;
    &lt;Label id=&quot;labelCSSID&quot; 
           alignment=&quot;CENTER&quot; contentDisplay=&quot;CENTER&quot; 
           layoutX=&quot;40.0&quot; layoutY=&quot;100.0&quot; 
           minHeight=&quot;16.0&quot; minWidth=&quot;69.0&quot; 
           prefHeight=&quot;16.0&quot; prefWidth=&quot;100.0&quot; /&gt;
    &lt;Button fx:id=&quot;buttonFXID&quot; 
            layoutX=&quot;180.0&quot; layoutY=&quot;65.0&quot; 
            prefWidth=&quot;100.0&quot; text=&quot;Click Me!&quot; /&gt;
    &lt;Label fx:id=&quot;labelFXID&quot; 
           alignment=&quot;CENTER&quot; contentDisplay=&quot;CENTER&quot; 
           layoutX=&quot;180.0&quot; layoutY=&quot;100.0&quot; 
           minHeight=&quot;16.0&quot; minWidth=&quot;69.0&quot; 
           prefHeight=&quot;16.0&quot; prefWidth=&quot;100.0&quot; /&gt;
  &lt;/children&gt;
&lt;/AnchorPane&gt;</code></pre></noscript></div>
</p>


<p><strong>Summary</strong></p>


<p>There are a lot of moving parts in getting a high quality JavaFX application written.  But Griffon makes a point to hide the mechanical details so that you can focus on what matters: the application itself.  Do you know how to convert a 64x64 PNG file into a Mac Application Icon?  Griffon does, and you don't need to.</p>

]]></content>
  </entry>
  
</feed>
