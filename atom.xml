<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[...and they shall know me by my speling errors.]]></title>
  <link href="http://speling.shemnon.com//atom.xml" rel="self"/>
  <link href="http://speling.shemnon.com//"/>
  <updated>2014-07-16T10:31:50-06:00</updated>
  <id>http://speling.shemnon.com//</id>
  <author>
    <name><![CDATA[Danno Ferrin]]></name>
    <email><![CDATA[danno.ferrin@shemnon.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Word Crimes]]></title>
    <link href="http://speling.shemnon.com//blog/2014/07/16/word-crimes/"/>
    <updated>2014-07-16T10:24:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2014/07/16/word-crimes</id>
    <content type="html"><![CDATA[<p>If you judge my blog form the title or its content it is clear I am a habitiual word criminal.  So of course I have to share this. Because U will C how awesome <a href="http://english.stackexchange.com/questions/500/is-there-some-rule-against-ending-a-sentence-with-the-contraction-its">it&#8217;s</a>.</p>

<iframe width="560" height="315" src="http://speling.shemnon.com///www.youtube.com/embed/8Gv0H-vPoDc" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle and Maven Plugins for 8u20 Update]]></title>
    <link href="http://speling.shemnon.com//blog/2014/07/11/gradle-and-maven-plugins-for-8u20-update/"/>
    <updated>2014-07-11T18:21:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2014/07/11/gradle-and-maven-plugins-for-8u20-update</id>
    <content type="html"><![CDATA[<p>The first feature maintenance release of Java 8, known as 8u20, is scheduled for release <a href="http://openjdk.java.net/projects/jdk8u/releases/8u20.html">sometime in August</a> (this could change, don&#8217;t get offended if it does).  There are a number of changes coming to how the Java Packager works, a lot of them under the hood to aid the tooling of build tools and IDEs.  I&#8217;de like to take some time to provide some updates.</p>

<!-- more -->


<h1>Compatibility</h1>

<p>Don&#8217;t worry, your old build tool integration will still work.  If something breaks tell me and I&#8217;ll fix it&#8230; in 8u40.  That&#8217;s just how it goes with large projects like the JDK.</p>

<p>There are new features that will require updates of the existing plugins.  The Maven and Gradle plugins will be released after 8u20 comes out and will be released in their normal channels.  Ant will still be integrated in the same jar it comes with in the JDK.</p>

<h1>Version Number - 8.1.0</h1>

<p>For the version numbering I have decided to somewhat synchronize it with the JDK releases.  This next release wil be 8.1.0, and the release for 8u40 will be 8.2.0, and so on.  The first digit will be the main JDK number, the second increments for each major maintenance release, and the last number will increment with each release I have to do.  This will be the case with the Gradle plugin as well as the Maven plugin.</p>

<h1>Maven Plugin</h1>

<p>I&#8217;ve taken over maintenance of the Maven Plugin from Daniel Zwolenski.  The key word being maintenance.  I don&#8217;t intend on adding any new features that the core Java Packager doesn&#8217;t support directly.  But I do intend for it to integrate with everything the Java Packager does provice (just not all at once).  The main feature add will be integrating the new APIs provided in 8u20 and exposing the bundler arguments for configuration.</p>

<h1>Gradle Plugin</h1>

<p>Did you see they are getting a new plugin portal for Gradle 2.1?  Just as soon as I get some free time I&#8217;ll try configuring it.  But that&#8217;s my issue, my free time is so horribly fragmented at the moment.</p>

<h1>Betas are Out</h1>

<p>I&#8217;ve released the beta jars for the 8.1.0 version of the Maven and Gradle plugins.  Maven is on the <a href="https://oss.sonatype.org/content/repositories/snapshots/">Sonatype OSS Snapshot Repository</a> as 8.1.0-SNAPSHOT and Gradle is over at <a href="https://bintray.com/shemnon/javafx-gradle/gradle-javafx-plugin/8.1.0-beta/view">bintray</a> with a version of 8.1.0-beta.  Expect these to disappear soon after the final release is pushed.</p>

<h1>More Posts Later</h1>

<p>I will post more on some of the features at a later date.  The main highlights are</p>

<ul>
<li>You can create Mac App Store bundles</li>
<li>You can create Mac PKG Bundles</li>
<li>You can configure lots more stuff via Bundler Arguments</li>
<li>IDE integration will be easier</li>
</ul>


<p>I&#8217;ll also be talking about these at JavaOne in September, in one Technical Session and one Birds of a Feather.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting your Java 8 App in the Mac App Store]]></title>
    <link href="http://speling.shemnon.com//blog/2014/04/10/getting-your-java-app-in-the-mac-app-store/"/>
    <updated>2014-04-10T10:04:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2014/04/10/getting-your-java-app-in-the-mac-app-store</id>
    <content type="html"><![CDATA[<p>Good news everyone!</p>

<p><img src="http://img2.wikia.nocookie.net/__cb20090731021518/en.futurama/images/thumb/a/ad/GoodNewsEveryone.jpg/317px-GoodNewsEveryone.jpg" alt="Professor Farnsworth" /></p>

<p>You can now put your Java 8 applications onto the mac app store.  How do I know?  Because I put a little hackathon app I wrote <a href="https://itunes.apple.com/us/app/follow-the-bitcoin/id854219288?mt=12">on the Mac App Store</a>.  The better news is that Oracle is working on making this very simple with the JavaFX packager.  You can get some of the early bits in the open source repo for OpenJFX <a href="http://hg.openjdk.java.net/openjfx/8u-dev/rt/">here</a> (building and using open source code is left as an exercise for the reader).</p>

<p>If you don&#8217;t want to wait for the code to get an official release and you are comfortable doing stuff by hand then here are the steps you will need to follow.  <!-- more --></p>

<h3>Prepare your Environment</h3>

<p>First you will need to be signed up as part of the Mac Develoer program at [developer.apple.com].  For this tutorial I will presume your name is <code>Alice Duke</code>, that your Team ID is <code>JJJJJJJJJJ</code> and that the app you are shipping is titled <code>AwesomeJavaApp</code>.  You will of course need to change these to real values.</p>

<p>Download your signing keys if you haven&#8217;t done so already (<a href="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingCertificates/MaintainingCertificates.html#//apple_ref/doc/uid/TP40012582-CH31-SW6">here&#8217;s how</a>).  You will need both the Mac App Distribution and Mac Installer Distribution, and they should automatically be placed in your keychain under the names <code>3rd Party Mac Developer Application: Alice Duke (JJJJJJJJJJ)</code> and <code>3rd Party Mac Developer Installer: Alice Duke (JJJJJJJJJJ)</code>.</p>

<p>You will also need an entitlements file.  Read all about them at the <a href="https://developer.apple.com/library/mac/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html#//apple_ref/doc/uid/TP40011195-CH4-SW1">Mac Developer Library</a>.  You will have to turn on the app-sandbox entitlement as well as any of the other entitlements you will be using.  Be sure to keep track of what entitlements you grand and why they are needed.  Apple will be asking you to justify every one of them.</p>

<h1>Prepare the Application</h1>

<p>Next, create your Mac <code>.app</code> bundle the normal way you are doing with the javafxpackager, Ant, Maven, or Gradle build.  Make sure this app works as it is what we will be bundling up.</p>

<p>Next, you will need to copy the info.plist from the existing JDK or JRE into the embedded JRE in your app.  It should be either at <code>/Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Info.plist</code> or <code>/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Info.plist</code>, but it is likely to be the first one.  Copy this file to <code>AwesomeJavaApp.app/Contents/PlugIns/jdk1.8.0.jdk/Contents/Info.plist</code>.</p>

<pre><code>cp /Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Info.plist AwesomeJavaApp.app/Contents/PlugIns/jdk1.8.0.jdk/Contents/Info.plist
</code></pre>

<p>Now we need to strip a library.  The Mac App Store doesn&#8217;t accept apps that even mention the deprecated Quicktime API, so we will need to remove the media capabilities tom JavaFX.  If your app uses the JavaFX media apis you are out of luck for the time being.  There is a <a href="https://javafx-jira.kenai.com/browse/RT-34893">bug</a> to fix this in a future release.</p>

<p>The good news is that the Java 8 license lets us fix the problem, at least when it comes to JavaFX.  Remove the file <code>libjfxmedia.dylib</code>.</p>

<pre><code>rm AwesomeJavaApp.app/Contents/PlugIns/jdk1.8.0.jdk/Contents/Home/jre/lib/libjfxmedia.dylib
</code></pre>

<h1>Sign the Application</h1>

<p>Signing the app (in may different places) is next. Apple loves their cryptographic hashes.</p>

<p>First, you may need to make the JDK in the app bundle writeable.  The <code>codesign</code> program won&#8217;t sign read-only binaries.  <code>chmod -R +w AwesomeJavaApp.app/Contents/PlugIns/jdk1.8.0.jdk</code> should do the trick.</p>

<p>You need to sign all jars, dylibs, and executable files in the bundle (with one exception).  Enumerating them is left as an exercise to the reader.  Any decent build tool can do it for you.  You will need to sign it with both the identity you have and the entitlements you want</p>

<pre><code>codesign -f -s "3rd Party Mac Developer Application: Alice Duke" --entitlements &lt;your_entitlements_file&gt; &lt;the_libary_jar_or_executable&gt;
</code></pre>

<p>There is <em>one</em> caveat.  Don&#8217;t sign the main excitable of the app bundle.  It is in <code>Contents/MacOS</code> and has the name of your application, for example it would be <code>AwesomeJavaApp.app/Contents/MacOS/AwesomeJavaApp</code>.  We will get that signed another way.</p>

<p>Another quirk is that you can give different entitlements to each file.  In the javafxpackger we sign with an entitlements file that contains only the <code>app-sandbox</code> and
<code>inherit</code> entitlements, so they inherit all the entitlements from the main application.</p>

<p>Next, you will want to sign the Java directory itself. Actually you need to sign all plugins and frameworks in your app, but the overwhelming majority of java apps will only have one plugin: Java.</p>

<pre><code>codesign -f --deep -s "3rd Party Mac Developer Application: Alice Duke" --entitlements &lt;your_entitlements_file&gt; AwesomeJavaApp.app/PlugIns/jdk1.8.0.jdk
</code></pre>

<p>Finally, we can sign the application itself.  Yes, we can actually shave the yak at this point.</p>

<pre><code>codesign -f --deep -s "3rd Party Mac Developer Application: Alice Duke" --entitlements &lt;your_entitlements_file&gt; AwesomeJavaApp.app
</code></pre>

<p>You may or may not need all of the flags I&#8217;ve show with <code>codesign</code>, as I have not exhaustively tested them in all the possibly combinations.  You may not need the <code>--deep</code> flag, but adding it will not get you out of signing all the interior jars and libraries.  You may not need the <code>-f</code> flag but it insures that your signature will be the only one.  Finally, you may want to add a <code>--verbose=4</code> flag to see all the gory details.  Or not.</p>

<h1>Packaging for Install</h1>

<p>I bet you thought you were done?  Now we need to create an installer package to send to the app store.  Use the <code>productbuld</code> too to generate the need file</p>

<pre><code>productbuild --component AwesomeJavaApp.app /Applications -s "3rd Party Mac Developer Installer: Alice Duke" AwesomeJavaApp.pkg
</code></pre>

<p>Note that you are signing this with the second key you downloaded: the one for installers.</p>

<p>If you feel the need you can test the install:</p>

<pre><code>sudo installer -store -pkg AwesomeJavaApp.pkg
</code></pre>

<p>Now you can load it into the Mac App store using the Application Loader tool.  You will first need to go to iTunes Connect and set things up.  But we have now left the Java specific part of the assembly so there are many other blog posts out there by more qualified and experienced Mac App Store developers.</p>

<h1>Last Words</h1>

<p>There are many other potholes that you could run into.  Two I hit were not having a 512x512@2x icon, and another was a dispute about copyright on an icon.  I changed the icon rather than wade through the appeals process to prove that the icon was in the public domain.</p>

<p>I plan on keeping this post up to date with any changes or corrections, so feel free to bookmark this page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[8 Cool Things About Java Streams]]></title>
    <link href="http://speling.shemnon.com//blog/2014/02/11/8-cool-things-about-java-streams/"/>
    <updated>2014-02-11T23:14:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2014/02/11/8-cool-things-about-java-streams</id>
    <content type="html"><![CDATA[<p>Lambda expressions are one of the coolest features of Java 8 so far.  But I think there is a (not so) secret weapon that shows just how powerful such &#8220;syntactic sugar&#8221; can be in increasing code readability and writeability.  When you increase the expressiveness of code it unlocks a higher level of understanding that can make the most obtuse of tasks simple.</p>

<p>That secret weapon? The Java Streams API.  Recently <a href="https://github.com/shemnon/hashpan">I entered</a> an <a href="https://www.clover.com/challenge">online contest</a> simply to use the Streams in a more performance oriented environment.  My surprise was that the API made development of the <a href="https://github.com/shemnon/hashpan/blob/master/src/main/java/com/shemnon/hashpan/SearchHashesForPANs.java#L52-L60">principal loop</a> very simple, and very malleable to the many changes I would make.  Here are 8 cool things I learned.</p>

<h3>1. Streams don&#8217;t require lambda expressions</h3>

<p>Even though this API really shines with Lambdas, you don&#8217;t have to use them. <!-- more --> You could always fall back to anonymous classes, but why would you?  More likely scenarios are using a method reference (such as <code>Integer::valueOf</code>), or an instance object.  Using a method reference allows you to put complex multiline logic out of the main stream loop, like when <a href="https://github.com/shemnon/hashpan/blob/master/src/main/java/com/shemnon/hashpan/SearchHashesForPANs.java#L59">you are optimizing a hash set lookup away</a>.  The instance object allows for implementation of the Gang of Four <a href="http://en.wikipedia.org/wiki/Strategy_pattern">Strategy Pattern</a>.  But please, don&#8217;t use anonymous classes unless you have to.</p>

<h3>2. Peek into the stream to debug it.</h3>

<p>At any point in your stream where you would add an intermediate operator, you can add one called <code>peek</code>.  This operation takes a consumer and expects no result, which is basically a lambda that returns void.  My favorite use of peek is to send debugging information to the system, such as</p>

<pre><code>.peek(System.out::println)
.peek(it -&gt; System.out.printf("it is %s%n", it)
</code></pre>

<h3>3. Random stuff can be streamed</h3>

<p>Streams are not limited to collections or arrays of stuff, or even fixed lists of stuff.  If you can create an <code>Iterator</code> or a <code>Supplier</code> lambda that creates the values of the stream then you can create a stream with the methods on the <code>java.util.stream.StreamSupport</code> class.  Imagine a stream driven by constant measurements such as memory consumption or network throughput&#8230;</p>

<h3>4. Random numbers can be streamed</h3>

<p>If you are looking for plain old randomness, such as from a <code>java.util.Random</code> there are three new sets of methods on that class to stream <code>ints()</code>, <code>longs()</code>, and <code>doubles()</code>.  Overloaded versions of those methods let you set the bounds, seed, and total amount of random numbers streamed.</p>

<h3>5. Streaming readers</h3>

<p>Another common task for java developers is parsing a file line by line.  Now we have a <code>lines()</code> method on <code>java.io.BufferedReader</code> that will turn that I/O stream in to a stream of strings, fit for stream processing.</p>

<h3>6. Streaming file trees</h3>

<p>If walking through the content of the files isn&#8217;t your thing, how about walking a file tree?  <code>java.nio.file.Files</code> has several methods that return Streams.  <code>list()</code> will list the files in one directory, <code>walk(...)</code> will do it recursively, and <code>filter(...)</code> will do it recursively with some attribute driven filtering (something that is convoluted when you just have a Path object).  You can still get at the contents via streams with the <code>lines(Path)</code> method.</p>

<h3>7. Streaming complex text</h3>

<p>If you are still fixated on text processing, but the content isn&#8217;t line based, you can use the <code>splitAsStream(CharSequence)</code> method on your <code>java.util.regex.Pattern</code> instance.  Useful for those million column CSV files, or your classpath.</p>

<h3>8. Streaming zip files</h3>

<p>Speaking of long classpath searches, you can also stream your <code>java.util.zip.ZipFile</code>s and <code>java.util.jar.JarFile</code>s with the conveniently named <code>stream()</code> method, returning a <code>ZipEntry</code> or <code>JarEntry</code> respectively.  Nothing like using Java 8 streams to mine your classpath for JavaBeans.</p>

<p>If you&#8217;ve made it this far you surely realize that these aren&#8217;t the basic things you would do with streams.  I figure there will be more than enough blog posts walking through the basics of streams.  But I consider these to be some of the hidden gems that show the potential of streams.  But mining your classpath for jar declared JavaBeans, using lambdas and streams?  There&#8217;s an old/new juxtaposition worthy of a lunch hour hack!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tech Predictions for the Year of the Horse]]></title>
    <link href="http://speling.shemnon.com//blog/2014/01/29/tech-predictions-for-the-year-of-the-horse/"/>
    <updated>2014-01-29T21:10:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2014/01/29/tech-predictions-for-the-year-of-the-horse</id>
    <content type="html"><![CDATA[<p>This year I’ve decided to do tech predictions on the Chinese New Year instead of the Solar New Year.  Now the cynical reader may presume that I am merely finishing a blog post I started before Christmas before I started playing with Lego Mindstorms EV3 robots, but I actually worked the week between Christmas and New Years.  To be precise it is the year of the Wood Horse.  Not to be confused with the Trojan horse.</p>

<!-- more -->


<h2>The Worm Starts to Turn for Google</h2>

<p>Google and Apple are occupying positions in the tech sphere that were occupied twenty to twenty-five years ago by Microsoft and, well, Apple.  Apple is and still will be Apple and Google is the new Microsoft.  Clearly they are on top of their domain, looking to grow, and they are rustling some feathers in the process.</p>

<p>The phrase Google is often associated with is “Do No Evil.”  But that is a mis-quote.  The phrase is actually <a href="http://www.google.com/about/company/philosophy/">“You can make money without doing evil.”</a> Combining that with one of their other philosophies that “It’s best to do one thing really, really well” we will see even more spring cleaning.  Beloved properties will continue to close because the good idea fairy can’t do everything it wants to.  And some of those money based decisions will rub users the wrong way.</p>

<p>I don’t know if they are set up to be the next Yahoo, but I predict this year you will start to see reactions to stuff Google does and announces change from what would have been awe and wonder to a “meets expectation” apathy and in some cases outright antagonism.  There is only one place to go from the top of a mountain, and that is to the top of another mountain.  But first you have to go down to the saddle between the peaks.  We will see evidence that is where they are headed.</p>

<h2>Crypto Currency will Stop Hearts</h2>

<p>No doubt crypto currencies like BitCoin are the darling of the hype cycle right now.  As it comes out of the shadows of six million dollar pizzas and illicit trade it will move into different shadows of regulation and speculation.  And where there is money there is crime.  Technically crypto coin isn’t money, so technically it isn’t crime, but technically there will still be moral outrage at something someone does.  With billions in “market cap” if there was some technical way to control the flow of coin and the generation of coin then controls the universe.  Wait, that was the world of Dune and it was the Spice that must flow.</p>

<p>But that’s just it.  To the world of crypto coin the protocol, algorithm, and the network are the three legs of the stool upon which the whole seat of power rests.  Take out one leg and the whole stool cannot stand without active and continual effort.</p>

<p>I predict that someone this year will mount a major attack against one of the three legs of the stool against either BitCoin or one of the major alt-currencies ($5 million fiat dollars in available market cap or more makes an alt-currency major in my book).  The attack will be clever and innovative, and won’t target the hard targets like the SHA hashing or public key transactions.  There will be a collective freak out and then a solid solution will be found because too many people have too much power invested in crypto coin that is too big for it to fail for them.  And the ironic part?  The attack will fail, but will demonstrate an attack that could work in 5 years time.  Keep your eyes ahead of you before the future runs right into you.</p>

<h2>Java 8 Reduces the Java Hate</h2>

<p>The start of this decade saw a good deal of what could best be described as “Java Hate.”  Between the Sun set and Oracle buying up Sun a lot of people presumed the worst.  But Oracle has realized that the value of Java isn’t direct revenue but the indirect halo effect.  Oracle’s Fusion products live and breath on Java and their strength is that Java is more than a proprietary language, but is seeded by ideas from the greater community.</p>

<p>Java 8 is a perfect example of that.  If it wasn’t for community involvement and “near community” effort from the likes of Groovy, Scala, and JRuby then the core Java team would have never been able to sell stuff like Lambdas, Default Methods, and the Streams API to the bean counters who fund the development of new features.  And they are pushing these for the benefit of the community as a whole, not just for Oracle’s benefit.  Although Oracle does benefit from a strengthened community and public innovation.  If it was simply Oracle doing this for their own benefit we would have seen stuff like XML literals and embedded SQL, and pay per call method metering.  A faster horse drawn carriage instead of a horseless carriage.</p>

<p>My prediction for the Year of the Horse is that the release of Java 8 will result in a measurable uptick in the interest of Java the language (as well as Java the platform).  Some of this will be at the expense of other JVM and non JVM language interest, and some of it will be genuine growth.  But this will be almost entirely because of the interest in the new features like Lambdas, Method References, Default Methods, and the Streams API.</p>

<h2>Quick Hits</h2>

<p>I’ll finish off with some quick hits.</p>

<ul>
<li><p>NSA gets nerfed.  But that will actually make them better at their mission.  Their real value lies in their analytical abilities, not the force of government power to get the data and manipulate standards. Reigning them back inside their constitutional limits will make them focus on what they should be doing: analysis.</p></li>
<li><p>Marissa Mayer will almost be able to turn Yahoo around, but not quite enough.  The problems with Yahoo are not as much leadership, which Marissa is capable of solving, but heritage and what it means to be Yahoo.  What they need is an IBM like metamorphosis into something else, but that would likely kill Yahoo in the process.  Marissa provides the best controlled descent into terrain Yahoo could hope for, unless she doubles down (but the dealer is showing a 2).</p></li>
<li><p>Some second tier cable company will begin offering al-a-carte cable.  ESPN will cancel their contract rather than be forced to show what it would really cost each home to get their service.</p></li>
<li><p>China will launch an official crypto currency.  In an attempt to reign in the use of BitCoin and DogeCoin use outside of the special economic zones China will launch it’s own crypto currency for it’s own citizens, backed by algorithms that it owns the keys to.  But this will open Pandora’s box and backfire.</p></li>
<li><p>Speaking of Pandora’s box, some major online subscription service like Pandora will start accepting subscription fees in BitCoin.  Attach a sound card to your mining rig and you really will have free music!</p></li>
</ul>


<p>So when the year of the Goat comes around, you will see why I write software instead of prognosticating the future.  I estimate half of these will not come true, I’m just not sure which half it is.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Gradle Plugin 0.4.0 Released]]></title>
    <link href="http://speling.shemnon.com//blog/2013/10/29/javafx-gradle-plugin-0-dot-4-0-released/"/>
    <updated>2013-10-29T18:36:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2013/10/29/javafx-gradle-plugin-0-dot-4-0-released</id>
    <content type="html"><![CDATA[<p>Yesterday I pushed the fifth rerelease of my JavaFX Plugin for Gradle to BinTray, version <a href="https://bintray.com/version/show/general/shemnon/javafx-gradle/gradle-javafx-plugin/0.4.0">0.4.0</a>. (Who came up wit the idea of zero indexed arrays anyway?) New in this release is the ability to specify a particular source set from which to package your runtime classes from. There were also a large number of bug fixes.</p>

<p>To use the plugin in your gradle script copy the following script into your root build directory:</p>

<pre><code>http://dl.bintray.com/content/shemnon/javafx-gradle/0.4.0/javafx.plugin
</code></pre>

<p>and then load it in your <code>build.gradle</code> file like so:</p>

<pre><code>apply from: ‘javafx.plugin’
</code></pre>

<p>This is a change from previous releases where I recommended you apply the script directly from the internet.  But that doesn’t works so well on an airplane or other similarly air-gapped networks, particularly in places with poor wifi reception.</p>

<!-- more -->


<h1>Specifying the Packaged Source Set</h1>

<p>Sometimes your gradle project may have a large number of source sets you compile your java code from (where large is larger than 2).  Often that means that the source set with the main class isn’t <code>main</code>.  In previous versions of the plugin I assumed that <code>main</code> was the source set to use for packaging, now you can specify a different source set in the <code>javafx</code> block:</p>

<pre><code>sourceSets {
  main 
  samples {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      runtimeClasspath += javadocJar.output
    }
  }
}

javafx {
    sourceSet = ‘samples’
} 
</code></pre>

<p>But to be honest, I strongly recommend that your samples be placed in a separate sub project following the maven conventional tree structure.  However since I am a strong advocate of choice in build tooling, you are now free to choose a different path than the opinion expressed by the build tool.  But these opinions exist for your own good, trust us. ;) P</p>

<h1>Bug fixes</h1>

<p>Nearly all of the other changes revolve around bug fixes, mostly from ones I learned about in the <a href="https://bitbucket.org/shemnon/javafx-gradle/issues">bug queue</a>. Keep them coming!  One dealt with playing nicely with the gradle <code>application</code> plugin, one with specifying manifest entries, and there were some unreported ones I fixed in relation to jar files in the 7u40 java updates</p>

<h1>Summary</h1>

<p>If the plugin isn’t addressing your needs be sure to drop me a line on twitter at <a href="https://twitter.com/shemnon">@shemnon</a> or via <a href="https://plus.google.com/107563042277462358434">Google+</a>.  Oh yea, there is still that e-mail thing too: danno dot ferrin at gmail or shemnon dot com.  If my responses aren’t quick that is likely because I am playing LEGO Marvel Super Heroes on my legacy XBox 360 (which I won filling out conference surveys at JavaOne 5 years ago).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaOne 2013: Dogfooding the Future Java]]></title>
    <link href="http://speling.shemnon.com//blog/2013/10/01/javaone-2013-dogfooding-the-future-java/"/>
    <updated>2013-10-01T19:10:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2013/10/01/javaone-2013-dogfooding-the-future-java</id>
    <content type="html"><![CDATA[<p>Last week I presented two talks at JavaOne 2013.  The first talk I gave on Monday was &#8220;Styling Your Custom Components with CSS in JavaFX.&#8221;  My second talk on Tuesday was &#8220;Building and Deploying JavaFX Applications with Gradle or Maven (or Ant!).&#8221; Since these two sessions were very technical in nature I created demo applications for both and the source for these are on Bitbucket.  One repo for the <a href="https://bitbucket.org/shemnon/jfxcustomcss">custom CSS presentation</a> and another one for the <a href="https://bitbucket.org/shemnon/jfxdeployment">deployment build tools</a> talk. Since each talk dealt with different perspectives in the same talk I created a separate git branch for one, so keep your eye out for the branches.</p>

<h3>Dogfood</h3>

<p>Not only were my samples written for JavaFX, but the presentation itself was written with JavaFX and used JavaFX technologies for every pixel the presentation put on the screen. <!--more--> The whole dogfood slide deck thing isn&#8217;t new (it&#8217;s been <a href="http://artifacts.griffon-framework.org/plugin/slideware/installation">done before</a> and will not doubt be done again) but it is an important milestone for a graphics stack that it is capable of running an essential task for a conference presentation.</p>

<p>I made this decision 5 days before I was supposed to present, mostly because I really like the style that GitHub has for the markdown highlighting of code based text. I couldn&#8217;t find an acceptable Keynote template that replicated that, so I realized that I had already written code for the two most basic parts: a markdown renderer and a deck control. Combine those with Java 8 Lambda syntax and the end result clocks in at only <a href="https://bitbucket.org/shemnon/jfxdeployment/src/1e2f5865df62ef5b3d35a5a171a3f1d7ee77429b/src/main/java/org/bitbucket/shemnon/preso/deploy/Preso.java?at=preso">313 lines of code</a> (the whole build is in the <code>preso</code> branch of each repo). Not that we are playing golf or anything, but I estimate the lambda free code would clock in somewhere between 350-400 lines of code for a lines of code code savings of 10-20%. I know, I know, Groovy could do it in fewer lines and if I used tabs instead of spaces I could save even more space on my hard drive. But those are left as an exercise to the reader.</p>

<h3>New and Exciting JavaFX 8 Features</h3>

<p>The whole stack also includes the features I talked about as well as new JavaFX 8 features (some are both). The <a href="https://bitbucket.org/shemnon/deckcontrol">deck control</a> uses the newly exposed CSS styling APIs. The <a href="https://bitbucket.org/shemnon/flowdown">Markdown node</a> uses the new TextFlow API (which interestingly enough had no conference coverage I could see). I packaged the apps up into runtime-free applications, so you will need to install a current build of Java 8. The CSS Presentation is available as a Windows <a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2935%20-%20CSS%20for%20Custom%20JavaFX%20Controls-0.0.0.exe">EXE</a> <a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2935%20-%20CSS%20for%20Custom%20JavaFX%20Controls-0.0.0.msi">MSI</a> and <a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2935%20-%20CSS%20for%20Custom%20JavaFX%20Controls.zip">zip</a> and as a MacOSX <a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2935%20-%20CSS%20for%20Custom%20JavaFX%20Controls.dmg">DMG</a>. The deployment presentation is also available as a Windows <a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2106%20-%20Building%20and%20Deploying%20JavaFX%20Applications%20with%20Gradle%20or%20Maven%20or%20Ant-0.0.0.exe">EXE</a>, <a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2106%20-%20Building%20and%20Deploying%20JavaFX%20Applications%20with%20Gradle%20or%20Maven%20or%20Ant-0.0.0.msi">MSI</a>, <a href="CON2106%20-%20Building%20and%20Deploying%20JavaFX%20Applications%20with%20Gradle%20or%20Maven%20or%20Ant.zip">zip</a>, and Mac <a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2106%20-%20Building%20and%20Deploying%20JavaFX%20Applications%20with%20Gradle%20or%20Maven%20%40or%20Ant!%41.dmg">DMG</a>.  Don&#8217;t forget to install a <a href="https://jdk8.java.net/download.html">Java 8 Early access build</a> first.</p>

<p>One last surprise came when I attempted to upload my slides to the speaker portal. Apparently it only accepts PDF files and not markdown files. So this presented another opportunity to use yet another new feature in JavaFX 8: printing. Over the course of an afternoon I wired up a print button and printed my slides out to PDF. So now I have a PDF version of my slides generated from JavaFX (<a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2935_ferrin.pdf">CSS</a> and <a href="http://dl.bintray.com/shemnon/Presentations/JavaOne2013/CON2106_Ferrin.pdf">deployment</a>). Talk about dogfood.</p>

<h3>Buzz is the Word</h3>

<p>So, in summary, the source files for my JavaOne persecutions are on <a href="https://bitbucket.org/">BitBucket</a>, the binaries are on <a href="https://bintray.com/">Bintray</a> (congrats on the Duke&#8217;s Choice award). And there are lots of neat new Java 8 features used: Lambdas, JavaFX Printing, TextFlow, CSSMetaData, javafxpackager, and a MarkDown renderer. And of course it is all built with my Gradle plugin.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oracle JavaOne 2013]]></title>
    <link href="http://speling.shemnon.com//blog/2013/09/24/oracle-javaone-2013/"/>
    <updated>2013-09-24T11:12:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2013/09/24/oracle-javaone-2013</id>
    <content type="html"><![CDATA[<p>It&#8217;s day two of JavaOne 2013 and I am already done giving both of my talks.  This is a new one for me because whenever I speak at conferences usually I have at least one talk on the last day, and after lunch too.  So I am usually stressed out the whole time making sure my talk is ready.</p>

<p>There is no shortage of things to do for me to do for the next two days.  Tons of technical sessions for me to attend, and it&#8217;s all over the place.  For work I still need to get into one of the Nashorn sessions.  There are also a lot of cool JavaFX sessions that you will likely see me at.  The ever popular Script Bowl has a new companion the &#8220;Emerging Language&#8221; bowl for the up and coming languages (but not befunge or piet unfortunately).</p>

<p>There is also the expo hall.  While smaller than before the oracle purchase what is missing is the non-developer focused booths.  So if you are a developer the full value of the expo in a smaller space.  The swag grabs have also chilled out some since the actual content of the booth is often the draw.  You can still get some good swag, although the better swag requires steps like deploying an application to Cloud Foundry or dropping a link to the <a href="http://oracle.com/technetwork/java">Oracle Technology Network</a> in your blog post.  Even though I just did a name drop to get a t-shirt, I actually do like these approaches because it increases the engagement with the attendees. As opposed to the scan and run approach followed months later by the sheepish admission to the salesman when they call up that they only got your name because you wanted some flashing bouncy balls for your kids.  Purely hypothetical example.  That is not the voice of experience. ;)</p>

<p>Well, I can&#8217;t spend my whole time on my computer, I&#8217;m trying to pay attention to a session about Compact Profiles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Insubstantial Needs a New Maintainer]]></title>
    <link href="http://speling.shemnon.com//blog/2013/06/08/insubstantial-needs-a-new-maintainer/"/>
    <updated>2013-06-08T11:31:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2013/06/08/insubstantial-needs-a-new-maintainer</id>
    <content type="html"><![CDATA[<p>When I first started the maintenance branch of Kirill Grouchnikov&#8217;s Substance and Flamingo Libraries over two and a half years ago I had one important overriding reason to do so: we were using his libraries at my day job. That is one of the greatest things about an open source project, when the original author moves on to newer and shinier things the community can step in and take over the project.</p>

<p>That time has come again. Since I am no longer working on the project that is using those libraries I no longer have the daytime hours to spend on bug fixes and creating releases. I also would rather spend evenings and weekends playing laser tag, swimming with the family, or working on JavaFX. I haven&#8217;t really touched it in any significant way in over six months. Nor do I see myself processing another Insubstantial release.</p>

<p>Do you want to be the maintainer? <!-- more --> I&#8217;m not just going to hand the keys to the maintenance branch over to whoever says &#8216;me first.&#8217; I&#8217;m going to hand them over to the first competent contributor who says &#8216;me first.&#8217; How will I judge competence? First, they must either submit a good patch or have submitted a good patch. Second, I want to see a distribution rolled up somewhere. Some FTP site, whatever. And I want to see it in a format Sonatype will accept, with signatures and the whole nine yards. If it seems daunting, it isn&#8217;t. <a href="https://github.com/Insubstantial/insubstantial/blob/master/README.markdown">I left instructions.</a></p>

<p>What will I give you? I will make you the administrator of the <a href="https://github.com/Insubstantial/">insubstantial group</a> over at GitHub. I will tell Sonatype to add you as a user to the <a href="https://oss.sonatype.org/index.html">deployment repository</a>. I will also try and hand over the CloudBees build instance I have set up for insubstantial. No promises on that one since I see no instructions, but I will do my best.</p>

<p>Now I am not delusional, I don&#8217;t expect a race to grab the project. In fact, no one may ever ask for the keys. But if someone some day feels the need to take up the mantle of insubstantial maintainer, the keys are here for the taking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Gradle Plugin 0.3.0 Released]]></title>
    <link href="http://speling.shemnon.com//blog/2013/05/18/javafx-gradle-plugin-0-dot-3-0-released/"/>
    <updated>2013-05-18T10:42:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2013/05/18/javafx-gradle-plugin-0-dot-3-0-released</id>
    <content type="html"><![CDATA[<p>Today I pushed the fourth rerelease of my JavaFX Plugin for Gradle to bintray, <a href="https://bintray.com/version/show/general/shemnon/javafx-gradle/gradle-javafx-plugin/0.3.0">version 0.3.0</a> (real software engineers count from zero).  New in this release is the ability to specify a particular JVM to package with your native bundles and the ability to customize platform-specific build options. Some configuration options and conventions also moved around to support these two features, most notably the plugin no longer automatically self-signs the code.</p>

<p>To use the plugin in your gradle script, you can apply the plugin from the following URL:</p>

<pre><code>apply from: "http://dl.bintray.com/content/shemnon/javafx-gradle/0.3.0/javafx.plugin"
</code></pre>

<p>Or, you can include the content of that file anywhere in your build, either directly in build.gradle or included from your file path.</p>

<!-- more -->


<h1>Specifying the Java Runtime</h1>

<p>In the more recent Java 8 builds they introduced the ability to specify which Java runtime to use in the Ant tasks via the <code>j2se</code> attribute on the <code>platform</code> tag.  Mysteriously enough, it is not available for the command line <code>javafxpacjager</code> tool.  To use it in the gradle plugin simply specify the <code>javaRuntime</code> value in the <code>javafx</code> block and point it at the file location of the JDK/JRE you want to ship, like so</p>

<pre><code>javafx {
    javaRuntime = '/Library/Java/JavaVirtualMachines/jdk1.7.0_21.jdk/'
}
</code></pre>

<p>Why would you want to specify a runtime other than the one you are compiling against?  Here are a few ideas: You build on Java 8 but ship on Java 7, you need to load some special native libraries or classes such as export restricted cryptography, or you are stripping out things you are not required to redistribute, such as rmid or cobra stuff, or you are adding something like tools.jar.  The biggest reason has yet to see wider distribution: you are shipping a Java 8 Compact Profile as the JRE.</p>

<p>The most interesting value, however, is the <code>NO_RUNTIME</code> value (expressed as a string as <code>'&lt;NO RUNTIME&gt;'</code>, but the constant is better in case the value changes).  Your native packages will be built without a JVM and will instead use the JVM loaded on the local machine.  This is very useful for shipping Java 8 examples before it&#8217;s release in 2014.</p>

<h1>Configuration Profiles</h1>

<p>Some of you can probably guess why I am talking about profiles next.  By specifying a JRE location in the build file what have I done? I have effectively locked the build down to only work on Mac.  New in the 0.3.0 release is a <code>profiles</code> block underneath the <code>javafx</code> block.  In this block, you can create custom build profiles and change which ones are used at build time.  When looking up convention files the values stored in the profiles are always used before the other values, and they are used in the order the profiles are activated.  As a convention, the plugin always adds what platform you are building as the last profile activated.  Here is an example from the <a href="https://bitbucket.org/shemnon/javafx-gradle/src/9668620a1151bb0738c61b04c448b5bda15685c0/samples/FullyExpressed/build.gradle?at=master#cl-32">Fully Expressed</a> sample:</p>

<pre><code>javafx {

  profiles {
  // not every possible platform override, but ones that have a known impact
    windows {
        id = 'c533f663-1efd-489f-b910-4c7ec20c7fd0'
        category = 'JavaFX Demos'
        javaRuntime = 'C:/Program Files (x86)/Java/jdk1.7.0_21'
    }

    macosx {
        id = 'net.java.openjdk.openjfx.Ensemble2'
        category = 'public.app-category.developer-tools'
        javaRuntime = '/Library/Java/JavaVirtualMachines/jdk1.7.0_21.jdk/'
    }

    linux {
        // linux doesn't care about id, it goes un-used at the moment
        category = 'Development'
        // good luck finding a standard location for the JDK
        //javaRuntime = '/usr/lib/jvm/java-7-oracle'
    }
  }
  //---8&lt;-- snip --&gt;8---
}
</code></pre>

<p>I&#8217;ll plan on doing a post later for profiles in more detail, but for now it is sufficient to say that the <code>windows</code>, <code>macosx</code>, and <code>linux</code> profiles magically turn on based on where you do the build.  No, you cannot use profiles to build a RaspberryPi deb package on a linux box yet, I tried. The problems are deeper than JRE selection.</p>

<h1>Convention changes</h1>

<p>I also took the opportunity to change some of the conventions.  First and foremost I turned off the automatic generation and use of self signed certificates.  The 7u21 changes have made those certs next to useless.  You can still use the plugin to sign your application with a real certificate, you just have to explicitly do it.</p>

<p>If there is anyone within the sound of my voice that uses the plugin or would want to use the plugin to do real signing of their applications, <strong>let me know</strong> and I&#8217;ll write up some documentation.  Until then just know that it can be done.</p>

<p>The next set of conventions has to do with the <code>jfxDeploy</code> task.  Every single parameter has been moved into the <code>javafx</code> block and the preferred way to configure those is to use that block.  You can still configure them in the task, but the convention block is the preferred location.  The <code>FullyExpressed</code> example reflects those changes</p>

<p>Finally, I am dropping the magic auto-updating url.  All plugin URLs are version encoded.  Really, this is a good idea to avoid surprise breakages and has nothing to do with bintray not letting me delete releases over 30 days old.  Honest.</p>

<h1>Summary</h1>

<p>My aim is to make the JavaFX Gradle Plugin a one stop shop for all your JavaFX build needs. If you have any complaints, concerns, requests, code to contribute, or other comments, please let me know by posting an <a href="https://bitbucket.org/shemnon/javafx-gradle/issues">issue on bintray</a>, mail (danno.ferrin@shemnon.com), Twitter (@shemnon), pull request <a href="https://bitbucket.org/shemnon/javafx-gradle/">at bitbucket</a> or by leaving a comment in this blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Touch and Gesture JavaFX Demonstration]]></title>
    <link href="http://speling.shemnon.com//blog/2013/05/03/a-touch-and-gesture-javafx-demonstration/"/>
    <updated>2013-05-03T22:04:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2013/05/03/a-touch-and-gesture-javafx-demonstration</id>
    <content type="html"><![CDATA[<p>A few weeks ago my day job bought me a Surface Pro to help me prototype some future product work.  Being a developer, you could probably guess the kind of software I installed on it.  For the record I have yet to attempt to use stuff like the Finance and Travel App, and only opened the Maps app out of idle curiosity. The first thing I did was install JDK 8 and IntelliJ, so I could get down to business: figuring out how to best use  touch screens and gestures.</p>

<!-- more -->


<p>To help me, I wrote a small sample app I called <a href="https://bitbucket.org/shemnon/touchyfxy">Touchy FXy</a>.  I did this so I could get a realtime feel of how the gesture events work. Basically it gives you graphic and textual feedback as you perform gestures on the main center area (the one with the helpful instructions).</p>

<p><img src="http://speling.shemnon.com//images/touchyfxymac.png"></p>

<p>One of the main reasons I wrote this is to get a feel for some of the quirks on the various platforms that JavaFX runs on.  Already I have some issues in mind, but I want to get a good survey of the problem space before I propose anything.  The reasons why some tasks are problems on one platform may have to do with other platforms.</p>

<p>So please, give this app a whirl, and leave me your comments.  I am particularly interested in platforms I don&#8217;t have immediate access to, which basically includes a boring windows 7 laptop, a Surface Pro, and a MacBook air.  How does this work on Ubuntu touch screens (do they even work?)  How about RasPi touch screens?  Fancy Wacom digitizers?  Let me know in the comments below or mail me at <a href="mailto:danno.ferrin@shemnon.com">danno.ferrin@shemnon.com</a>, or leave a bug in the bitbucket project.</p>

<p>In case you are not interested in building this yourself, but do want to run it, I have the following packages on <a href="http://bintray.com/">BinTray</a>:</p>

<ul>
<li><a href="http://dl.bintray.com/content/shemnon/javafx/touchyfxy-0.0.jar?direct">Executable Jar</a></li>
<li><a href="http://dl.bintray.com/content/shemnon/javafx/touchyfxy-0.0.0.msi?direct">Windows .msi</a></li>
<li><a href="http://dl.bintray.com/content/shemnon/javafx/touchyfxy.dmg?direct">Mac .dmg</a></li>
<li><a href="http://dl.bintray.com/content/shemnon/javafx/touchyfxy-0.0.deb?direct">Linux .deb</a></li>
<li><a href="http://dl.bintray.com/content/shemnon/javafx/touchyfxy-0.0-1.i386.rpm?direct">Linux .rpm</a></li>
</ul>


<p>In case you are wondering, each executable package embeds Java 7u21.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle JavaFX Plugin 0.2.0 Released]]></title>
    <link href="http://speling.shemnon.com//blog/2013/01/30/gradle-javafx-plugin-0-dot-2-0-released/"/>
    <updated>2013-01-30T19:57:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2013/01/30/gradle-javafx-plugin-0-dot-2-0-released</id>
    <content type="html"><![CDATA[<p>The 0.2.0 release of the Gradle JavaFX Plugin is now live on <a href="http://l.aunch.us/fOjm">BinTray</a>. Get it while it&#8217;s hot! More things changed in this release than the lat time around. First there has been a lot of work automating the use of icons in the packaged resource. My <a href="http://speling.shemnon.com/blog/2013/01/28/adding-icons-with-the-gradle-javafx-plugin/">previous post</a> has all the details. Second, the interaction between the Maven and Eclipse plugin has been improved. Finally, the distribution has move to BinTray for the release artifacts.</p>

<!-- more -->


<p><strong>Changed Conventions</strong></p>

<p>There is one notable change that needs to be called out. Previously package specific resources went under <code>src/main/resources</code>. I have moved them to <code>src/deploy/resources</code> to clarify that they are used for deployment and not at runtime. This was needed for the gradle eclipse plugin to create sensible projects. The sample applications have been adjusted appropriately.</p>

<p><strong>Changed Deployment Info</strong></p>

<p>The plugin is no longer deployed to the webdav repository on CloudBees, but instead has migrated over to <a href="http://l.aunch.us/fOjm">BinTray</a>. The new recommend release scripts for the most recent version of the plugin, regardless of version:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apply from: 'http://dl.bintray.com/content/shemnon/javafx-gradle/javafx.plugin'</span></code></pre></td></tr></table></div></figure>


<p>For a version locked script you can use this script</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apply from: 'http://dl.bintray.com/content/shemnon/javafx-gradle/0.2.0/javafx.plugin'</span></code></pre></td></tr></table></div></figure>


<p>The repository location and co-ordinates also have changed. If you are using a direct build script dependency you will to use this co-ordinate</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>org.bitbucket.shemnon.javafxplugin:gradle-javafx-plugin:0.2.0</span></code></pre></td></tr></table></div></figure>


<p>You will likely want to look at the <a href="http://dl.bintray.com/content/shemnon/javafx-gradle/0.2.0/javafx.plugin">apply script</a> anyway since there are also some other build time dependencies. <em>I wish gradle just had a way to apply plugins from a maven co-ordinate, with dependencies.</em></p>

<p><strong> Examples </strong></p>

<p>If you would like to see some samples built with the plugin you can download them from <a href="http://repository-javafx-gradle-plugin.forge.cloudbees.com/release/0.2.0/">the CloudBees repository</a>. Only the single file installers are available. The <a href="https://bitbucket.org/shemnon/javafx-gradle/src/009e6d4d2487/samples?at=release_0.2.0">source</a> is available at the <a href="https://bitbucket.org/shemnon/javafx-gradle/">bitbucket project</a>.</p>

<p><strong> Future Plans </strong></p>

<p>For the next release I am planning on spending more time focusing on making the per-platform packaging top notch. I will add in hooks and allowances so that the end user can build any of the packaged platforms without conflict. One example is that the <code>appId</code> means different, incompatible, things on Windows and Mac. Windows wants a GUID whereas Mac wants a CFBundleIdentifier (which is close to a package name). Then there is the issue of gatekeeper and other smaller details.</p>

<p>In the mean time, if you find any bugs please be sure to <a href="https://bitbucket.org/shemnon/javafx-gradle/issues?status=new&amp;status=open">report them</a>. I can also be found on twitter as <a href="http://twitter.com/shemnon">@shemnon</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Icons with the Gradle JavaFX Plugin]]></title>
    <link href="http://speling.shemnon.com//blog/2013/01/28/adding-icons-with-the-gradle-javafx-plugin/"/>
    <updated>2013-01-28T14:57:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2013/01/28/adding-icons-with-the-gradle-javafx-plugin</id>
    <content type="html"><![CDATA[<p>The 0.2.0 release of the Gradle JavaFX Plugin is just around the corner. I want to spend some time building all the samples on all of the platforms and making sure smoke doesn&#8217;t come out. Expect it in a day or two.</p>

<p>The major feature for this release is better handling of packaged icons across the platforms. There is a file convention manner and a build script configuration method that will allow you to take a set of PNG images and let the build tool create the needed specialty file for each platform.</p>

<!-- more -->


<p>A quick word of warning before I dive into the details. You have to choose either the convention or the configuration, not both. If you do any configuration of your icons then none of the file conventions will be applied.</p>

<p><strong> Icons By Convention </strong></p>

<p>The easiest method is just to place specifically named icons in a specific place. The directory you should place the icons in is <code>src/deploy/package</code>. The icons also all need to be PNG images. The real magic is in how you name your icons. If they have the right pattern for their name then icon will be used and the sizes and other metadata are calculated by the plugin.</p>

<p>When naming icons for the conventional method the first part of the name describes the role of the icon. Right now the values are <code>shortcut</code>, <code>volume</code>, and <code>setup</code>. An icon of type <code>shortcut</code> will be the icon in the launcher, executable, taskbar, menu, or dock. An icon of type <code>volume</code> will be used for the MacOSX DMG folder icon. And an icon of type <code>setup</code> will appear in the corner of a Windows EXE setup wizard.</p>

<p>The second part of the name is any random set of characters. You would do this to distinguish the various sizes of the icons. However multiple icons are only recommend for the <code>shortcut</code> and <code>volume</code> icon sets, since the <code>setup</code> icon is converted into a BMP by the plugin. For MacOSX you also need to pay attention to the icon sizes, since only certain sizes are used by the MacOSX ICNS file. Those size are 16, 32, 128, 256, and 512 square. Note that 64x64 is not in that list!</p>

<p>The final part of the name is only relevant to MacOSX installers. If the file has &#8216;@2x&#8217; in it&#8217;s name anywhere, it is presumed to be a HDPI icon for that size. This means that the pixel dimensions are twice as large for that icon then the size it is considered to be. Right now the string can occur anywhere, but future versions of the plugin may require it to be at the end of the name.</p>

<p>For example, a 16x16 icon named <code>shortcut.png</code> would be used as the shortcut icon. If there was another 512x512 icon named <code>shortcut-awesome.png</code> that icon would be used as well. And if a 1024x1024 icon was also in the correct directory and it was named <code>shortcutReallyAwesome@2x.png</code> then it would be a shortcut icon, at HDPI scale 2, used for the 512x512 icon. For a functional example of this see the <a href="https://bitbucket.org/shemnon/javafx-gradle/src/1bd371c2d4656d383636f84a37a5841e6894af23/samples/brickbreaker/src/deploy/package?at=master">brickbreaker</a> sample in the source code.</p>

<p><strong>Icons by Configuration</strong></p>

<p>If you want to have the build script configure the icons you can do that as well. This will allow the re-use of icons across different usage kinds. There are two methods of configuration both of which are supported when using the configuration option.</p>

<p>The shorthand method involved adding an <code>icons</code> configuration setting inside the <code>javafx</code> configuration setting. Inside this configuration you set a value for each kind of icon you are using to either a string or list of strings. These strings will be resolved as files against the <code>src/deploy/package</code> directory. For example, from the <a href="https://bitbucket.org/shemnon/javafx-gradle/src/1bd371c2d465/samples/FullyExpressed/build.gradle?at=master#cl-92">FullyExpressed</a> sample (which is a junk project that turns every knob and flips every switch just to do it) the icons are configured like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>javafx {
</span><span class='line'>    /*. . . snip . . .*/
</span><span class='line'>    icons {
</span><span class='line'>        shortcut = ['shortcut-16.png', 'shortcut-32.png', 
</span><span class='line'>                    'shortcut-128.png', 'shortcut-256.png', 
</span><span class='line'>                    'shortcut-16@2x.png', 'shortcut-32@2x.png', 
</span><span class='line'>                    'shortcut-128@2x.png']
</span><span class='line'>        volume = 'javafx-icon.png'
</span><span class='line'>        setup = 'javafx-icon.png'
</span><span class='line'>    }
</span><span class='line'>    /*. . . snip . . .*/
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Like the conventional way the sizes of the icons are sniffed out and the HDPI icons all contain &#8216;@2x&#8217; at the end of their name. The icons also all must be PNG icons. Finally, remember that any text between the kind and the possible end of the name is not used by the plugin, unless it is the <code>@2x</code> at the end to tell the icon it is a HDPI icon.</p>

<p>If you need total control over the JNLP descriptor you can specify each one in an <code>icon</code> setting. You repeat the setting for each icon. You can then set each attribute individually. For example, form the same <a href="https://bitbucket.org/shemnon/javafx-gradle/src/bbe9d6ebe08d/samples/FullyExpressed/build.gradle?at=master#cl-99">FullyExpressed</a> sample the splash and selected icons are configured manually.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>javafx {
</span><span class='line'>    /*. . . snip . . .*/
</span><span class='line'>    icon {
</span><span class='line'>        href = 'src/main/resources/javafx-icon.png'
</span><span class='line'>        kind = 'splash'
</span><span class='line'>        width = 128
</span><span class='line'>        height = 128
</span><span class='line'>    }
</span><span class='line'>    icon {
</span><span class='line'>        href = 'shortcut-32@2x.png'
</span><span class='line'>        kind = 'selected'
</span><span class='line'>        width = 16
</span><span class='line'>        height = 16
</span><span class='line'>        scale = 1
</span><span class='line'>    }
</span><span class='line'>    /*. . . snip . . .*/
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><strong>Packager Defaults</strong></p>

<p>The defaults provided buy the JavaFX packaging library were not changed.  So if you see a grey embossed java coffee cup then the default for that icon has not been changed.</p>

<p>If you want to use the current code, you can add <code>apply from: 'https://repository-javafx-gradle-plugin.forge.cloudbees.com/snapshot/javafx.plugin</code> to the top of your gradle file.  Or you can wait a few days until I push the bits to BinTray.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Gradle Plugin 0.1.0 Released]]></title>
    <link href="http://speling.shemnon.com//blog/2013/01/08/javafx-gradle-plugin-0-dot-1-0-released/"/>
    <updated>2013-01-08T22:24:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2013/01/08/javafx-gradle-plugin-0-dot-1-0-released</id>
    <content type="html"><![CDATA[<p>I just spun and released the 0.1.0 version of my JavaFX Gradle plugin.  There is only one new feature: ScenicView integration.  The rest is behind the scenes work where I am moving away from the Ant tasks.  I also updated some of the web scripts to launch it.</p>

<!-- more -->


<p><strong>Scenic View</strong></p>

<p>As mentioned in a <a href="http://speling.shemnon.com/blog/2012/11/25/scenic-view-in-the-gradle-plugin/">previous post</a> the plugin now integrates the Scenic View libraries.  This is the easiest way I know of to launch it on a Mac, since the auto-connect still seems to be a bit wonky.</p>

<p><strong>Escaping the Legacy of Ant</strong></p>

<p>Ant was awesome.  Especially in the Twentieth Century when it was first written.  And for a good number of years after Y2K failed to end the world.  It gave us a Rosetta Stone by which all build systems could access an invoke a given task.  The problem is that it is usually just a proxy for more powerful features just under the surface.  Since Oracle has been living up to their commitment of releasing more of JavaFX as open source I can now <a href="http://hg.openjdk.java.net/openjfx/8/master/rt/file/e25ee61a987d/deploy/packager/">look and see</a> exactly how the JavaFX packager Ant tasks are working.</p>

<p>The first step is to replicate what was functioning through the 0.0.0 release directly without going through the Ant tasks.  The next task, for the 0.2.0 releases, is to expose more of the knobs and switches that the Ant tasks didn&#8217;t expose.  Just the ones that make sense however.  Then after that I will look at adding more value-adds on top of the packager, like automatic icon generation.  This also opens the realm of writing other bundling options, even outside the realm of JavaFX such as XMLVM and other shiny technologies.  But I digress.</p>

<p><strong>Versioned Launch Scripts</strong></p>

<p>To support using the classes directly in the build file I added a couple of dependencies into the plugin script.  Hence I have added versioning information into the URLs of the launch scripts so these dependencies don&#8217;t bleed into unneeded versions.  If you want the latest and greatest all the time continue to use the version free URL:</p>

<pre><code>apply from: 'https://repository-javafx-gradle-plugin.forge.cloudbees.com/release/javafx.plugin'
</code></pre>

<p>The danger here is that I may change something that breaks your builds.  To lock into a particular version of the plugin, you can add the version just after release or snapshot:</p>

<pre><code>apply from: 'https://repository-javafx-gradle-plugin.forge.cloudbees.com/release/0.1.0/javafx.plugin'
</code></pre>

<p>Note that if you are using a snapshot URL you need the <code>-SNAPSHOT</code> in the url as well</p>

<pre><code>apply from: 'https://repository-javafx-gradle-plugin.forge.cloudbees.com/snapshot/0.2.0-SNAPSHOT/javafx.plugin'
</code></pre>

<p>Of course you can always do a copy and paste of the content of these scripts.  This is useful for network disconnected builds.</p>

<p><strong>Roadmap</strong></p>

<p>I intend to call whatever is out and running when Java 8 ships the &#8220;1.0&#8221; version.  At that time I will no longer make it a point to have it work on Java 7 versions of JavaFX.  There is so much new and awesome stuff coming in version 8 that it will be hard to not use it.  Until then expect sporadic and unpredictable updates as my schedule allows.</p>

<p>As previously stated for the 0.2.0 release I intend to expose more of the packager interfaces that make sense.  I also intend to make the plugin more Gradle &#8220;idiomatic&#8221; with the help of <a href="http://twitter.com/MrHaKi">@MrHaki</a>&#8217;s <a href="http://www.packtpub.com/gradle-effective-implementation-guide/book">Gradle Effective Implementation Guide</a>.  Apparently I am doing the JavaFX convention wrong in the code and I should be using ExtensionContainer or something to that effect.  I&#8217;ll let you know more after I read up on it.</p>

<p>I also like feedback, that is why I turned on the <a href="https://bitbucket.org/shemnon/javafx-gradle/issues">bug tracker</a> that BitBucket provides.  While I cannot commit to fix every bug immediately I will look at all patches and pull requests with a bias towards committing them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mirroring OpenJFX on BitBucket, an Update]]></title>
    <link href="http://speling.shemnon.com//blog/2012/12/20/mirroring-openjfx-on-bitbucket-an-update/"/>
    <updated>2012-12-20T20:18:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2012/12/20/mirroring-openjfx-on-bitbucket-an-update</id>
    <content type="html"><![CDATA[<p>This is a quick update on my mirrors of OpenJFX on BitBucket.  I&#8217;ve moved some stuff around and automated it a bit.  I am also retiring my &#8220;combined&#8221; repo that would merge the master, graphics, and controls scrums together.  It got messy with multiple heads and bookmarks, and given the weekly merging the two scrums do wasn&#8217;t really adding any value.</p>

<!-- more -->


<p><strong>Updates on Names</strong></p>

<p>The first major change that I did was to move the mirrors off of my personal account onto a team account named <a href="https://bitbucket.org/openjfxmirrors">&#8216;OpenJFX Mirrors&#8217;</a>.  That landing page is kind of ugly, so I created a repo to hold a wiki whose only page right now <a href="https://bitbucket.org/openjfxmirrors/mirrors/wiki/Home">describes the current mirrors</a>.</p>

<p>One advantage of the name change is that it allows for more participation.  On the free bitbucket account up to 4 other people can be added in to manage things.  There is also the marketing advantage of saying the BitBucket &#8220;team&#8221; is dedicated to mirroring OpenJFX, and that it is more than one of my many repos on BitBucket (I have many private repos).</p>

<p>There is a standard mapping of the OpenJDK repos to the BitBucket repos.  Basically you change the prefix and then replaces slashes with dashes.  For example this URL:</p>

<pre><code>https://hg.openjdk.java.net/openjfx/8/controls/rt
</code></pre>

<p>is mirrored to this URL:</p>

<pre><code>https://bitbucket.org/openjfxmirrors/openjfx-8-controls-rt
</code></pre>

<p>It is important to note that not every OpenJFX Repo is mirrored.  Right now I only mirror the Version 8 branches.  Of the 2.x line I only consider 2.2.6 to be worthy of mirroring, and then since it is just bug fixes and not feature adds I consider it less interesting.</p>

<p><strong>Automation</strong></p>

<p>The second major change is that I have automated the update of the repos.  Before I had a shell script on my MacBook Air that would do the pulling and pushing of the repo data.  It was slick and easy, but it required me opening up my Macbook air once in a while.  At my old job it was a more than daily occurrence.  But since I am starting up new work at Fluke Networks I have more interesting things to do all day than keeping up to date on all of Reddit&#8217;s Advice Animals.</p>

<p>Writing this script is incredibly simple.  At the core of the loop are the two real commands that get work done:</p>

<pre><code>hg pull
hg push
</code></pre>

<p>That&#8217;s all.  And I am not just pushing the repo back onto itself.  Mercurial comes with the concept of a <em>default push</em> repository.  Pulls come from the default, and pushes by default go to the default push repo, or just the default repo if not set.  The <code>.hg/hgrc</code> file contains this mapping:</p>

<pre><code>[paths]
default = http://hg.openjdk.java.net/openjfx/8/controls/rt
default-push = ssh://hg@bitbucket.org/openjfxmirrors/openjfx-8-controls-rt
</code></pre>

<p>Of note is that I use the SSH mapping with a public key so the script is never asked for my user password and never knows about it to begin with.</p>

<p><strong>Props to CloudBees and Atlassian</strong></p>

<p>None of this would have been possible without the gracious donation of disk space and processing time from two names you should already know.  Atlassian and CloudBees.</p>

<p><a href="http://www.atlassian.com/">Atlassian</a> owns and operates the <a href="https://bitbucket.org/">BitBucket</a> service, which hosts the Mercurial repositories that I am using to mirror.  The point of this mirroring is that the UI at BitBucket is orders of magnitude better than the one you get at OpenJDK.  Visualizing the changes and examining the source files is actually possible with this interface.</p>

<p>The automation is hosted over at <a href="http://www.cloudbees.com/">CloudBees</a> on their eponymous cloud build platform. It is awesome of them to offer free build server time to open source projects.  I even have one of their technical running shirts I snagged at JavaOne this year.  (And I promise it will get more use as a running shirt next year).</p>

<p>Give these companies some of your business, they deserve it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TextFlow for Fun and Profit]]></title>
    <link href="http://speling.shemnon.com//blog/2012/12/10/textflow-for-fun-and-profit/"/>
    <updated>2012-12-10T21:10:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2012/12/10/textflow-for-fun-and-profit</id>
    <content type="html"><![CDATA[<p>One of the newer features for JavaFX is the new <a href="https://wikis.oracle.com/display/OpenJDK/Rich+Text+API+Samples">TextFlow</a> node.  Revealed at JavaOne San Francisco this is the generel solution to a rich text component in JavaFX.</p>

<p>This also happens to fit in nicely with my planned hobby project for the next few months.  The deck control was one part, and the ability to take MarkDown into a JavaFX node is another important part of the equation.  To prototype this I wrote a little toy app I call <a href="https://bitbucket.org/shemnon/flowdown">FlowDown</a></p>

<!-- more -->


<p><strong>FlowPane turns the corner</strong></p>

<p>TextFlow at it&#8217;s core is a lot like <a href="http://docs.oracle.com/javafx/2/api/index.html?javafx/scene/layout/FlowPane.html">FlowPane</a>.  The children are laid out in order from the leading edge to the training edge.  When it reaches the edge of the component it goes to the next row and continues to lay out it&#8217;s children.  What is different about TextFlow is that if the next child is a Text node it will fit as much of it as it can in the current row, and then take the remainder to the next row. And if needed it will flow the content across multiple rows to fit the constrained width.  So large long paragraphs of text now take only one node, whereas before you had to resort to tricks that essentially created one node per word.</p>

<p><img src="http://speling.shemnon.com//images/FlowDown.png" alt="FlowDown in action" /></p>

<p><strong>Caution: Beta Code Ahead</strong></p>

<p>To use this toy app you will need one of the more current builds of <a href="http://jdk8.java.net/download.html">JDK8</a> newer than build 66 (build 67 was the current one as of this post).  But this is an early access build which means you cannot distribute it and other things may be broken (like copy and paste on OSX).</p>

<p>The markdown previewer itself is also beta.  Problems include ordered lists not being numbered, and list layout in general being wonky.  Feel free to <a href="https://bitbucket.org/shemnon/flowdown/issues?status=new&amp;status=open">post issues</a>.  Since markdown to JFX nodes is something that may be generally useful I do see myself making a component out of.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scenic View in the Gradle JavaFX Plugin]]></title>
    <link href="http://speling.shemnon.com//blog/2012/11/25/scenic-view-in-the-gradle-plugin/"/>
    <updated>2012-11-25T13:42:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2012/11/25/scenic-view-in-the-gradle-plugin</id>
    <content type="html"><![CDATA[<p>While I really like the <a href="http://fxexperience.com/scenic-view/">Scenic View</a> application that Jasper, Richard, and Jonathan have put together I do have to say getting it working is a bit of a struggle.  But like most things I wind up blogging about this is something that can be fixed with a little bit of magical Gradle dust.</p>

<!-- more -->


<p><strong>Skinning the Cat</strong></p>

<p>Getting Scenic view to work shouldn&#8217;t be a struggle since there are three ways to start it up.  Well the fact there are three ways may be part of the problem actually.  The first is to rely on auto-discovery.  This is the same thing that JVisualVM relies on.  However this doesn&#8217;t work for me since I do my personal hacking on a MacBook Air, and the auto-discovery isn&#8217;t as reliable as it is on Windows machines.  I.e. you get the mac experience of it &#8216;just working&#8217; on windows but no mac.  To be fair, this is option number three on the list and they openly admit it&#8217;s not the best choice currently.</p>

<p>Another option is to bundle in the jar and explicitly start the scenic view.  The code is incredibly terse and has no real dependencies on your application code, except that the code needs to be run and the node to view.  The downside here is that you always need the code available to compile and you always need the line in your code.  You can hide the invocation with bear-claw clicks and keystrokes but the burden remains on you to either properly hide it or strip the code before you publish.</p>

<p>The last option, and the preferable one according to the docs, is to add the scenic view code as a java agent to your JVM.  This is very reliable method but it has a very specific incantation you need to add to your launch command.  And to add on to the troubles, there is no standard place this jar files live, it lives where you drop it.  And old man Murphy says that you cannot depend on others placing it in the same place, unless you do it for them.</p>

<p><strong>Integrations with Gradle</strong></p>

<p>The first problem is that this program is not released into Maven Central.  With gradle we can punt on running a maven repository and just upload it to an ivy repository.  In this case I am doubling up with the <a href="https://repository-javafx-gradle-plugin.forge.cloudbees.com/release/">Gradle JavaFX Plugin</a> repository.  Unlike the FXExperience Tools the code isn&#8217;t in a public repo so I cannot guess the license.  I&#8217;ll err on the side of sharing.</p>

<p>The next problem is getting the jar local.  I tried several approaches.  I don&#8217;t need the jar at build time for the plugin.  And adding it to the plugin dependencies creates some unneeded weirdness for application build scripts.  Finally what I settled on was to dynamically alter the gradle script via the DSL.  As <a href="https://bitbucket.org/shemnon/javafx-gradle/changeset/4dd2ff67e69410802306948ef097caf4#Lplugin/src/main/groovy/com/bitbucket/shemnon/javafxplugin/JavaFXPlugin.groovyT233">part of the task</a> I create a new configuration, add a new repository, and add a dependency to that configuration,  Then I find all the tasks that are considered execution tasks and I prepend the needed agent string with the local cached copy of the scenic view jar.  Did you catch and understand all of that?  Don&#8217;t worry, you don&#8217;t need to understand the magic to use it.</p>

<p>This task will be part of the next release of the plugin.  If you are using the snapshot script you already have it.</p>

<p><strong>Too Long; Didn&#8217;t Read</strong></p>

<p>To use scenic view with the gradle plugin just add the task <code>scenicview</code> before your execution task.  Really you have two options.  If you are not attaching a debugger:</p>

<pre><code>gradle scenicview run
</code></pre>

<p>if you are attaching a debugger:</p>

<pre><code>gradle scenicview debug
</code></pre>

<p>There will be no random jars added into your released code as long as you stick with the above incantations.  And it will magically work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Gradle Plugin 0.0.0 Released]]></title>
    <link href="http://speling.shemnon.com//blog/2012/11/07/javafx-gradle-plugin-0.0.0-released/"/>
    <updated>2012-11-07T20:21:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2012/11/07/javafx-gradle-plugin-0.0.0-released</id>
    <content type="html"><![CDATA[<p>I haven&#8217;t&#8217; done much to promote it yet, but I feel I have written enough to announce that I have written a JavaFX 2.0 Plugin for Gradle.  Better documentation will follow, but this is the announcement getting it out there,  After all this is just an oh dot oh dot oh.</p>

<p><strong>Real Computer Scientists Count from Zero</strong></p>

<p>Why the 0.0.0 release?  Well, real computer scientists count from zero.  The vending machines in the computer science building at my university started with zero on the left, then one and two and so on.  And when software is released the &#8216;oh dots&#8217; precede the &#8216;one dot oh&#8217;, clearly establishing that the digit on the right should be zero.  So why are first releases 0.1 or 0.0.1?  It&#8217;s not the second release, it&#8217;s the first release!  So start at the first index: Zero!  Why three numbers?  I blame OSGi.  And blame is the correct word, not credit.</p>

<!-- more -->


<p>All silliness aside, the plugin is actually useful.  It takes care of a lot of the JavaFX package stuff, you know, magically.  Magically in the sense that if you saw it happen you would know what is going on, but you don&#8217;t see it so you applaud and say &#8216;what a neat magic trick.&#8217;</p>

<p><strong>Getting Started</strong></p>

<p>I&#8217;m going to assume you already know a little about Gradle, and also that you know about the <code>src/main/java</code> and <code>src/main/resources</code> conventions from Maven.  Once you set your source files up in those directories set up your <code>build.gradle</code> file by installing the plugin.  There are two options for installing the plugin: you can apply it explicitly, or you can use a nifty script shortcut I learned from a <a href="https://github.com/johndevs/gradle-vaadin-plugin">Vaadin Gradle plugin</a> I found.</p>

<p>Short way:</p>

<div><script src='https://gist.github.com/4036870.js?file=build-from.gradle'></script>
<noscript><pre><code>apply from: 'https://repository-javafx-gradle-plugin.forge.cloudbees.com/release/javafx.plugin'
</code></pre></noscript></div>


<p>Long way:</p>

<div><script src='https://gist.github.com/4036870.js?file=build-plugin.gradle'></script>
<noscript><pre><code>buildscript {
    repositories {
        mavenLocal()
        ivy { 
            url = 'http://repository-javafx-gradle-plugin.forge.cloudbees.com/release'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'com.bitbucket.shemnon.javafxplugin:plugin:0.0.0'
    }
}

apply plugin: 'javafx'</code></pre></noscript></div>


<p>The short way just brings in a script from the repository that does everything the long way.  The advantage of the long way is you won&#8217;t get surprised when the JavaFX plugin gets updated to the latest version.  The advantage of the short way is that it is more terse (except that the url is kinda long).</p>

<p><strong>Configurations and Conventions</strong></p>

<p>Remember two weeks ago when I talked about <a href="http://speling.shemnon.com/blog/2012/10/23/conventions-and-configurations/">Conventions and Configurations</a>?  Well, if you named your main class <code>Main</code> and placed it in a directory matching the directory of your project, your configuration is done.  <a href="https://bitbucket.org/shemnon/javafx-gradle/src/9eef1086856bd5cd00fe4e58d4a7f8fb13b0fdff/samples/brickbreaker/build.gradle?at=release_0.0.0">No, Really!</a>.  The package is actually the <code>group</code> of your project, which can be set via a <code>group = 'com.example.whatever'</code> statement in your script.  You can also name the main class whatever you want via the <code>javafx</code> convention.</p>

<div><script src='https://gist.github.com/4036870.js?file=build-main.gradle'></script>
<noscript><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head prefix=&quot;og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# githubog: http://ogp.me/ns/fb/githubog#&quot;&gt;
    &lt;meta charset='utf-8'&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
        &lt;title&gt;404 · GitHub&lt;/title&gt;
    &lt;link rel=&quot;search&quot; type=&quot;application/opensearchdescription+xml&quot; href=&quot;/opensearch.xml&quot; title=&quot;GitHub&quot; /&gt;
    &lt;link rel=&quot;fluid-icon&quot; href=&quot;https://raw.github.com/fluidicon.png&quot; title=&quot;GitHub&quot; /&gt;
    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;57x57&quot; href=&quot;apple-touch-icon-114.png&quot; /&gt;
    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;apple-touch-icon-114.png&quot; /&gt;
    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;apple-touch-icon-144.png&quot; /&gt;
    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;apple-touch-icon-144.png&quot; /&gt;
    &lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;/windows-tile.png&quot;&gt;
    &lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#ffffff&quot;&gt;

    
    
    &lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;/favicon.ico&quot; /&gt;

    

    &lt;link href=&quot;https://a248.e.akamai.net/assets.github.com/assets/github-359c875812e7e2caefea930512457a0267ef3e87.css&quot; media=&quot;screen&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
    &lt;link href=&quot;https://a248.e.akamai.net/assets.github.com/assets/github2-69262a6bc53331da6e8dc792fc1ce3b074c54135.css&quot; media=&quot;screen&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
    


    &lt;script src=&quot;https://a248.e.akamai.net/assets.github.com/assets/frameworks-28923941200b998a3e7422badab5b9be240f9be4.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://a248.e.akamai.net/assets.github.com/assets/github-194b92b1c9e2a5b90553a492f2b85e8d903b350c.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
    

    
  &lt;/head&gt;


  &lt;body class=&quot;logged_out    env-production &quot;&gt;
    &lt;div id=&quot;wrapper&quot;&gt;

    
    

    

      &lt;div id=&quot;header&quot; class=&quot;true clearfix&quot;&gt;
        &lt;div class=&quot;container clearfix&quot;&gt;
          &lt;a class=&quot;site-logo &quot; href=&quot;https://raw.github.com/&quot;&gt;
            &lt;img alt=&quot;GitHub&quot; class=&quot;github-logo-4x&quot; height=&quot;30&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/header/logov7@4x.png?1337118066&quot; /&gt;
            &lt;img alt=&quot;GitHub&quot; class=&quot;github-logo-4x-hover&quot; height=&quot;30&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/header/logov7@4x-hover.png?1337118066&quot; /&gt;
          &lt;/a&gt;


                  &lt;!--
      make sure to use fully qualified URLs here since this nav
      is used on error pages on other domains
    --&gt;
    &lt;ul class=&quot;top-nav logged_out&quot;&gt;
        &lt;li class=&quot;pricing&quot;&gt;&lt;a href=&quot;https://github.com/plans&quot;&gt;Signup and Pricing&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&quot;explore&quot;&gt;&lt;a href=&quot;https://github.com/explore&quot;&gt;Explore GitHub&lt;/a&gt;&lt;/li&gt;
      &lt;li class=&quot;features&quot;&gt;&lt;a href=&quot;https://github.com/features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&quot;blog&quot;&gt;&lt;a href=&quot;https://github.com/blog&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt;
      &lt;li class=&quot;login&quot;&gt;&lt;a href=&quot;https://github.com/login?return_to=%2Fgist%2F4036870%2Fbuild-main.gradle&quot;&gt;Sign in&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;



          
        &lt;/div&gt;
      &lt;/div&gt;

      

      


        &lt;div class=&quot;site clearfix&quot;&gt;
          &lt;div id=&quot;site-container&quot; class=&quot;context-loader-container&quot; data-pjax-container&gt;
            
            

&lt;style type=&quot;text/css&quot;&gt;
    #header{
        border-bottom: 0;
    }
    .site {
        padding: 0;
    }
    #site-container {
        width: 100%;
    }
    * {
        margin: 0px;
        padding: 0px;
    }
    #parallax_wrapper {
      position: relative;
      z-index: 0;
      margin-bottom: 50px;
    }
    #parallax_field{
        overflow: hidden;
        position: absolute;
        left: 0;
        top: 0;
        height: 370px;
        width: 100%;
    }
    #parallax_field #parallax_bg {
        position: absolute;
        top: -20px;
        left: -20px;
        width: 110%;
        height: 425px;
        z-index: 1;
    }
    #parallax_illustration {
        display: block;
        margin: 0 auto;
        width: 940px;
        height: 370px;
        position: relative;
        overflow: hidden;
        clear: both;
    }
    #parallax_illustration #parallax_error_text {
        position: absolute;
        top: 72px;
        left: 72px;
        z-index: 10;
    }
    #parallax_illustration #parallax_octocat {
        position: absolute;
        top: 94px;
        left: 356px;
        z-index: 9;
    }
    #parallax_illustration #parallax_speeder {
        position: absolute;
        top: 150px;
        left: 432px;
        z-index: 8;
    }
    #parallax_illustration #parallax_octocatshadow {
        position: absolute;
        top: 297px;
        left: 371px;
        z-index: 7;
    }
    #parallax_illustration #parallax_speedershadow {
        position: absolute;
        top: 263px;
        left: 442px;
        z-index: 6;
    }
    #parallax_illustration #parallax_building_1 {
        position: absolute;
        top: 73px;
        left: 467px;
        z-index: 5;
    }
    #parallax_illustration #parallax_building_2 {
        position: absolute;
        top: 113px;
        left: 762px;
        z-index: 4;
    }
    #footer-push {
      height: 280px;
    }
    #footer {
        margin-top: 0px;
        z-index: 12;
    }
&lt;/style&gt;

&lt;div id=&quot;parallax_wrapper&quot;&gt;

&lt;div id=&quot;parallax_field&quot;&gt;
    &lt;img alt=&quot;building&quot; class=&quot;js-plaxify&quot; data-invert=&quot;true&quot; data-xrange=&quot;0&quot; data-yrange=&quot;20&quot; height=&quot;415&quot; id=&quot;parallax_bg&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_bg.jpg?1334862345&quot; width=&quot;940&quot; /&gt;
&lt;/div&gt;
&lt;div id=&quot;parallax_illustration&quot;&gt;
  &lt;img alt=&quot;404 | &amp;ldquo;This is not the web page you are looking for&amp;rdquo;&quot; class=&quot;js-plaxify&quot; data-xrange=&quot;20&quot; data-yrange=&quot;10&quot; height=&quot;249&quot; id=&quot;parallax_error_text&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_errortext.png?1334862345&quot; width=&quot;271&quot; /&gt;
  &lt;img alt=&quot;Octobi Wan Catnobi&quot; class=&quot;js-plaxify&quot; data-xrange=&quot;10&quot; data-yrange=&quot;10&quot; height=&quot;230&quot; id=&quot;parallax_octocat&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_octocat.png?1334862345&quot; width=&quot;188&quot; /&gt;
  &lt;img alt=&quot;land speeder&quot; class=&quot;js-plaxify&quot; data-xrange=&quot;10&quot; data-yrange=&quot;10&quot; height=&quot;156&quot; id=&quot;parallax_speeder&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_speeder.png?1334862345&quot; width=&quot;440&quot; /&gt;
  &lt;img alt=&quot;Octobi Wan Catnobi's shadow&quot; class=&quot;js-plaxify&quot; data-xrange=&quot;10&quot; data-yrange=&quot;10&quot; height=&quot;49&quot; id=&quot;parallax_octocatshadow&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_octocatshadow.png?1334862345&quot; width=&quot;166&quot; /&gt;
  &lt;img alt=&quot;land speeder's shadow&quot; class=&quot;js-plaxify&quot; data-xrange=&quot;10&quot; data-yrange=&quot;10&quot; height=&quot;75&quot; id=&quot;parallax_speedershadow&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_speedershadow.png?1334862345&quot; width=&quot;430&quot; /&gt;
  &lt;img alt=&quot;building&quot; class=&quot;js-plaxify&quot; data-invert=&quot;true&quot; data-xrange=&quot;50&quot; data-yrange=&quot;20&quot; height=&quot;123&quot; id=&quot;parallax_building_1&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_building_1.png?1334862345&quot; width=&quot;304&quot; /&gt;
  &lt;img alt=&quot;building&quot; class=&quot;js-plaxify&quot; data-invert=&quot;true&quot; data-xrange=&quot;75&quot; data-yrange=&quot;30&quot; height=&quot;50&quot; id=&quot;parallax_building_2&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_building_2.png?1334862345&quot; width=&quot;116&quot; /&gt;
&lt;/div&gt;

&lt;/div&gt;

          &lt;/div&gt;
          &lt;div class=&quot;context-overlay&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;div id=&quot;footer-push&quot;&gt;&lt;/div&gt;&lt;!-- hack for sticky footer --&gt;
    &lt;/div&gt;&lt;!-- end of wrapper - hack for sticky footer --&gt;

      &lt;!-- footer --&gt;
      &lt;div id=&quot;footer&quot; &gt;
        
  &lt;div class=&quot;upper_footer&quot;&gt;
     &lt;div class=&quot;container clearfix&quot;&gt;

       &lt;h4 id=&quot;blacktocat&quot;&gt;GitHub Links&lt;/h4&gt;

       &lt;ul class=&quot;footer_nav&quot;&gt;
         &lt;h4&gt;GitHub&lt;/h4&gt;
         &lt;li&gt;&lt;a href=&quot;https://github.com/about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;https://github.com/blog&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;https://github.com/features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;https://github.com/contact&quot;&gt;Contact &amp;amp; Support&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://training.github.com/&quot;&gt;Training&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://enterprise.github.com/&quot;&gt;GitHub Enterprise&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://status.github.com/&quot;&gt;Site Status&lt;/a&gt;&lt;/li&gt;
       &lt;/ul&gt;

       &lt;ul class=&quot;footer_nav&quot;&gt;
         &lt;h4&gt;Clients&lt;/h4&gt;
         &lt;li&gt;&lt;a href=&quot;http://mac.github.com/&quot;&gt;GitHub for Mac&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://windows.github.com/&quot;&gt;GitHub for Windows&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://eclipse.github.com/&quot;&gt;GitHub for Eclipse&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://mobile.github.com/&quot;&gt;GitHub Mobile Apps&lt;/a&gt;&lt;/li&gt;
       &lt;/ul&gt;

       &lt;ul class=&quot;footer_nav&quot;&gt;
         &lt;h4&gt;Tools&lt;/h4&gt;
         &lt;li&gt;&lt;a href=&quot;http://get.gaug.es/&quot;&gt;Gauges: Web analytics&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://speakerdeck.com&quot;&gt;Speaker Deck: Presentations&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;https://gist.github.com&quot;&gt;Gist: Code snippets&lt;/a&gt;&lt;/li&gt;

         &lt;h4 class=&quot;second&quot;&gt;Extras&lt;/h4&gt;
         &lt;li&gt;&lt;a href=&quot;http://jobs.github.com/&quot;&gt;Job Board&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://shop.github.com/&quot;&gt;GitHub Shop&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://octodex.github.com/&quot;&gt;The Octodex&lt;/a&gt;&lt;/li&gt;
       &lt;/ul&gt;

       &lt;ul class=&quot;footer_nav&quot;&gt;
         &lt;h4&gt;Documentation&lt;/h4&gt;
         &lt;li&gt;&lt;a href=&quot;http://help.github.com/&quot;&gt;GitHub Help&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://developer.github.com/&quot;&gt;Developer API&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://github.github.com/github-flavored-markdown/&quot;&gt;GitHub Flavored Markdown&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;&lt;/li&gt;
       &lt;/ul&gt;

     &lt;/div&gt;&lt;!-- /.site --&gt;
  &lt;/div&gt;&lt;!-- /.upper_footer --&gt;

&lt;div class=&quot;lower_footer&quot;&gt;
  &lt;div class=&quot;container clearfix&quot;&gt;
    &lt;div id=&quot;legal&quot;&gt;
      &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/site/terms&quot;&gt;Terms of Service&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/site/privacy&quot;&gt;Privacy&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/security&quot;&gt;Security&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;

      &lt;p&gt;&amp;copy; 2012 &lt;span title=&quot;0.02099s from fe13.rs.github.com&quot;&gt;GitHub&lt;/span&gt; Inc. All rights reserved.&lt;/p&gt;
    &lt;/div&gt;&lt;!-- /#legal or /#legal_ie--&gt;

  &lt;/div&gt;&lt;!-- /.site --&gt;
&lt;/div&gt;&lt;!-- /.lower_footer --&gt;


      &lt;/div&gt;&lt;!-- /#footer --&gt;

    

&lt;div id=&quot;keyboard_shortcuts_pane&quot; class=&quot;instapaper_ignore readability-extra&quot; style=&quot;display:none&quot;&gt;
  &lt;h2&gt;Keyboard Shortcuts &lt;small&gt;&lt;a href=&quot;#&quot; class=&quot;js-see-all-keyboard-shortcuts&quot;&gt;(see all)&lt;/a&gt;&lt;/small&gt;&lt;/h2&gt;

  &lt;div class=&quot;columns threecols&quot;&gt;
    &lt;div class=&quot;column first&quot;&gt;
      &lt;h3&gt;Site wide shortcuts&lt;/h3&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;s&lt;/dt&gt;
        &lt;dd&gt;Focus command bar&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;?&lt;/dt&gt;
        &lt;dd&gt;Bring up this help dialog&lt;/dd&gt;
      &lt;/dl&gt;
    &lt;/div&gt;&lt;!-- /.column.first --&gt;

    &lt;div class=&quot;column middle&quot; style='display:none'&gt;
      &lt;h3&gt;Commit list&lt;/h3&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;j&lt;/dt&gt;
        &lt;dd&gt;Move selection down&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;k&lt;/dt&gt;
        &lt;dd&gt;Move selection up&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;c &lt;em&gt;or&lt;/em&gt; o &lt;em&gt;or&lt;/em&gt; enter&lt;/dt&gt;
        &lt;dd&gt;Open commit&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;y&lt;/dt&gt;
        &lt;dd&gt;Expand URL to its canonical form&lt;/dd&gt;
      &lt;/dl&gt;
    &lt;/div&gt;&lt;!-- /.column.first --&gt;

    &lt;div class=&quot;column last js-hidden-pane&quot; style='display:none'&gt;
      &lt;h3&gt;Pull request list&lt;/h3&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;j&lt;/dt&gt;
        &lt;dd&gt;Move selection down&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;k&lt;/dt&gt;
        &lt;dd&gt;Move selection up&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;o &lt;em&gt;or&lt;/em&gt; enter&lt;/dt&gt;
        &lt;dd&gt;Open issue&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;&lt;span class=&quot;platform-mac&quot;&gt;⌘&lt;/span&gt;&lt;span class=&quot;platform-other&quot;&gt;ctrl&lt;/span&gt; &lt;em&gt;+&lt;/em&gt; enter&lt;/dt&gt;
        &lt;dd&gt;Submit comment&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;&lt;span class=&quot;platform-mac&quot;&gt;⌘&lt;/span&gt;&lt;span class=&quot;platform-other&quot;&gt;ctrl&lt;/span&gt; &lt;em&gt;+&lt;/em&gt; shift p&lt;/dt&gt;
        &lt;dd&gt;Preview comment&lt;/dd&gt;
      &lt;/dl&gt;
    &lt;/div&gt;&lt;!-- /.columns.last --&gt;

  &lt;/div&gt;&lt;!-- /.columns.equacols --&gt;

  &lt;div class=&quot;js-hidden-pane&quot; style='display:none'&gt;
    &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;

    &lt;h3&gt;Issues&lt;/h3&gt;

    &lt;div class=&quot;columns threecols&quot;&gt;
      &lt;div class=&quot;column first&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;j&lt;/dt&gt;
          &lt;dd&gt;Move selection down&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;k&lt;/dt&gt;
          &lt;dd&gt;Move selection up&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;x&lt;/dt&gt;
          &lt;dd&gt;Toggle selection&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;o &lt;em&gt;or&lt;/em&gt; enter&lt;/dt&gt;
          &lt;dd&gt;Open issue&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;platform-mac&quot;&gt;⌘&lt;/span&gt;&lt;span class=&quot;platform-other&quot;&gt;ctrl&lt;/span&gt; &lt;em&gt;+&lt;/em&gt; enter&lt;/dt&gt;
          &lt;dd&gt;Submit comment&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;platform-mac&quot;&gt;⌘&lt;/span&gt;&lt;span class=&quot;platform-other&quot;&gt;ctrl&lt;/span&gt; &lt;em&gt;+&lt;/em&gt; shift p&lt;/dt&gt;
          &lt;dd&gt;Preview comment&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;&lt;!-- /.column.first --&gt;
      &lt;div class=&quot;column last&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;c&lt;/dt&gt;
          &lt;dd&gt;Create issue&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;l&lt;/dt&gt;
          &lt;dd&gt;Create label&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;i&lt;/dt&gt;
          &lt;dd&gt;Back to inbox&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;u&lt;/dt&gt;
          &lt;dd&gt;Back to issues&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;/&lt;/dt&gt;
          &lt;dd&gt;Focus issues search&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;js-hidden-pane&quot; style='display:none'&gt;
    &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;

    &lt;h3&gt;Issues Dashboard&lt;/h3&gt;

    &lt;div class=&quot;columns threecols&quot;&gt;
      &lt;div class=&quot;column first&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;j&lt;/dt&gt;
          &lt;dd&gt;Move selection down&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;k&lt;/dt&gt;
          &lt;dd&gt;Move selection up&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;o &lt;em&gt;or&lt;/em&gt; enter&lt;/dt&gt;
          &lt;dd&gt;Open issue&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;&lt;!-- /.column.first --&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;js-hidden-pane&quot; style='display:none'&gt;
    &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;

    &lt;h3&gt;Network Graph&lt;/h3&gt;
    &lt;div class=&quot;columns equacols&quot;&gt;
      &lt;div class=&quot;column first&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;badmono&quot;&gt;←&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; h&lt;/dt&gt;
          &lt;dd&gt;Scroll left&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;badmono&quot;&gt;→&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; l&lt;/dt&gt;
          &lt;dd&gt;Scroll right&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;badmono&quot;&gt;↑&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; k&lt;/dt&gt;
          &lt;dd&gt;Scroll up&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;badmono&quot;&gt;↓&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; j&lt;/dt&gt;
          &lt;dd&gt;Scroll down&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;t&lt;/dt&gt;
          &lt;dd&gt;Toggle visibility of head labels&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;&lt;!-- /.column.first --&gt;
      &lt;div class=&quot;column last&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;shift &lt;span class=&quot;badmono&quot;&gt;←&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; shift h&lt;/dt&gt;
          &lt;dd&gt;Scroll all the way left&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;shift &lt;span class=&quot;badmono&quot;&gt;→&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; shift l&lt;/dt&gt;
          &lt;dd&gt;Scroll all the way right&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;shift &lt;span class=&quot;badmono&quot;&gt;↑&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; shift k&lt;/dt&gt;
          &lt;dd&gt;Scroll all the way up&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;shift &lt;span class=&quot;badmono&quot;&gt;↓&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; shift j&lt;/dt&gt;
          &lt;dd&gt;Scroll all the way down&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;&lt;!-- /.column.last --&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;js-hidden-pane&quot; style='display:none'&gt;
    &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;columns threecols&quot;&gt;
      &lt;div class=&quot;column first js-hidden-pane&quot; style='display:none'&gt;
        &lt;h3&gt;Source Code Browsing&lt;/h3&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;t&lt;/dt&gt;
          &lt;dd&gt;Activates the file finder&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;l&lt;/dt&gt;
          &lt;dd&gt;Jump to line&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;w&lt;/dt&gt;
          &lt;dd&gt;Switch branch/tag&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;y&lt;/dt&gt;
          &lt;dd&gt;Expand URL to its canonical form&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;js-hidden-pane&quot; style='display:none'&gt;
    &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;columns threecols&quot;&gt;
      &lt;div class=&quot;column first&quot;&gt;
        &lt;h3&gt;Browsing Commits&lt;/h3&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;platform-mac&quot;&gt;⌘&lt;/span&gt;&lt;span class=&quot;platform-other&quot;&gt;ctrl&lt;/span&gt; &lt;em&gt;+&lt;/em&gt; enter&lt;/dt&gt;
          &lt;dd&gt;Submit comment&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;escape&lt;/dt&gt;
          &lt;dd&gt;Close form&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;p&lt;/dt&gt;
          &lt;dd&gt;Parent commit&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;o&lt;/dt&gt;
          &lt;dd&gt;Other parent commit&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;js-hidden-pane&quot; style='display:none'&gt;
    &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;
    &lt;h3&gt;Notifications&lt;/h3&gt;

    &lt;div class=&quot;columns threecols&quot;&gt;
      &lt;div class=&quot;column first&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;j&lt;/dt&gt;
          &lt;dd&gt;Move selection down&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;k&lt;/dt&gt;
          &lt;dd&gt;Move selection up&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;o &lt;em&gt;or&lt;/em&gt; enter&lt;/dt&gt;
          &lt;dd&gt;Open notification&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;&lt;!-- /.column.first --&gt;

      &lt;div class=&quot;column second&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;e &lt;em&gt;or&lt;/em&gt; shift i &lt;em&gt;or&lt;/em&gt; y&lt;/dt&gt;
          &lt;dd&gt;Mark as read&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;shift m&lt;/dt&gt;
          &lt;dd&gt;Mute thread&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;&lt;!-- /.column.first --&gt;
    &lt;/div&gt;
  &lt;/div&gt;

&lt;/div&gt;

    &lt;div id=&quot;markdown-help&quot; class=&quot;instapaper_ignore readability-extra&quot;&gt;
  &lt;h2&gt;Markdown Cheat Sheet&lt;/h2&gt;

  &lt;div class=&quot;cheatsheet-content&quot;&gt;

  &lt;div class=&quot;mod&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;h3&gt;Format Text&lt;/h3&gt;
      &lt;p&gt;Headers&lt;/p&gt;
      &lt;pre&gt;
# This is an &amp;lt;h1&amp;gt; tag
## This is an &amp;lt;h2&amp;gt; tag
###### This is an &amp;lt;h6&amp;gt; tag&lt;/pre&gt;
     &lt;p&gt;Text styles&lt;/p&gt;
     &lt;pre&gt;
*This text will be italic*
_This will also be italic_
**This text will be bold**
__This will also be bold__

*You **can** combine them*
&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;h3&gt;Lists&lt;/h3&gt;
      &lt;p&gt;Unordered&lt;/p&gt;
      &lt;pre&gt;
* Item 1
* Item 2
  * Item 2a
  * Item 2b&lt;/pre&gt;
     &lt;p&gt;Ordered&lt;/p&gt;
     &lt;pre&gt;
1. Item 1
2. Item 2
3. Item 3
   * Item 3a
   * Item 3b&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;h3&gt;Miscellaneous&lt;/h3&gt;
      &lt;p&gt;Images&lt;/p&gt;
      &lt;pre&gt;
![GitHub Logo](/images/logo.png)
Format: ![Alt Text](url)
&lt;/pre&gt;
     &lt;p&gt;Links&lt;/p&gt;
     &lt;pre&gt;
http://github.com - automatic!
[GitHub](http://github.com)&lt;/pre&gt;
&lt;p&gt;Blockquotes&lt;/p&gt;
     &lt;pre&gt;
As Kanye West said:

&gt; We're living the future so
&gt; the present is our past.
&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;

  &lt;h3&gt;Code Examples in Markdown&lt;/h3&gt;
  &lt;div class=&quot;col&quot;&gt;
      &lt;p&gt;Syntax highlighting with &lt;a href=&quot;http://github.github.com/github-flavored-markdown/&quot; title=&quot;GitHub Flavored Markdown&quot; target=&quot;_blank&quot;&gt;GFM&lt;/a&gt;&lt;/p&gt;
      &lt;pre&gt;
```javascript
function fancyAlert(arg) {
  if(arg) {
    $.facebox({div:'#foo'})
  }
}
```&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;p&gt;Or, indent your code 4 spaces&lt;/p&gt;
      &lt;pre&gt;
Here is a Python code example
without syntax highlighting:

    def foo:
      if not bar:
        return true&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;p&gt;Inline code for comments&lt;/p&gt;
      &lt;pre&gt;
I think you should use an
`&amp;lt;addr&amp;gt;` element here instead.&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;


    &lt;div id=&quot;ajax-error-message&quot; class=&quot;flash flash-error&quot;&gt;
      &lt;span class=&quot;mini-icon mini-icon-exclamation&quot;&gt;&lt;/span&gt;
      Something went wrong with that request. Please try again.
      &lt;a href=&quot;#&quot; class=&quot;mini-icon mini-icon-remove-close ajax-error-dismiss&quot;&gt;&lt;/a&gt;
    &lt;/div&gt;

    &lt;div id=&quot;logo-popup&quot;&gt;
      &lt;h2&gt;Looking for the GitHub logo?&lt;/h2&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;h4&gt;GitHub Logo&lt;/h4&gt;
          &lt;a href=&quot;http://github-media-downloads.s3.amazonaws.com/GitHub_Logos.zip&quot;&gt;&lt;img alt=&quot;Github_logo&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/about_page/github_logo.png?1334862345&quot; /&gt;&lt;/a&gt;
          &lt;a href=&quot;http://github-media-downloads.s3.amazonaws.com/GitHub_Logos.zip&quot; class=&quot;minibutton download&quot;&gt;Download&lt;/a&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;h4&gt;The Octocat&lt;/h4&gt;
          &lt;a href=&quot;http://github-media-downloads.s3.amazonaws.com/Octocats.zip&quot;&gt;&lt;img alt=&quot;Octocat&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/about_page/octocat.png?1334862345&quot; /&gt;&lt;/a&gt;
          &lt;a href=&quot;http://github-media-downloads.s3.amazonaws.com/Octocats.zip&quot; class=&quot;minibutton download&quot;&gt;Download&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;

    
    
    &lt;span id='server_response_time' data-time='0.02894' data-host='fe13'&gt;&lt;/span&gt;
    
  &lt;/body&gt;
&lt;/html&gt;
</code></pre></noscript></div>


<p>The documentation for the JavaFX conventions and tasks are the weakest part right now, but I have <a href="https://bitbucket.org/shemnon/javafx-gradle/src/9eef1086856b/samples/FullyExpressed/build.gradle?at=release_0.0.0">an example</a> that I use for smoke testing that shows everything that ought to be configured, but most items don&#8217;t need to be.</p>

<p><strong>Tasks</strong></p>

<p>Since the JavaFX plugin also use the Java plugin it gains all the tasks and configurations from that plugin, and it adds a few more tasks of it&#8217;s own.  Most of them you can ignore and take for granted that they work, but there are two principal tasks you will be interested in targeting directly.</p>

<p>The first task is the standard <code>assemble</code> task, and like the name implies it assembles the jar and the native packages.  The resulting files will wind up in <code>build/distributions/bundles</code> and will be limited to the particular platform you happen to build on. It will also use the JDK you ran Gradle on as well.  It also creates JNLPs and signed the jars, but don&#8217;t get too excited as it still requires some hand tweaking of the JNLP file to make work.  Remember what version number this is…</p>

<p>The second task that would be relevant is the <code>run</code> task, provided by this plugin.  This runs the JavaFX application <em>in situ</em> without any packaging beyond complication and resource preparations.  This is useful during the build-test-tweak loops.  More interesting is the <code>debug</code> task, but you will have to run that with the NetBeans Gradle plugin to get the full effect.</p>

<p><strong>Builds</strong></p>

<p>I am creating the builds and hosting the repository on <a href="http://cloudbees.com">CloudBees</a>, who was kind enough to offer free OSS hosting for build and repository distributions.  I wear both of the shirts I got from them at JavaOne on a regular basis.  I have a <a href="https://javafx-gradle-plugin.ci.cloudbees.com/">Jenkins Build Server</a> building the samples and deploying the plugin to the <a href="http://repository-javafx-gradle-plugin.forge.cloudbees.com/snapshot/">snapshot</a> and when appropriate <a href="http://repository-javafx-gradle-plugin.forge.cloudbees.com/release/">release</a> repositories.  And they are ivy repositories because Maven 3 snapshots are so beyond messed up it is unreal.</p>

<p><strong>Feedback Welcome</strong></p>

<p>The code itself is hosted on <a href="https://bitbucket.org/shemnon/javafx-gradle/">BitBucket</a> which has a nifty <a href="https://bitbucket.org/shemnon/javafx-gradle/issues">issue tracker</a> that is not quite as awesome as JIRA, but serves the purpose.  If you have any issues or suggestions for improvement feel free to post an issue.  Or post a patch, or a pull request.</p>

<p>All feedback is fair game.  If you don&#8217;t like the way I am doing the conventions please speak up.  I am not interested personally in breaking new conventional ground or having style arguments, but I am interested in following how other similar build systems set up their builds and conforming when it makes sense.</p>

<p>And one last thing: it&#8217;s not the rottenness of the tomato that is thrown, but the technique that matters.  A well articulated piece of feedback generates more interest than stuff like <a href="https://twitter.com/timbray/status/252635363481382912">&#8216;LOL JavaFX&#8217;</a>, which just makes you look like an ass.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conventions and Configuratons]]></title>
    <link href="http://speling.shemnon.com//blog/2012/10/23/conventions-and-configurations/"/>
    <updated>2012-10-23T22:13:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2012/10/23/conventions-and-configurations</id>
    <content type="html"><![CDATA[<p>Creating an app in any new framework can sometimes be a bit of a chore.  Have you looked at the files that come form a new Hello World JavaFX app from NetBeans?  Not very dry at all and a lot of esoteric stuff in side directories is created, you know just in case you want to customize it.  And the problem isn&#8217;t NetBeans, they are doing the best they can with Ant.</p>

<p><strong>The Ideal Build</strong></p>

<p>To me the ideal build setup for a JavaFX application would involve putting your source files in a specific directory layout, placing supporting files in a similarly conventional manner, adding a <em>minimal</em> build script, pressing a button, and catching my .app or .exe as it falls out the other side.</p>

<!-- more -->


<p>One of the keys here is the minimal build script.  If I am doing things the standard way then my actions should be presumed.  Presumed without comment.  Part of the legacy of the <a href="http://ant.apache.org/">ant</a> build system is you cannot simply say &#8216;my Java code is here, make a jar.&#8217;  You have to hand walk the build from where your source code lives, to where you want the compiled class files to go, to where you want the jar to go, to what you want to name it.  And heaven forbid if you use other peoples libraries, or expect other people to use yours.</p>

<p>I&#8217;m being a little harsh on Ant here. Let&#8217;s roll back our memory to 13 years ago and realize how Ant was eight kinds of awesome compared to a <a href="http://www.gnu.org/software/make/manual/make.html">make</a> file.  Many builds I saw used to drop class files in the source tree.  And if you had to add a package you either had to update the make file or hope some side voodoo script could sniff it out, and the mess leftover was barely tolerable.  Recursive file sniffing and a separate build directories were the gold standard back at the turn of the century.  But the problem with higher standards is eventually they become the baseline expectation.  Consider how much building software stunk before even make existed!</p>

<p><strong>Hand Cranked to Configurable to Conventional</strong></p>

<p>The evolution we are witnessing here is one of increased automation, and the standardization.  This is just like the industrial revolution and the classic example of firearms.  You can hand craft a rife, and it will work just fine.  If anything breaks, however, you have to hand craft a replacement and often craft other pieces to make sure it continues to work.  When the parts were standardized, in both assembly and interface, you can mass produce many different rifles and do many interesting things with the various add ons.  If you want a slightly different grip or trigger, you can replace it because if the interface.  If you find a broken rifle you can figure out what is wrong with it because of the standard assembly,  And if you stick to the standards, ammunition is readily interchangeable between any rifle.</p>

<p>One of the key issues with interchangeable parts, however, is the need for a critical mass.  With a small audience conventions are merely incidental.  In large groups and with enough adoption they become the rules of society, for example what side you pass someone on the sidewalk.</p>

<p><strong>File Conventions</strong></p>

<p>To take us closer to the industrialized build we need to agree on some conventions. Even though I am building a Gradle plugin, I feel we need to accept and adopt widely some Maven conventions.  Specifically the <code>src/&lt;set&gt;/&lt;language|role&gt;/...</code> pattern for source files.  Gradle already adopts this pattern by default, which is good from the viewpoint of interchangeable parts.</p>

<pre><code>&lt;root&gt;/
+--src/
   +--main/
      +--java/
      |  +--&lt;Java Classes by package&gt;
      +--resources/
      |  +--&lt;Resources, like CSS and image, by package&gt;
      +--package/
         +--win/
         |  +--&lt;Bundle specific files&gt;
         +--macosx/
         |  +--&lt;Bundle specific files&gt;
         +--linux/
         |  +--&lt;Bundle specific files&gt;
         +--&lt;icon files for bundles&gt;
</code></pre>

<p>This is notional, and I am more than willing to hear comments as to where I am getting stuff wrong.  This is currently the file layout I am using for my Gradle JavaFX plugin, and I&#8217;ve pulled three of the JavaFX sample apps into this directory format, and the build files are all quite short (after the yak shaving to install the plugin).  <a href="https://bitbucket.org/shemnon/javafx-gradle/src/c52be485c341796394ae9c7ba9d44f1d79c45889/samples/brickbreaker/build.gradle?at=master">Brickbreaker</a> just installs the plugin.  <a href="https://bitbucket.org/shemnon/javafx-gradle/src/c52be485c341/samples/ConferenceScheduleApp/build.gradle?at=master">ConferenceScheduleApp</a> only names the executable (with bonus Java Version yak shaving) while <a href="https://bitbucket.org/shemnon/javafx-gradle/src/c52be485c341/samples/Ensemble2/build.gradle?at=master">Ensemble2</a> has the most to do, and none of it involved JavaFX but it is peculiar to how the app works.</p>

<p>My goal here, is to make all of the JavaFX yak shaving transparent, so you can focus on indexing your samples in your build rather than remembering the syntax of the ant deploy task.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting a JavaFX Gradle Plugin]]></title>
    <link href="http://speling.shemnon.com//blog/2012/10/17/javafx-gradle-plugin/"/>
    <updated>2012-10-17T22:47:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2012/10/17/javafx-gradle-plugin</id>
    <content type="html"><![CDATA[<p>I wanted to get this out there early, since &#8220;release early release often&#8221; is one of the open source mantras.  I have a longer blog post planned on this subject, but I have so many balls in the air right now I&#8217;m not sure when I&#8217;ll get to write it.</p>

<p>I am starting to write a <a href="https://bitbucket.org/shemnon/javafx-gradle">JavaFX 2.0 Gradle Plugin</a> over at bitbucket.  Right now it handles just the <code>fx:jar</code> and <code>fx:deploy</code> ant tasks.  And not completely. I don&#8217;t have the resources wired into the native bundles.  But that will come.  I also am not doing binary CSS or Jar signing.</p>

<!-- more -->


<p>There are two samples in the repo demonstrating the build.  I pulled from the JavaFX 2.2.0 Samples brickbreaker and Ensemble2 which represents a small and large project. I moved the files around into a conventional layout, and provided the barest of Gradle scripts I could, with the help of the plugin.  The script for <a href="https://bitbucket.org/shemnon/javafx-gradle/src/4f1f197a845d5fccc4408ad3c49167e65421b1df/brickbreaker/build.gradle?at=master">brickbreaker</a> is awesomely short.  And <a href="https://bitbucket.org/shemnon/javafx-gradle/src/955cc9b99dc86c3b384b40157801ffd3c1adfe94/Ensemble2/build.gradle?at=master">Ensemble2</a> is a bit longer because of the custom build work it is doing to bring the source of the samples into the jar.  When you run &#8216;gradle assemble` it will actually create the Mac OSX .app and .dmg files.  It probably does the correct thing on Linux and Windows but I haven&#8217;t tried yet.  But first you need to install the plugin via &#8216;gradle install&#8217; in the plugin dir.</p>

<p><strong>Conventions</strong></p>

<p>My main purpose in this exercise is to try and nail down a set of file layout conventions that Gradle and Maven can use to create a shippable app with a minimum of configuration.  Layouts that match the Maven way for the most part.  And Ant scripts can be written to these conventions.  If, you know, Ant is your thing.</p>

<p>The only out there conventions would be the bundle resources, which I am placing in <code>src/main/resources</code>.  I also intend to add some other standard files, like <code>src/main/resources/icon.png</code> and associated files and directories being loaded into the proper place for native bundling.  I also need to figure out what to do about signing keys.  Likely this will have to be a configuration thing since checking in your signing key to source control would be a bad idea, even if you have the world&#8217;s most awesome password.</p>

<p>Finally, I have zero intention of writing this hypothetical Maven plugin. Gradle is what I do for fun. I&#8217;de rather write Perl scripts than Maven plugins, no offense to the Perl crowd. But being part of the conversation to set the conventions is something I intend to be a part of.</p>
]]></content>
  </entry>
  
</feed>
