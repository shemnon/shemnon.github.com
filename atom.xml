<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[...and they shall know me by my speling errors.]]></title>
  <link href="http://speling.shemnon.com//atom.xml" rel="self"/>
  <link href="http://speling.shemnon.com//"/>
  <updated>2013-06-08T17:57:18-06:00</updated>
  <id>http://speling.shemnon.com//</id>
  <author>
    <name><![CDATA[Danno Ferrin]]></name>
    <email><![CDATA[danno.ferrin@shemnon.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Insubstantial Needs a New Maintainer]]></title>
    <link href="http://speling.shemnon.com//blog/2013/06/08/insubstantial-needs-a-new-maintainer/"/>
    <updated>2013-06-08T11:31:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2013/06/08/insubstantial-needs-a-new-maintainer</id>
    <content type="html"><![CDATA[<p>When I first started the maintenance branch of Kirill Grouchnikov&#8217;s Substance and Flamingo Libraries over two and a half years ago I had one important overriding reason to do so: we were using his libraries at my day job. That is one of the greatest things about an open source project, when one the original author moves on to newer and shinier things the community can step in and take over the project.</p>

<p>That time has come again. Since I am no longer working on the project that is using those libraries I no longer have the daytime hours to spend on bug fixes and releases. I also would rather spend evenings and weekends playing laser tag, swimming with the family, or working on JavaFX. I haven&#8217;t really touched it in any significant way in over six months. Nor do I see myself processing another Insubstantial release. Do you want to be the maintainer?</p>

<!-- more -->


<p></p>

<p>I&#8217;m not just going to hand the keys to the maintenance branch over to whoever say&#8217;s &#8216;me first.&#8217; I&#8217;m going to hand them over to the first competent contributor who says &#8216;me first.&#8217; How will I judge competence? First, they must either submit a good patch or have submitted a good patch. Second, I want to see a distribution rolled up somewhere. Some FTP site, whatever. And I want to see it in a format Sonatype will accept, with signatures and the whole nine yards. If it seems daunting, it isn&#8217;t. <a href="https://github.com/Insubstantial/insubstantial/blob/master/README.markdown">I left instructions.</a></p>

<p>What will I give you? I will make you the administrator of the <a href="https://github.com/Insubstantial/">insubstantial group</a> over at GitHub. I will tell Sonatype to add you as a user to the <a href="https://oss.sonatype.org/index.html">deployment repository</a>. I will also try and hand over the CloudBees build instance I have set up for insubstantial. No promises on that one since I see no instructions, but I will do my best.</p>

<p>Now I am not delusional, I don&#8217;t expect a race to grab the project. In fact, no one may ever ask for the keys. But if someone some day feels the need to take up the mantle of insubstantial maintainer, the keys are here for the taking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Gradle Plugin 0.3.0 Released]]></title>
    <link href="http://speling.shemnon.com//blog/2013/05/18/javafx-gradle-plugin-0-dot-3-0-released/"/>
    <updated>2013-05-18T10:42:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2013/05/18/javafx-gradle-plugin-0-dot-3-0-released</id>
    <content type="html"><![CDATA[<p>Today I pushed the fourth rerelease of my JavaFX Plugin for Gradle to bintray, <a href="https://bintray.com/version/show/general/shemnon/javafx-gradle/gradle-javafx-plugin/0.3.0">version 0.3.0</a> (real software engineers count from zero).  New in this release is the ability to specify a particular JVM to package with your native bundles and the ability to customize platform-specific build options. Some configuration options and conventions also moved around to support these two features, most notably the plugin no longer automatically self-signs the code.</p>

<p>To use the plugin in your gradle script, you can apply the plugin from the following URL:</p>

<pre><code>apply from: "http://dl.bintray.com/content/shemnon/javafx-gradle/0.3.0/javafx.plugin"
</code></pre>

<p>Or, you can include the content of that file anywhere in your build, either directly in build.gradle or included from your file path.</p>

<!-- more -->


<h1>Specifying the Java Runtime</h1>

<p>In the more recent Java 8 builds they introduced the ability to specify which Java runtime to use in the Ant tasks via the <code>j2se</code> attribute on the <code>platform</code> tag.  Mysteriously enough, it is not available for the command line <code>javafxpacjager</code> tool.  To use it in the gradle plugin simply specify the <code>javaRuntime</code> value in the <code>javafx</code> block and point it at the file location of the JDK/JRE you want to ship, like so</p>

<pre><code>javafx {
    javaRuntime = '/Library/Java/JavaVirtualMachines/jdk1.7.0_21.jdk/'
}
</code></pre>

<p>Why would you want to specify a runtime other than the one you are compiling against?  Here are a few ideas: You build on Java 8 but ship on Java 7, you need to load some special native libraries or classes such as export restricted cryptography, or you are stripping out things you are not required to redistribute, such as rmid or cobra stuff, or you are adding something like tools.jar.  The biggest reason has yet to see wider distribution: you are shipping a Java 8 Compact Profile as the JRE.</p>

<p>The most interesting value, however, is the <code>NO_RUNTIME</code> value (expressed as a string as <code>'&lt;NO RUNTIME&gt;'</code>, but the constant is better in case the value changes).  Your native packages will be built without a JVM and will instead use the JVM loaded on the local machine.  This is very useful for shipping Java 8 examples before it&#8217;s release in 2014.</p>

<h1>Configuration Profiles</h1>

<p>Some of you can probably guess why I am talking about profiles next.  By specifying a JRE location in the build file what have I done? I have effectively locked the build down to only work on Mac.  New in the 0.3.0 release is a <code>profiles</code> block underneath the <code>javafx</code> block.  In this block, you can create custom build profiles and change which ones are used at build time.  When looking up convention files the values stored in the profiles are always used before the other values, and they are used in the order the profiles are activated.  As a convention, the plugin always adds what platform you are building as the last profile activated.  Here is an example from the <a href="https://bitbucket.org/shemnon/javafx-gradle/src/9668620a1151bb0738c61b04c448b5bda15685c0/samples/FullyExpressed/build.gradle?at=master#cl-32">Fully Expressed</a> sample:</p>

<pre><code>javafx {

  profiles {
  // not every possible platform override, but ones that have a known impact
    windows {
        id = 'c533f663-1efd-489f-b910-4c7ec20c7fd0'
        category = 'JavaFX Demos'
        javaRuntime = 'C:/Program Files (x86)/Java/jdk1.7.0_21'
    }

    macosx {
        id = 'net.java.openjdk.openjfx.Ensemble2'
        category = 'public.app-category.developer-tools'
        javaRuntime = '/Library/Java/JavaVirtualMachines/jdk1.7.0_21.jdk/'
    }

    linux {
        // linux doesn't care about id, it goes un-used at the moment
        category = 'Development'
        // good luck finding a standard location for the JDK
        //javaRuntime = '/usr/lib/jvm/java-7-oracle'
    }
  }
  //---8&lt;-- snip --&gt;8---
}
</code></pre>

<p>I&#8217;ll plan on doing a post later for profiles in more detail, but for now it is sufficient to say that the <code>windows</code>, <code>macosx</code>, and <code>linux</code> profiles magically turn on based on where you do the build.  No, you cannot use profiles to build a RaspberryPi deb package on a linux box yet, I tried. The problems are deeper than JRE selection.</p>

<h1>Convention changes</h1>

<p>I also took the opportunity to change some of the conventions.  First and foremost I turned off the automatic generation and use of self signed certificates.  The 7u21 changes have made those certs next to useless.  You can still use the plugin to sign your application with a real certificate, you just have to explicitly do it.</p>

<p>If there is anyone within the sound of my voice that uses the plugin or would want to use the plugin to do real signing of their applications, <strong>let me know</strong> and I&#8217;ll write up some documentation.  Until then just know that it can be done.</p>

<p>The next set of conventions has to do with the <code>jfxDeploy</code> task.  Every single parameter has been moved into the <code>javafx</code> block and the preferred way to configure those is to use that block.  You can still configure them in the task, but the convention block is the preferred location.  The <code>FullyExpressed</code> example reflects those changes</p>

<p>Finally, I am dropping the magic auto-updating url.  All plugin URLs are version encoded.  Really, this is a good idea to avoid surprise breakages and has nothing to do with bintray not letting me delete releases over 30 days old.  Honest.</p>

<h1>Summary</h1>

<p>My aim is to make the JavaFX Gradle Plugin a one stop shop for all your JavaFX build needs. If you have any complaints, concerns, requests, code to contribute, or other comments, please let me know by posting an <a href="https://bitbucket.org/shemnon/javafx-gradle/issues">issue on bintray</a>, mail (danno.ferrin@shemnon.com), Twitter (@shemnon), pull request <a href="https://bitbucket.org/shemnon/javafx-gradle/">at bitbucket</a> or by leaving a comment in this blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Touch and Gesture JavaFX Demonstration]]></title>
    <link href="http://speling.shemnon.com//blog/2013/05/03/a-touch-and-gesture-javafx-demonstration/"/>
    <updated>2013-05-03T22:04:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2013/05/03/a-touch-and-gesture-javafx-demonstration</id>
    <content type="html"><![CDATA[<p>A few weeks ago my day job bought me a Surface Pro to help me prototype some future product work.  Being a developer, you could probably guess the kind of software I installed on it.  For the record I have yet to attempt to use stuff like the Finance and Travel App, and only opened the Maps app out of idle curiosity. The first thing I did was install JDK 8 and IntelliJ, so I could get down to business: figuring out how to best use  touch screens and gestures.</p>

<!-- more -->


<p>To help me, I wrote a small sample app I called <a href="https://bitbucket.org/shemnon/touchyfxy">Touchy FXy</a>.  I did this so I could get a realtime feel of how the gesture events work. Basically it gives you graphic and textual feedback as you perform gestures on the main center area (the one with the helpful instructions).</p>

<p><img src="http://speling.shemnon.com//images/touchyfxymac.png"></p>

<p>One of the main reasons I wrote this is to get a feel for some of the quirks on the various platforms that JavaFX runs on.  Already I have some issues in mind, but I want to get a good survey of the problem space before I propose anything.  The reasons why some tasks are problems on one platform may have to do with other platforms.</p>

<p>So please, give this app a whirl, and leave me your comments.  I am particularly interested in platforms I don&#8217;t have immediate access to, which basically includes a boring windows 7 laptop, a Surface Pro, and a MacBook air.  How does this work on Ubuntu touch screens (do they even work?)  How about RasPi touch screens?  Fancy Wacom digitizers?  Let me know in the comments below or mail me at <a href="mailto:danno.ferrin@shemnon.com">danno.ferrin@shemnon.com</a>, or leave a bug in the bitbucket project.</p>

<p>In case you are not interested in building this yourself, but do want to run it, I have the following packages on <a href="http://bintray.com/">BinTray</a>:</p>

<ul>
<li><a href="http://dl.bintray.com/content/shemnon/javafx/touchyfxy-0.0.jar?direct">Executable Jar</a></li>
<li><a href="http://dl.bintray.com/content/shemnon/javafx/touchyfxy-0.0.0.msi?direct">Windows .msi</a></li>
<li><a href="http://dl.bintray.com/content/shemnon/javafx/touchyfxy.dmg?direct">Mac .dmg</a></li>
<li><a href="http://dl.bintray.com/content/shemnon/javafx/touchyfxy-0.0.deb?direct">Linux .deb</a></li>
<li><a href="http://dl.bintray.com/content/shemnon/javafx/touchyfxy-0.0-1.i386.rpm?direct">Linux .rpm</a></li>
</ul>


<p>In case you are wondering, each executable package embeds Java 7u21.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle JavaFX Plugin 0.2.0 Released]]></title>
    <link href="http://speling.shemnon.com//blog/2013/01/30/gradle-javafx-plugin-0-dot-2-0-released/"/>
    <updated>2013-01-30T19:57:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2013/01/30/gradle-javafx-plugin-0-dot-2-0-released</id>
    <content type="html"><![CDATA[<p>The 0.2.0 release of the Gradle JavaFX Plugin is now live on <a href="http://l.aunch.us/fOjm">BinTray</a>. Get it while it&#8217;s hot! More things changed in this release than the lat time around. First there has been a lot of work automating the use of icons in the packaged resource. My <a href="http://speling.shemnon.com/blog/2013/01/28/adding-icons-with-the-gradle-javafx-plugin/">previous post</a> has all the details. Second, the interaction between the Maven and Eclipse plugin has been improved. Finally, the distribution has move to BinTray for the release artifacts.</p>

<!-- more -->


<p><strong>Changed Conventions</strong></p>

<p>There is one notable change that needs to be called out. Previously package specific resources went under <code>src/main/resources</code>. I have moved them to <code>src/deploy/resources</code> to clarify that they are used for deployment and not at runtime. This was needed for the gradle eclipse plugin to create sensible projects. The sample applications have been adjusted appropriately.</p>

<p><strong>Changed Deployment Info</strong></p>

<p>The plugin is no longer deployed to the webdav repository on CloudBees, but instead has migrated over to <a href="http://l.aunch.us/fOjm">BinTray</a>. The new recommend release scripts for the most recent version of the plugin, regardless of version:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apply from: 'http://dl.bintray.com/content/shemnon/javafx-gradle/javafx.plugin'</span></code></pre></td></tr></table></div></figure>


<p>For a version locked script you can use this script</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apply from: 'http://dl.bintray.com/content/shemnon/javafx-gradle/0.2.0/javafx.plugin'</span></code></pre></td></tr></table></div></figure>


<p>The repository location and co-ordinates also have changed. If you are using a direct build script dependency you will to use this co-ordinate</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>org.bitbucket.shemnon.javafxplugin:gradle-javafx-plugin:0.2.0</span></code></pre></td></tr></table></div></figure>


<p>You will likely want to look at the <a href="http://dl.bintray.com/content/shemnon/javafx-gradle/0.2.0/javafx.plugin">apply script</a> anyway since there are also some other build time dependencies. <em>I wish gradle just had a way to apply plugins from a maven co-ordinate, with dependencies.</em></p>

<p><strong> Examples </strong></p>

<p>If you would like to see some samples built with the plugin you can download them from <a href="http://repository-javafx-gradle-plugin.forge.cloudbees.com/release/0.2.0/">the CloudBees repository</a>. Only the single file installers are available. The <a href="https://bitbucket.org/shemnon/javafx-gradle/src/009e6d4d2487/samples?at=release_0.2.0">source</a> is available at the <a href="https://bitbucket.org/shemnon/javafx-gradle/">bitbucket project</a>.</p>

<p><strong> Future Plans </strong></p>

<p>For the next release I am planning on spending more time focusing on making the per-platform packaging top notch. I will add in hooks and allowances so that the end user can build any of the packaged platforms without conflict. One example is that the <code>appId</code> means different, incompatible, things on Windows and Mac. Windows wants a GUID whereas Mac wants a CFBundleIdentifier (which is close to a package name). Then there is the issue of gatekeeper and other smaller details.</p>

<p>In the mean time, if you find any bugs please be sure to <a href="https://bitbucket.org/shemnon/javafx-gradle/issues?status=new&amp;status=open">report them</a>. I can also be found on twitter as <a href="http://twitter.com/shemnon">@shemnon</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Icons with the Gradle JavaFX Plugin]]></title>
    <link href="http://speling.shemnon.com//blog/2013/01/28/adding-icons-with-the-gradle-javafx-plugin/"/>
    <updated>2013-01-28T14:57:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2013/01/28/adding-icons-with-the-gradle-javafx-plugin</id>
    <content type="html"><![CDATA[<p>The 0.2.0 release of the Gradle JavaFX Plugin is just around the corner. I want to spend some time building all the samples on all of the platforms and making sure smoke doesn&#8217;t come out. Expect it in a day or two.</p>

<p>The major feature for this release is better handling of packaged icons across the platforms. There is a file convention manner and a build script configuration method that will allow you to take a set of PNG images and let the build tool create the needed specialty file for each platform.</p>

<!-- more -->


<p>A quick word of warning before I dive into the details. You have to choose either the convention or the configuration, not both. If you do any configuration of your icons then none of the file conventions will be applied.</p>

<p><strong> Icons By Convention </strong></p>

<p>The easiest method is just to place specifically named icons in a specific place. The directory you should place the icons in is <code>src/deploy/package</code>. The icons also all need to be PNG images. The real magic is in how you name your icons. If they have the right pattern for their name then icon will be used and the sizes and other metadata are calculated by the plugin.</p>

<p>When naming icons for the conventional method the first part of the name describes the role of the icon. Right now the values are <code>shortcut</code>, <code>volume</code>, and <code>setup</code>. An icon of type <code>shortcut</code> will be the icon in the launcher, executable, taskbar, menu, or dock. An icon of type <code>volume</code> will be used for the MacOSX DMG folder icon. And an icon of type <code>setup</code> will appear in the corner of a Windows EXE setup wizard.</p>

<p>The second part of the name is any random set of characters. You would do this to distinguish the various sizes of the icons. However multiple icons are only recommend for the <code>shortcut</code> and <code>volume</code> icon sets, since the <code>setup</code> icon is converted into a BMP by the plugin. For MacOSX you also need to pay attention to the icon sizes, since only certain sizes are used by the MacOSX ICNS file. Those size are 16, 32, 128, 256, and 512 square. Note that 64x64 is not in that list!</p>

<p>The final part of the name is only relevant to MacOSX installers. If the file has &#8216;@2x&#8217; in it&#8217;s name anywhere, it is presumed to be a HDPI icon for that size. This means that the pixel dimensions are twice as large for that icon then the size it is considered to be. Right now the string can occur anywhere, but future versions of the plugin may require it to be at the end of the name.</p>

<p>For example, a 16x16 icon named <code>shortcut.png</code> would be used as the shortcut icon. If there was another 512x512 icon named <code>shortcut-awesome.png</code> that icon would be used as well. And if a 1024x1024 icon was also in the correct directory and it was named <code>shortcutReallyAwesome@2x.png</code> then it would be a shortcut icon, at HDPI scale 2, used for the 512x512 icon. For a functional example of this see the <a href="https://bitbucket.org/shemnon/javafx-gradle/src/1bd371c2d4656d383636f84a37a5841e6894af23/samples/brickbreaker/src/deploy/package?at=master">brickbreaker</a> sample in the source code.</p>

<p><strong>Icons by Configuration</strong></p>

<p>If you want to have the build script configure the icons you can do that as well. This will allow the re-use of icons across different usage kinds. There are two methods of configuration both of which are supported when using the configuration option.</p>

<p>The shorthand method involved adding an <code>icons</code> configuration setting inside the <code>javafx</code> configuration setting. Inside this configuration you set a value for each kind of icon you are using to either a string or list of strings. These strings will be resolved as files against the <code>src/deploy/package</code> directory. For example, from the <a href="https://bitbucket.org/shemnon/javafx-gradle/src/1bd371c2d465/samples/FullyExpressed/build.gradle?at=master#cl-92">FullyExpressed</a> sample (which is a junk project that turns every knob and flips every switch just to do it) the icons are configured like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>javafx {
</span><span class='line'>    /*. . . snip . . .*/
</span><span class='line'>    icons {
</span><span class='line'>        shortcut = ['shortcut-16.png', 'shortcut-32.png', 
</span><span class='line'>                    'shortcut-128.png', 'shortcut-256.png', 
</span><span class='line'>                    'shortcut-16@2x.png', 'shortcut-32@2x.png', 
</span><span class='line'>                    'shortcut-128@2x.png']
</span><span class='line'>        volume = 'javafx-icon.png'
</span><span class='line'>        setup = 'javafx-icon.png'
</span><span class='line'>    }
</span><span class='line'>    /*. . . snip . . .*/
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Like the conventional way the sizes of the icons are sniffed out and the HDPI icons all contain &#8216;@2x&#8217; at the end of their name. The icons also all must be PNG icons. Finally, remember that any text between the kind and the possible end of the name is not used by the plugin, unless it is the <code>@2x</code> at the end to tell the icon it is a HDPI icon.</p>

<p>If you need total control over the JNLP descriptor you can specify each one in an <code>icon</code> setting. You repeat the setting for each icon. You can then set each attribute individually. For example, form the same <a href="https://bitbucket.org/shemnon/javafx-gradle/src/bbe9d6ebe08d/samples/FullyExpressed/build.gradle?at=master#cl-99">FullyExpressed</a> sample the splash and selected icons are configured manually.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>javafx {
</span><span class='line'>    /*. . . snip . . .*/
</span><span class='line'>    icon {
</span><span class='line'>        href = 'src/main/resources/javafx-icon.png'
</span><span class='line'>        kind = 'splash'
</span><span class='line'>        width = 128
</span><span class='line'>        height = 128
</span><span class='line'>    }
</span><span class='line'>    icon {
</span><span class='line'>        href = 'shortcut-32@2x.png'
</span><span class='line'>        kind = 'selected'
</span><span class='line'>        width = 16
</span><span class='line'>        height = 16
</span><span class='line'>        scale = 1
</span><span class='line'>    }
</span><span class='line'>    /*. . . snip . . .*/
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><strong>Packager Defaults</strong></p>

<p>The defaults provided buy the JavaFX packaging library were not changed.  So if you see a grey embossed java coffee cup then the default for that icon has not been changed.</p>

<p>If you want to use the current code, you can add <code>apply from: 'https://repository-javafx-gradle-plugin.forge.cloudbees.com/snapshot/javafx.plugin</code> to the top of your gradle file.  Or you can wait a few days until I push the bits to BinTray.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Gradle Plugin 0.1.0 Released]]></title>
    <link href="http://speling.shemnon.com//blog/2013/01/08/javafx-gradle-plugin-0-dot-1-0-released/"/>
    <updated>2013-01-08T22:24:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2013/01/08/javafx-gradle-plugin-0-dot-1-0-released</id>
    <content type="html"><![CDATA[<p>I just spun and released the 0.1.0 version of my JavaFX Gradle plugin.  There is only one new feature: ScenicView integration.  The rest is behind the scenes work where I am moving away from the Ant tasks.  I also updated some of the web scripts to launch it.</p>

<!-- more -->


<p><strong>Scenic View</strong></p>

<p>As mentioned in a <a href="http://speling.shemnon.com/blog/2012/11/25/scenic-view-in-the-gradle-plugin/">previous post</a> the plugin now integrates the Scenic View libraries.  This is the easiest way I know of to launch it on a Mac, since the auto-connect still seems to be a bit wonky.</p>

<p><strong>Escaping the Legacy of Ant</strong></p>

<p>Ant was awesome.  Especially in the Twentieth Century when it was first written.  And for a good number of years after Y2K failed to end the world.  It gave us a Rosetta Stone by which all build systems could access an invoke a given task.  The problem is that it is usually just a proxy for more powerful features just under the surface.  Since Oracle has been living up to their commitment of releasing more of JavaFX as open source I can now <a href="http://hg.openjdk.java.net/openjfx/8/master/rt/file/e25ee61a987d/deploy/packager/">look and see</a> exactly how the JavaFX packager Ant tasks are working.</p>

<p>The first step is to replicate what was functioning through the 0.0.0 release directly without going through the Ant tasks.  The next task, for the 0.2.0 releases, is to expose more of the knobs and switches that the Ant tasks didn&#8217;t expose.  Just the ones that make sense however.  Then after that I will look at adding more value-adds on top of the packager, like automatic icon generation.  This also opens the realm of writing other bundling options, even outside the realm of JavaFX such as XMLVM and other shiny technologies.  But I digress.</p>

<p><strong>Versioned Launch Scripts</strong></p>

<p>To support using the classes directly in the build file I added a couple of dependencies into the plugin script.  Hence I have added versioning information into the URLs of the launch scripts so these dependencies don&#8217;t bleed into unneeded versions.  If you want the latest and greatest all the time continue to use the version free URL:</p>

<pre><code>apply from: 'https://repository-javafx-gradle-plugin.forge.cloudbees.com/release/javafx.plugin'
</code></pre>

<p>The danger here is that I may change something that breaks your builds.  To lock into a particular version of the plugin, you can add the version just after release or snapshot:</p>

<pre><code>apply from: 'https://repository-javafx-gradle-plugin.forge.cloudbees.com/release/0.1.0/javafx.plugin'
</code></pre>

<p>Note that if you are using a snapshot URL you need the <code>-SNAPSHOT</code> in the url as well</p>

<pre><code>apply from: 'https://repository-javafx-gradle-plugin.forge.cloudbees.com/snapshot/0.2.0-SNAPSHOT/javafx.plugin'
</code></pre>

<p>Of course you can always do a copy and paste of the content of these scripts.  This is useful for network disconnected builds.</p>

<p><strong>Roadmap</strong></p>

<p>I intend to call whatever is out and running when Java 8 ships the &#8220;1.0&#8221; version.  At that time I will no longer make it a point to have it work on Java 7 versions of JavaFX.  There is so much new and awesome stuff coming in version 8 that it will be hard to not use it.  Until then expect sporadic and unpredictable updates as my schedule allows.</p>

<p>As previously stated for the 0.2.0 release I intend to expose more of the packager interfaces that make sense.  I also intend to make the plugin more Gradle &#8220;idiomatic&#8221; with the help of <a href="http://twitter.com/MrHaKi">@MrHaki</a>&#8217;s <a href="http://www.packtpub.com/gradle-effective-implementation-guide/book">Gradle Effective Implementation Guide</a>.  Apparently I am doing the JavaFX convention wrong in the code and I should be using ExtensionContainer or something to that effect.  I&#8217;ll let you know more after I read up on it.</p>

<p>I also like feedback, that is why I turned on the <a href="https://bitbucket.org/shemnon/javafx-gradle/issues">bug tracker</a> that BitBucket provides.  While I cannot commit to fix every bug immediately I will look at all patches and pull requests with a bias towards committing them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mirroring OpenJFX on BitBucket, an Update]]></title>
    <link href="http://speling.shemnon.com//blog/2012/12/20/mirroring-openjfx-on-bitbucket-an-update/"/>
    <updated>2012-12-20T20:18:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2012/12/20/mirroring-openjfx-on-bitbucket-an-update</id>
    <content type="html"><![CDATA[<p>This is a quick update on my mirrors of OpenJFX on BitBucket.  I&#8217;ve moved some stuff around and automated it a bit.  I am also retiring my &#8220;combined&#8221; repo that would merge the master, graphics, and controls scrums together.  It got messy with multiple heads and bookmarks, and given the weekly merging the two scrums do wasn&#8217;t really adding any value.</p>

<!-- more -->


<p><strong>Updates on Names</strong></p>

<p>The first major change that I did was to move the mirrors off of my personal account onto a team account named <a href="https://bitbucket.org/openjfxmirrors">&#8216;OpenJFX Mirrors&#8217;</a>.  That landing page is kind of ugly, so I created a repo to hold a wiki whose only page right now <a href="https://bitbucket.org/openjfxmirrors/mirrors/wiki/Home">describes the current mirrors</a>.</p>

<p>One advantage of the name change is that it allows for more participation.  On the free bitbucket account up to 4 other people can be added in to manage things.  There is also the marketing advantage of saying the BitBucket &#8220;team&#8221; is dedicated to mirroring OpenJFX, and that it is more than one of my many repos on BitBucket (I have many private repos).</p>

<p>There is a standard mapping of the OpenJDK repos to the BitBucket repos.  Basically you change the prefix and then replaces slashes with dashes.  For example this URL:</p>

<pre><code>https://hg.openjdk.java.net/openjfx/8/controls/rt
</code></pre>

<p>is mirrored to this URL:</p>

<pre><code>https://bitbucket.org/openjfxmirrors/openjfx-8-controls-rt
</code></pre>

<p>It is important to note that not every OpenJFX Repo is mirrored.  Right now I only mirror the Version 8 branches.  Of the 2.x line I only consider 2.2.6 to be worthy of mirroring, and then since it is just bug fixes and not feature adds I consider it less interesting.</p>

<p><strong>Automation</strong></p>

<p>The second major change is that I have automated the update of the repos.  Before I had a shell script on my MacBook Air that would do the pulling and pushing of the repo data.  It was slick and easy, but it required me opening up my Macbook air once in a while.  At my old job it was a more than daily occurrence.  But since I am starting up new work at Fluke Networks I have more interesting things to do all day than keeping up to date on all of Reddit&#8217;s Advice Animals.</p>

<p>Writing this script is incredibly simple.  At the core of the loop are the two real commands that get work done:</p>

<pre><code>hg pull
hg push
</code></pre>

<p>That&#8217;s all.  And I am not just pushing the repo back onto itself.  Mercurial comes with the concept of a <em>default push</em> repository.  Pulls come from the default, and pushes by default go to the default push repo, or just the default repo if not set.  The <code>.hg/hgrc</code> file contains this mapping:</p>

<pre><code>[paths]
default = http://hg.openjdk.java.net/openjfx/8/controls/rt
default-push = ssh://hg@bitbucket.org/openjfxmirrors/openjfx-8-controls-rt
</code></pre>

<p>Of note is that I use the SSH mapping with a public key so the script is never asked for my user password and never knows about it to begin with.</p>

<p><strong>Props to CloudBees and Atlassian</strong></p>

<p>None of this would have been possible without the gracious donation of disk space and processing time from two names you should already know.  Atlassian and CloudBees.</p>

<p><a href="http://www.atlassian.com/">Atlassian</a> owns and operates the <a href="https://bitbucket.org/">BitBucket</a> service, which hosts the Mercurial repositories that I am using to mirror.  The point of this mirroring is that the UI at BitBucket is orders of magnitude better than the one you get at OpenJDK.  Visualizing the changes and examining the source files is actually possible with this interface.</p>

<p>The automation is hosted over at <a href="http://www.cloudbees.com/">CloudBees</a> on their eponymous cloud build platform. It is awesome of them to offer free build server time to open source projects.  I even have one of their technical running shirts I snagged at JavaOne this year.  (And I promise it will get more use as a running shirt next year).</p>

<p>Give these companies some of your business, they deserve it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TextFlow for Fun and Profit]]></title>
    <link href="http://speling.shemnon.com//blog/2012/12/10/textflow-for-fun-and-profit/"/>
    <updated>2012-12-10T21:10:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2012/12/10/textflow-for-fun-and-profit</id>
    <content type="html"><![CDATA[<p>One of the newer features for JavaFX is the new <a href="https://wikis.oracle.com/display/OpenJDK/Rich+Text+API+Samples">TextFlow</a> node.  Revealed at JavaOne San Francisco this is the generel solution to a rich text component in JavaFX.</p>

<p>This also happens to fit in nicely with my planned hobby project for the next few months.  The deck control was one part, and the ability to take MarkDown into a JavaFX node is another important part of the equation.  To prototype this I wrote a little toy app I call <a href="https://bitbucket.org/shemnon/flowdown">FlowDown</a></p>

<!-- more -->


<p><strong>FlowPane turns the corner</strong></p>

<p>TextFlow at it&#8217;s core is a lot like <a href="http://docs.oracle.com/javafx/2/api/index.html?javafx/scene/layout/FlowPane.html">FlowPane</a>.  The children are laid out in order from the leading edge to the training edge.  When it reaches the edge of the component it goes to the next row and continues to lay out it&#8217;s children.  What is different about TextFlow is that if the next child is a Text node it will fit as much of it as it can in the current row, and then take the remainder to the next row. And if needed it will flow the content across multiple rows to fit the constrained width.  So large long paragraphs of text now take only one node, whereas before you had to resort to tricks that essentially created one node per word.</p>

<p><img src="http://speling.shemnon.com//images/FlowDown.png" alt="FlowDown in action" /></p>

<p><strong>Caution: Beta Code Ahead</strong></p>

<p>To use this toy app you will need one of the more current builds of <a href="http://jdk8.java.net/download.html">JDK8</a> newer than build 66 (build 67 was the current one as of this post).  But this is an early access build which means you cannot distribute it and other things may be broken (like copy and paste on OSX).</p>

<p>The markdown previewer itself is also beta.  Problems include ordered lists not being numbered, and list layout in general being wonky.  Feel free to <a href="https://bitbucket.org/shemnon/flowdown/issues?status=new&amp;status=open">post issues</a>.  Since markdown to JFX nodes is something that may be generally useful I do see myself making a component out of.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scenic View in the Gradle JavaFX Plugin]]></title>
    <link href="http://speling.shemnon.com//blog/2012/11/25/scenic-view-in-the-gradle-plugin/"/>
    <updated>2012-11-25T13:42:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2012/11/25/scenic-view-in-the-gradle-plugin</id>
    <content type="html"><![CDATA[<p>While I really like the <a href="http://fxexperience.com/scenic-view/">Scenic View</a> application that Jasper, Richard, and Jonathan have put together I do have to say getting it working is a bit of a struggle.  But like most things I wind up blogging about this is something that can be fixed with a little bit of magical Gradle dust.</p>

<!-- more -->


<p><strong>Skinning the Cat</strong></p>

<p>Getting Scenic view to work shouldn&#8217;t be a struggle since there are three ways to start it up.  Well the fact there are three ways may be part of the problem actually.  The first is to rely on auto-discovery.  This is the same thing that JVisualVM relies on.  However this doesn&#8217;t work for me since I do my personal hacking on a MacBook Air, and the auto-discovery isn&#8217;t as reliable as it is on Windows machines.  I.e. you get the mac experience of it &#8216;just working&#8217; on windows but no mac.  To be fair, this is option number three on the list and they openly admit it&#8217;s not the best choice currently.</p>

<p>Another option is to bundle in the jar and explicitly start the scenic view.  The code is incredibly terse and has no real dependencies on your application code, except that the code needs to be run and the node to view.  The downside here is that you always need the code available to compile and you always need the line in your code.  You can hide the invocation with bear-claw clicks and keystrokes but the burden remains on you to either properly hide it or strip the code before you publish.</p>

<p>The last option, and the preferable one according to the docs, is to add the scenic view code as a java agent to your JVM.  This is very reliable method but it has a very specific incantation you need to add to your launch command.  And to add on to the troubles, there is no standard place this jar files live, it lives where you drop it.  And old man Murphy says that you cannot depend on others placing it in the same place, unless you do it for them.</p>

<p><strong>Integrations with Gradle</strong></p>

<p>The first problem is that this program is not released into Maven Central.  With gradle we can punt on running a maven repository and just upload it to an ivy repository.  In this case I am doubling up with the <a href="https://repository-javafx-gradle-plugin.forge.cloudbees.com/release/">Gradle JavaFX Plugin</a> repository.  Unlike the FXExperience Tools the code isn&#8217;t in a public repo so I cannot guess the license.  I&#8217;ll err on the side of sharing.</p>

<p>The next problem is getting the jar local.  I tried several approaches.  I don&#8217;t need the jar at build time for the plugin.  And adding it to the plugin dependencies creates some unneeded weirdness for application build scripts.  Finally what I settled on was to dynamically alter the gradle script via the DSL.  As <a href="https://bitbucket.org/shemnon/javafx-gradle/changeset/4dd2ff67e69410802306948ef097caf4#Lplugin/src/main/groovy/com/bitbucket/shemnon/javafxplugin/JavaFXPlugin.groovyT233">part of the task</a> I create a new configuration, add a new repository, and add a dependency to that configuration,  Then I find all the tasks that are considered execution tasks and I prepend the needed agent string with the local cached copy of the scenic view jar.  Did you catch and understand all of that?  Don&#8217;t worry, you don&#8217;t need to understand the magic to use it.</p>

<p>This task will be part of the next release of the plugin.  If you are using the snapshot script you already have it.</p>

<p><strong>Too Long; Didn&#8217;t Read</strong></p>

<p>To use scenic view with the gradle plugin just add the task <code>scenicview</code> before your execution task.  Really you have two options.  If you are not attaching a debugger:</p>

<pre><code>gradle scenicview run
</code></pre>

<p>if you are attaching a debugger:</p>

<pre><code>gradle scenicview debug
</code></pre>

<p>There will be no random jars added into your released code as long as you stick with the above incantations.  And it will magically work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Gradle Plugin 0.0.0 Released]]></title>
    <link href="http://speling.shemnon.com//blog/2012/11/07/javafx-gradle-plugin-0.0.0-released/"/>
    <updated>2012-11-07T20:21:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2012/11/07/javafx-gradle-plugin-0.0.0-released</id>
    <content type="html"><![CDATA[<p>I haven&#8217;t&#8217; done much to promote it yet, but I feel I have written enough to announce that I have written a JavaFX 2.0 Plugin for Gradle.  Better documentation will follow, but this is the announcement getting it out there,  After all this is just an oh dot oh dot oh.</p>

<p><strong>Real Computer Scientists Count from Zero</strong></p>

<p>Why the 0.0.0 release?  Well, real computer scientists count from zero.  The vending machines in the computer science building at my university started with zero on the left, then one and two and so on.  And when software is released the &#8216;oh dots&#8217; precede the &#8216;one dot oh&#8217;, clearly establishing that the digit on the right should be zero.  So why are first releases 0.1 or 0.0.1?  It&#8217;s not the second release, it&#8217;s the first release!  So start at the first index: Zero!  Why three numbers?  I blame OSGi.  And blame is the correct word, not credit.</p>

<!-- more -->


<p>All silliness aside, the plugin is actually useful.  It takes care of a lot of the JavaFX package stuff, you know, magically.  Magically in the sense that if you saw it happen you would know what is going on, but you don&#8217;t see it so you applaud and say &#8216;what a neat magic trick.&#8217;</p>

<p><strong>Getting Started</strong></p>

<p>I&#8217;m going to assume you already know a little about Gradle, and also that you know about the <code>src/main/java</code> and <code>src/main/resources</code> conventions from Maven.  Once you set your source files up in those directories set up your <code>build.gradle</code> file by installing the plugin.  There are two options for installing the plugin: you can apply it explicitly, or you can use a nifty script shortcut I learned from a <a href="https://github.com/johndevs/gradle-vaadin-plugin">Vaadin Gradle plugin</a> I found.</p>

<p>Short way:</p>

<div><script src='https://gist.github.com/4036870.js?file=build-from.gradle'></script>
<noscript><pre><code>apply from: 'https://repository-javafx-gradle-plugin.forge.cloudbees.com/release/javafx.plugin'
</code></pre></noscript></div>


<p>Long way:</p>

<div><script src='https://gist.github.com/4036870.js?file=build-plugin.gradle'></script>
<noscript><pre><code>buildscript {
    repositories {
        mavenLocal()
        ivy { 
            url = 'http://repository-javafx-gradle-plugin.forge.cloudbees.com/release'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'com.bitbucket.shemnon.javafxplugin:plugin:0.0.0'
    }
}

apply plugin: 'javafx'</code></pre></noscript></div>


<p>The short way just brings in a script from the repository that does everything the long way.  The advantage of the long way is you won&#8217;t get surprised when the JavaFX plugin gets updated to the latest version.  The advantage of the short way is that it is more terse (except that the url is kinda long).</p>

<p><strong>Configurations and Conventions</strong></p>

<p>Remember two weeks ago when I talked about <a href="http://speling.shemnon.com/blog/2012/10/23/conventions-and-configurations/">Conventions and Configurations</a>?  Well, if you named your main class <code>Main</code> and placed it in a directory matching the directory of your project, your configuration is done.  <a href="https://bitbucket.org/shemnon/javafx-gradle/src/9eef1086856bd5cd00fe4e58d4a7f8fb13b0fdff/samples/brickbreaker/build.gradle?at=release_0.0.0">No, Really!</a>.  The package is actually the <code>group</code> of your project, which can be set via a <code>group = 'com.example.whatever'</code> statement in your script.  You can also name the main class whatever you want via the <code>javafx</code> convention.</p>

<div><script src='https://gist.github.com/4036870.js?file=build-main.gradle'></script>
<noscript><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head prefix=&quot;og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# githubog: http://ogp.me/ns/fb/githubog#&quot;&gt;
    &lt;meta charset='utf-8'&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
        &lt;title&gt;404 · GitHub&lt;/title&gt;
    &lt;link rel=&quot;search&quot; type=&quot;application/opensearchdescription+xml&quot; href=&quot;/opensearch.xml&quot; title=&quot;GitHub&quot; /&gt;
    &lt;link rel=&quot;fluid-icon&quot; href=&quot;https://raw.github.com/fluidicon.png&quot; title=&quot;GitHub&quot; /&gt;
    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;57x57&quot; href=&quot;apple-touch-icon-114.png&quot; /&gt;
    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;apple-touch-icon-114.png&quot; /&gt;
    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;apple-touch-icon-144.png&quot; /&gt;
    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;apple-touch-icon-144.png&quot; /&gt;
    &lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;/windows-tile.png&quot;&gt;
    &lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#ffffff&quot;&gt;

    
    
    &lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;/favicon.ico&quot; /&gt;

    

    &lt;link href=&quot;https://a248.e.akamai.net/assets.github.com/assets/github-359c875812e7e2caefea930512457a0267ef3e87.css&quot; media=&quot;screen&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
    &lt;link href=&quot;https://a248.e.akamai.net/assets.github.com/assets/github2-69262a6bc53331da6e8dc792fc1ce3b074c54135.css&quot; media=&quot;screen&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
    


    &lt;script src=&quot;https://a248.e.akamai.net/assets.github.com/assets/frameworks-28923941200b998a3e7422badab5b9be240f9be4.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://a248.e.akamai.net/assets.github.com/assets/github-194b92b1c9e2a5b90553a492f2b85e8d903b350c.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
    

    
  &lt;/head&gt;


  &lt;body class=&quot;logged_out    env-production &quot;&gt;
    &lt;div id=&quot;wrapper&quot;&gt;

    
    

    

      &lt;div id=&quot;header&quot; class=&quot;true clearfix&quot;&gt;
        &lt;div class=&quot;container clearfix&quot;&gt;
          &lt;a class=&quot;site-logo &quot; href=&quot;https://raw.github.com/&quot;&gt;
            &lt;img alt=&quot;GitHub&quot; class=&quot;github-logo-4x&quot; height=&quot;30&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/header/logov7@4x.png?1337118066&quot; /&gt;
            &lt;img alt=&quot;GitHub&quot; class=&quot;github-logo-4x-hover&quot; height=&quot;30&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/header/logov7@4x-hover.png?1337118066&quot; /&gt;
          &lt;/a&gt;


                  &lt;!--
      make sure to use fully qualified URLs here since this nav
      is used on error pages on other domains
    --&gt;
    &lt;ul class=&quot;top-nav logged_out&quot;&gt;
        &lt;li class=&quot;pricing&quot;&gt;&lt;a href=&quot;https://github.com/plans&quot;&gt;Signup and Pricing&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&quot;explore&quot;&gt;&lt;a href=&quot;https://github.com/explore&quot;&gt;Explore GitHub&lt;/a&gt;&lt;/li&gt;
      &lt;li class=&quot;features&quot;&gt;&lt;a href=&quot;https://github.com/features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&quot;blog&quot;&gt;&lt;a href=&quot;https://github.com/blog&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt;
      &lt;li class=&quot;login&quot;&gt;&lt;a href=&quot;https://github.com/login?return_to=%2Fgist%2F4036870%2Fbuild-main.gradle&quot;&gt;Sign in&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;



          
        &lt;/div&gt;
      &lt;/div&gt;

      

      


        &lt;div class=&quot;site clearfix&quot;&gt;
          &lt;div id=&quot;site-container&quot; class=&quot;context-loader-container&quot; data-pjax-container&gt;
            
            

&lt;style type=&quot;text/css&quot;&gt;
    #header{
        border-bottom: 0;
    }
    .site {
        padding: 0;
    }
    #site-container {
        width: 100%;
    }
    * {
        margin: 0px;
        padding: 0px;
    }
    #parallax_wrapper {
      position: relative;
      z-index: 0;
      margin-bottom: 50px;
    }
    #parallax_field{
        overflow: hidden;
        position: absolute;
        left: 0;
        top: 0;
        height: 370px;
        width: 100%;
    }
    #parallax_field #parallax_bg {
        position: absolute;
        top: -20px;
        left: -20px;
        width: 110%;
        height: 425px;
        z-index: 1;
    }
    #parallax_illustration {
        display: block;
        margin: 0 auto;
        width: 940px;
        height: 370px;
        position: relative;
        overflow: hidden;
        clear: both;
    }
    #parallax_illustration #parallax_error_text {
        position: absolute;
        top: 72px;
        left: 72px;
        z-index: 10;
    }
    #parallax_illustration #parallax_octocat {
        position: absolute;
        top: 94px;
        left: 356px;
        z-index: 9;
    }
    #parallax_illustration #parallax_speeder {
        position: absolute;
        top: 150px;
        left: 432px;
        z-index: 8;
    }
    #parallax_illustration #parallax_octocatshadow {
        position: absolute;
        top: 297px;
        left: 371px;
        z-index: 7;
    }
    #parallax_illustration #parallax_speedershadow {
        position: absolute;
        top: 263px;
        left: 442px;
        z-index: 6;
    }
    #parallax_illustration #parallax_building_1 {
        position: absolute;
        top: 73px;
        left: 467px;
        z-index: 5;
    }
    #parallax_illustration #parallax_building_2 {
        position: absolute;
        top: 113px;
        left: 762px;
        z-index: 4;
    }
    #footer-push {
      height: 280px;
    }
    #footer {
        margin-top: 0px;
        z-index: 12;
    }
&lt;/style&gt;

&lt;div id=&quot;parallax_wrapper&quot;&gt;

&lt;div id=&quot;parallax_field&quot;&gt;
    &lt;img alt=&quot;building&quot; class=&quot;js-plaxify&quot; data-invert=&quot;true&quot; data-xrange=&quot;0&quot; data-yrange=&quot;20&quot; height=&quot;415&quot; id=&quot;parallax_bg&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_bg.jpg?1334862345&quot; width=&quot;940&quot; /&gt;
&lt;/div&gt;
&lt;div id=&quot;parallax_illustration&quot;&gt;
  &lt;img alt=&quot;404 | &amp;ldquo;This is not the web page you are looking for&amp;rdquo;&quot; class=&quot;js-plaxify&quot; data-xrange=&quot;20&quot; data-yrange=&quot;10&quot; height=&quot;249&quot; id=&quot;parallax_error_text&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_errortext.png?1334862345&quot; width=&quot;271&quot; /&gt;
  &lt;img alt=&quot;Octobi Wan Catnobi&quot; class=&quot;js-plaxify&quot; data-xrange=&quot;10&quot; data-yrange=&quot;10&quot; height=&quot;230&quot; id=&quot;parallax_octocat&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_octocat.png?1334862345&quot; width=&quot;188&quot; /&gt;
  &lt;img alt=&quot;land speeder&quot; class=&quot;js-plaxify&quot; data-xrange=&quot;10&quot; data-yrange=&quot;10&quot; height=&quot;156&quot; id=&quot;parallax_speeder&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_speeder.png?1334862345&quot; width=&quot;440&quot; /&gt;
  &lt;img alt=&quot;Octobi Wan Catnobi's shadow&quot; class=&quot;js-plaxify&quot; data-xrange=&quot;10&quot; data-yrange=&quot;10&quot; height=&quot;49&quot; id=&quot;parallax_octocatshadow&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_octocatshadow.png?1334862345&quot; width=&quot;166&quot; /&gt;
  &lt;img alt=&quot;land speeder's shadow&quot; class=&quot;js-plaxify&quot; data-xrange=&quot;10&quot; data-yrange=&quot;10&quot; height=&quot;75&quot; id=&quot;parallax_speedershadow&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_speedershadow.png?1334862345&quot; width=&quot;430&quot; /&gt;
  &lt;img alt=&quot;building&quot; class=&quot;js-plaxify&quot; data-invert=&quot;true&quot; data-xrange=&quot;50&quot; data-yrange=&quot;20&quot; height=&quot;123&quot; id=&quot;parallax_building_1&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_building_1.png?1334862345&quot; width=&quot;304&quot; /&gt;
  &lt;img alt=&quot;building&quot; class=&quot;js-plaxify&quot; data-invert=&quot;true&quot; data-xrange=&quot;75&quot; data-yrange=&quot;30&quot; height=&quot;50&quot; id=&quot;parallax_building_2&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/404/parallax_building_2.png?1334862345&quot; width=&quot;116&quot; /&gt;
&lt;/div&gt;

&lt;/div&gt;

          &lt;/div&gt;
          &lt;div class=&quot;context-overlay&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;div id=&quot;footer-push&quot;&gt;&lt;/div&gt;&lt;!-- hack for sticky footer --&gt;
    &lt;/div&gt;&lt;!-- end of wrapper - hack for sticky footer --&gt;

      &lt;!-- footer --&gt;
      &lt;div id=&quot;footer&quot; &gt;
        
  &lt;div class=&quot;upper_footer&quot;&gt;
     &lt;div class=&quot;container clearfix&quot;&gt;

       &lt;h4 id=&quot;blacktocat&quot;&gt;GitHub Links&lt;/h4&gt;

       &lt;ul class=&quot;footer_nav&quot;&gt;
         &lt;h4&gt;GitHub&lt;/h4&gt;
         &lt;li&gt;&lt;a href=&quot;https://github.com/about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;https://github.com/blog&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;https://github.com/features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;https://github.com/contact&quot;&gt;Contact &amp;amp; Support&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://training.github.com/&quot;&gt;Training&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://enterprise.github.com/&quot;&gt;GitHub Enterprise&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://status.github.com/&quot;&gt;Site Status&lt;/a&gt;&lt;/li&gt;
       &lt;/ul&gt;

       &lt;ul class=&quot;footer_nav&quot;&gt;
         &lt;h4&gt;Clients&lt;/h4&gt;
         &lt;li&gt;&lt;a href=&quot;http://mac.github.com/&quot;&gt;GitHub for Mac&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://windows.github.com/&quot;&gt;GitHub for Windows&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://eclipse.github.com/&quot;&gt;GitHub for Eclipse&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://mobile.github.com/&quot;&gt;GitHub Mobile Apps&lt;/a&gt;&lt;/li&gt;
       &lt;/ul&gt;

       &lt;ul class=&quot;footer_nav&quot;&gt;
         &lt;h4&gt;Tools&lt;/h4&gt;
         &lt;li&gt;&lt;a href=&quot;http://get.gaug.es/&quot;&gt;Gauges: Web analytics&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://speakerdeck.com&quot;&gt;Speaker Deck: Presentations&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;https://gist.github.com&quot;&gt;Gist: Code snippets&lt;/a&gt;&lt;/li&gt;

         &lt;h4 class=&quot;second&quot;&gt;Extras&lt;/h4&gt;
         &lt;li&gt;&lt;a href=&quot;http://jobs.github.com/&quot;&gt;Job Board&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://shop.github.com/&quot;&gt;GitHub Shop&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://octodex.github.com/&quot;&gt;The Octodex&lt;/a&gt;&lt;/li&gt;
       &lt;/ul&gt;

       &lt;ul class=&quot;footer_nav&quot;&gt;
         &lt;h4&gt;Documentation&lt;/h4&gt;
         &lt;li&gt;&lt;a href=&quot;http://help.github.com/&quot;&gt;GitHub Help&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://developer.github.com/&quot;&gt;Developer API&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://github.github.com/github-flavored-markdown/&quot;&gt;GitHub Flavored Markdown&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;&lt;/li&gt;
       &lt;/ul&gt;

     &lt;/div&gt;&lt;!-- /.site --&gt;
  &lt;/div&gt;&lt;!-- /.upper_footer --&gt;

&lt;div class=&quot;lower_footer&quot;&gt;
  &lt;div class=&quot;container clearfix&quot;&gt;
    &lt;div id=&quot;legal&quot;&gt;
      &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/site/terms&quot;&gt;Terms of Service&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/site/privacy&quot;&gt;Privacy&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/security&quot;&gt;Security&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;

      &lt;p&gt;&amp;copy; 2012 &lt;span title=&quot;0.02099s from fe13.rs.github.com&quot;&gt;GitHub&lt;/span&gt; Inc. All rights reserved.&lt;/p&gt;
    &lt;/div&gt;&lt;!-- /#legal or /#legal_ie--&gt;

  &lt;/div&gt;&lt;!-- /.site --&gt;
&lt;/div&gt;&lt;!-- /.lower_footer --&gt;


      &lt;/div&gt;&lt;!-- /#footer --&gt;

    

&lt;div id=&quot;keyboard_shortcuts_pane&quot; class=&quot;instapaper_ignore readability-extra&quot; style=&quot;display:none&quot;&gt;
  &lt;h2&gt;Keyboard Shortcuts &lt;small&gt;&lt;a href=&quot;#&quot; class=&quot;js-see-all-keyboard-shortcuts&quot;&gt;(see all)&lt;/a&gt;&lt;/small&gt;&lt;/h2&gt;

  &lt;div class=&quot;columns threecols&quot;&gt;
    &lt;div class=&quot;column first&quot;&gt;
      &lt;h3&gt;Site wide shortcuts&lt;/h3&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;s&lt;/dt&gt;
        &lt;dd&gt;Focus command bar&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;?&lt;/dt&gt;
        &lt;dd&gt;Bring up this help dialog&lt;/dd&gt;
      &lt;/dl&gt;
    &lt;/div&gt;&lt;!-- /.column.first --&gt;

    &lt;div class=&quot;column middle&quot; style='display:none'&gt;
      &lt;h3&gt;Commit list&lt;/h3&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;j&lt;/dt&gt;
        &lt;dd&gt;Move selection down&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;k&lt;/dt&gt;
        &lt;dd&gt;Move selection up&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;c &lt;em&gt;or&lt;/em&gt; o &lt;em&gt;or&lt;/em&gt; enter&lt;/dt&gt;
        &lt;dd&gt;Open commit&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;y&lt;/dt&gt;
        &lt;dd&gt;Expand URL to its canonical form&lt;/dd&gt;
      &lt;/dl&gt;
    &lt;/div&gt;&lt;!-- /.column.first --&gt;

    &lt;div class=&quot;column last js-hidden-pane&quot; style='display:none'&gt;
      &lt;h3&gt;Pull request list&lt;/h3&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;j&lt;/dt&gt;
        &lt;dd&gt;Move selection down&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;k&lt;/dt&gt;
        &lt;dd&gt;Move selection up&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;o &lt;em&gt;or&lt;/em&gt; enter&lt;/dt&gt;
        &lt;dd&gt;Open issue&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;&lt;span class=&quot;platform-mac&quot;&gt;⌘&lt;/span&gt;&lt;span class=&quot;platform-other&quot;&gt;ctrl&lt;/span&gt; &lt;em&gt;+&lt;/em&gt; enter&lt;/dt&gt;
        &lt;dd&gt;Submit comment&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;dl class=&quot;keyboard-mappings&quot;&gt;
        &lt;dt&gt;&lt;span class=&quot;platform-mac&quot;&gt;⌘&lt;/span&gt;&lt;span class=&quot;platform-other&quot;&gt;ctrl&lt;/span&gt; &lt;em&gt;+&lt;/em&gt; shift p&lt;/dt&gt;
        &lt;dd&gt;Preview comment&lt;/dd&gt;
      &lt;/dl&gt;
    &lt;/div&gt;&lt;!-- /.columns.last --&gt;

  &lt;/div&gt;&lt;!-- /.columns.equacols --&gt;

  &lt;div class=&quot;js-hidden-pane&quot; style='display:none'&gt;
    &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;

    &lt;h3&gt;Issues&lt;/h3&gt;

    &lt;div class=&quot;columns threecols&quot;&gt;
      &lt;div class=&quot;column first&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;j&lt;/dt&gt;
          &lt;dd&gt;Move selection down&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;k&lt;/dt&gt;
          &lt;dd&gt;Move selection up&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;x&lt;/dt&gt;
          &lt;dd&gt;Toggle selection&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;o &lt;em&gt;or&lt;/em&gt; enter&lt;/dt&gt;
          &lt;dd&gt;Open issue&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;platform-mac&quot;&gt;⌘&lt;/span&gt;&lt;span class=&quot;platform-other&quot;&gt;ctrl&lt;/span&gt; &lt;em&gt;+&lt;/em&gt; enter&lt;/dt&gt;
          &lt;dd&gt;Submit comment&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;platform-mac&quot;&gt;⌘&lt;/span&gt;&lt;span class=&quot;platform-other&quot;&gt;ctrl&lt;/span&gt; &lt;em&gt;+&lt;/em&gt; shift p&lt;/dt&gt;
          &lt;dd&gt;Preview comment&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;&lt;!-- /.column.first --&gt;
      &lt;div class=&quot;column last&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;c&lt;/dt&gt;
          &lt;dd&gt;Create issue&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;l&lt;/dt&gt;
          &lt;dd&gt;Create label&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;i&lt;/dt&gt;
          &lt;dd&gt;Back to inbox&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;u&lt;/dt&gt;
          &lt;dd&gt;Back to issues&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;/&lt;/dt&gt;
          &lt;dd&gt;Focus issues search&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;js-hidden-pane&quot; style='display:none'&gt;
    &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;

    &lt;h3&gt;Issues Dashboard&lt;/h3&gt;

    &lt;div class=&quot;columns threecols&quot;&gt;
      &lt;div class=&quot;column first&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;j&lt;/dt&gt;
          &lt;dd&gt;Move selection down&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;k&lt;/dt&gt;
          &lt;dd&gt;Move selection up&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;o &lt;em&gt;or&lt;/em&gt; enter&lt;/dt&gt;
          &lt;dd&gt;Open issue&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;&lt;!-- /.column.first --&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;js-hidden-pane&quot; style='display:none'&gt;
    &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;

    &lt;h3&gt;Network Graph&lt;/h3&gt;
    &lt;div class=&quot;columns equacols&quot;&gt;
      &lt;div class=&quot;column first&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;badmono&quot;&gt;←&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; h&lt;/dt&gt;
          &lt;dd&gt;Scroll left&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;badmono&quot;&gt;→&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; l&lt;/dt&gt;
          &lt;dd&gt;Scroll right&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;badmono&quot;&gt;↑&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; k&lt;/dt&gt;
          &lt;dd&gt;Scroll up&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;badmono&quot;&gt;↓&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; j&lt;/dt&gt;
          &lt;dd&gt;Scroll down&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;t&lt;/dt&gt;
          &lt;dd&gt;Toggle visibility of head labels&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;&lt;!-- /.column.first --&gt;
      &lt;div class=&quot;column last&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;shift &lt;span class=&quot;badmono&quot;&gt;←&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; shift h&lt;/dt&gt;
          &lt;dd&gt;Scroll all the way left&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;shift &lt;span class=&quot;badmono&quot;&gt;→&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; shift l&lt;/dt&gt;
          &lt;dd&gt;Scroll all the way right&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;shift &lt;span class=&quot;badmono&quot;&gt;↑&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; shift k&lt;/dt&gt;
          &lt;dd&gt;Scroll all the way up&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;shift &lt;span class=&quot;badmono&quot;&gt;↓&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; shift j&lt;/dt&gt;
          &lt;dd&gt;Scroll all the way down&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;&lt;!-- /.column.last --&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;js-hidden-pane&quot; style='display:none'&gt;
    &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;columns threecols&quot;&gt;
      &lt;div class=&quot;column first js-hidden-pane&quot; style='display:none'&gt;
        &lt;h3&gt;Source Code Browsing&lt;/h3&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;t&lt;/dt&gt;
          &lt;dd&gt;Activates the file finder&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;l&lt;/dt&gt;
          &lt;dd&gt;Jump to line&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;w&lt;/dt&gt;
          &lt;dd&gt;Switch branch/tag&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;y&lt;/dt&gt;
          &lt;dd&gt;Expand URL to its canonical form&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;js-hidden-pane&quot; style='display:none'&gt;
    &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;columns threecols&quot;&gt;
      &lt;div class=&quot;column first&quot;&gt;
        &lt;h3&gt;Browsing Commits&lt;/h3&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;&lt;span class=&quot;platform-mac&quot;&gt;⌘&lt;/span&gt;&lt;span class=&quot;platform-other&quot;&gt;ctrl&lt;/span&gt; &lt;em&gt;+&lt;/em&gt; enter&lt;/dt&gt;
          &lt;dd&gt;Submit comment&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;escape&lt;/dt&gt;
          &lt;dd&gt;Close form&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;p&lt;/dt&gt;
          &lt;dd&gt;Parent commit&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;o&lt;/dt&gt;
          &lt;dd&gt;Other parent commit&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;js-hidden-pane&quot; style='display:none'&gt;
    &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;
    &lt;h3&gt;Notifications&lt;/h3&gt;

    &lt;div class=&quot;columns threecols&quot;&gt;
      &lt;div class=&quot;column first&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;j&lt;/dt&gt;
          &lt;dd&gt;Move selection down&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;k&lt;/dt&gt;
          &lt;dd&gt;Move selection up&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;o &lt;em&gt;or&lt;/em&gt; enter&lt;/dt&gt;
          &lt;dd&gt;Open notification&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;&lt;!-- /.column.first --&gt;

      &lt;div class=&quot;column second&quot;&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;e &lt;em&gt;or&lt;/em&gt; shift i &lt;em&gt;or&lt;/em&gt; y&lt;/dt&gt;
          &lt;dd&gt;Mark as read&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl class=&quot;keyboard-mappings&quot;&gt;
          &lt;dt&gt;shift m&lt;/dt&gt;
          &lt;dd&gt;Mute thread&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;&lt;!-- /.column.first --&gt;
    &lt;/div&gt;
  &lt;/div&gt;

&lt;/div&gt;

    &lt;div id=&quot;markdown-help&quot; class=&quot;instapaper_ignore readability-extra&quot;&gt;
  &lt;h2&gt;Markdown Cheat Sheet&lt;/h2&gt;

  &lt;div class=&quot;cheatsheet-content&quot;&gt;

  &lt;div class=&quot;mod&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;h3&gt;Format Text&lt;/h3&gt;
      &lt;p&gt;Headers&lt;/p&gt;
      &lt;pre&gt;
# This is an &amp;lt;h1&amp;gt; tag
## This is an &amp;lt;h2&amp;gt; tag
###### This is an &amp;lt;h6&amp;gt; tag&lt;/pre&gt;
     &lt;p&gt;Text styles&lt;/p&gt;
     &lt;pre&gt;
*This text will be italic*
_This will also be italic_
**This text will be bold**
__This will also be bold__

*You **can** combine them*
&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;h3&gt;Lists&lt;/h3&gt;
      &lt;p&gt;Unordered&lt;/p&gt;
      &lt;pre&gt;
* Item 1
* Item 2
  * Item 2a
  * Item 2b&lt;/pre&gt;
     &lt;p&gt;Ordered&lt;/p&gt;
     &lt;pre&gt;
1. Item 1
2. Item 2
3. Item 3
   * Item 3a
   * Item 3b&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;h3&gt;Miscellaneous&lt;/h3&gt;
      &lt;p&gt;Images&lt;/p&gt;
      &lt;pre&gt;
![GitHub Logo](/images/logo.png)
Format: ![Alt Text](url)
&lt;/pre&gt;
     &lt;p&gt;Links&lt;/p&gt;
     &lt;pre&gt;
http://github.com - automatic!
[GitHub](http://github.com)&lt;/pre&gt;
&lt;p&gt;Blockquotes&lt;/p&gt;
     &lt;pre&gt;
As Kanye West said:

&gt; We're living the future so
&gt; the present is our past.
&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;rule&quot;&gt;&lt;/div&gt;

  &lt;h3&gt;Code Examples in Markdown&lt;/h3&gt;
  &lt;div class=&quot;col&quot;&gt;
      &lt;p&gt;Syntax highlighting with &lt;a href=&quot;http://github.github.com/github-flavored-markdown/&quot; title=&quot;GitHub Flavored Markdown&quot; target=&quot;_blank&quot;&gt;GFM&lt;/a&gt;&lt;/p&gt;
      &lt;pre&gt;
```javascript
function fancyAlert(arg) {
  if(arg) {
    $.facebox({div:'#foo'})
  }
}
```&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;p&gt;Or, indent your code 4 spaces&lt;/p&gt;
      &lt;pre&gt;
Here is a Python code example
without syntax highlighting:

    def foo:
      if not bar:
        return true&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;p&gt;Inline code for comments&lt;/p&gt;
      &lt;pre&gt;
I think you should use an
`&amp;lt;addr&amp;gt;` element here instead.&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;


    &lt;div id=&quot;ajax-error-message&quot; class=&quot;flash flash-error&quot;&gt;
      &lt;span class=&quot;mini-icon mini-icon-exclamation&quot;&gt;&lt;/span&gt;
      Something went wrong with that request. Please try again.
      &lt;a href=&quot;#&quot; class=&quot;mini-icon mini-icon-remove-close ajax-error-dismiss&quot;&gt;&lt;/a&gt;
    &lt;/div&gt;

    &lt;div id=&quot;logo-popup&quot;&gt;
      &lt;h2&gt;Looking for the GitHub logo?&lt;/h2&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;h4&gt;GitHub Logo&lt;/h4&gt;
          &lt;a href=&quot;http://github-media-downloads.s3.amazonaws.com/GitHub_Logos.zip&quot;&gt;&lt;img alt=&quot;Github_logo&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/about_page/github_logo.png?1334862345&quot; /&gt;&lt;/a&gt;
          &lt;a href=&quot;http://github-media-downloads.s3.amazonaws.com/GitHub_Logos.zip&quot; class=&quot;minibutton download&quot;&gt;Download&lt;/a&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;h4&gt;The Octocat&lt;/h4&gt;
          &lt;a href=&quot;http://github-media-downloads.s3.amazonaws.com/Octocats.zip&quot;&gt;&lt;img alt=&quot;Octocat&quot; src=&quot;https://a248.e.akamai.net/assets.github.com/images/modules/about_page/octocat.png?1334862345&quot; /&gt;&lt;/a&gt;
          &lt;a href=&quot;http://github-media-downloads.s3.amazonaws.com/Octocats.zip&quot; class=&quot;minibutton download&quot;&gt;Download&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;

    
    
    &lt;span id='server_response_time' data-time='0.02894' data-host='fe13'&gt;&lt;/span&gt;
    
  &lt;/body&gt;
&lt;/html&gt;
</code></pre></noscript></div>


<p>The documentation for the JavaFX conventions and tasks are the weakest part right now, but I have <a href="https://bitbucket.org/shemnon/javafx-gradle/src/9eef1086856b/samples/FullyExpressed/build.gradle?at=release_0.0.0">an example</a> that I use for smoke testing that shows everything that ought to be configured, but most items don&#8217;t need to be.</p>

<p><strong>Tasks</strong></p>

<p>Since the JavaFX plugin also use the Java plugin it gains all the tasks and configurations from that plugin, and it adds a few more tasks of it&#8217;s own.  Most of them you can ignore and take for granted that they work, but there are two principal tasks you will be interested in targeting directly.</p>

<p>The first task is the standard <code>assemble</code> task, and like the name implies it assembles the jar and the native packages.  The resulting files will wind up in <code>build/distributions/bundles</code> and will be limited to the particular platform you happen to build on. It will also use the JDK you ran Gradle on as well.  It also creates JNLPs and signed the jars, but don&#8217;t get too excited as it still requires some hand tweaking of the JNLP file to make work.  Remember what version number this is…</p>

<p>The second task that would be relevant is the <code>run</code> task, provided by this plugin.  This runs the JavaFX application <em>in situ</em> without any packaging beyond complication and resource preparations.  This is useful during the build-test-tweak loops.  More interesting is the <code>debug</code> task, but you will have to run that with the NetBeans Gradle plugin to get the full effect.</p>

<p><strong>Builds</strong></p>

<p>I am creating the builds and hosting the repository on <a href="http://cloudbees.com">CloudBees</a>, who was kind enough to offer free OSS hosting for build and repository distributions.  I wear both of the shirts I got from them at JavaOne on a regular basis.  I have a <a href="https://javafx-gradle-plugin.ci.cloudbees.com/">Jenkins Build Server</a> building the samples and deploying the plugin to the <a href="http://repository-javafx-gradle-plugin.forge.cloudbees.com/snapshot/">snapshot</a> and when appropriate <a href="http://repository-javafx-gradle-plugin.forge.cloudbees.com/release/">release</a> repositories.  And they are ivy repositories because Maven 3 snapshots are so beyond messed up it is unreal.</p>

<p><strong>Feedback Welcome</strong></p>

<p>The code itself is hosted on <a href="https://bitbucket.org/shemnon/javafx-gradle/">BitBucket</a> which has a nifty <a href="https://bitbucket.org/shemnon/javafx-gradle/issues">issue tracker</a> that is not quite as awesome as JIRA, but serves the purpose.  If you have any issues or suggestions for improvement feel free to post an issue.  Or post a patch, or a pull request.</p>

<p>All feedback is fair game.  If you don&#8217;t like the way I am doing the conventions please speak up.  I am not interested personally in breaking new conventional ground or having style arguments, but I am interested in following how other similar build systems set up their builds and conforming when it makes sense.</p>

<p>And one last thing: it&#8217;s not the rottenness of the tomato that is thrown, but the technique that matters.  A well articulated piece of feedback generates more interest than stuff like <a href="https://twitter.com/timbray/status/252635363481382912">&#8216;LOL JavaFX&#8217;</a>, which just makes you look like an ass.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conventions and Configuratons]]></title>
    <link href="http://speling.shemnon.com//blog/2012/10/23/conventions-and-configurations/"/>
    <updated>2012-10-23T22:13:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2012/10/23/conventions-and-configurations</id>
    <content type="html"><![CDATA[<p>Creating an app in any new framework can sometimes be a bit of a chore.  Have you looked at the files that come form a new Hello World JavaFX app from NetBeans?  Not very dry at all and a lot of esoteric stuff in side directories is created, you know just in case you want to customize it.  And the problem isn&#8217;t NetBeans, they are doing the best they can with Ant.</p>

<p><strong>The Ideal Build</strong></p>

<p>To me the ideal build setup for a JavaFX application would involve putting your source files in a specific directory layout, placing supporting files in a similarly conventional manner, adding a <em>minimal</em> build script, pressing a button, and catching my .app or .exe as it falls out the other side.</p>

<!-- more -->


<p>One of the keys here is the minimal build script.  If I am doing things the standard way then my actions should be presumed.  Presumed without comment.  Part of the legacy of the <a href="http://ant.apache.org/">ant</a> build system is you cannot simply say &#8216;my Java code is here, make a jar.&#8217;  You have to hand walk the build from where your source code lives, to where you want the compiled class files to go, to where you want the jar to go, to what you want to name it.  And heaven forbid if you use other peoples libraries, or expect other people to use yours.</p>

<p>I&#8217;m being a little harsh on Ant here. Let&#8217;s roll back our memory to 13 years ago and realize how Ant was eight kinds of awesome compared to a <a href="http://www.gnu.org/software/make/manual/make.html">make</a> file.  Many builds I saw used to drop class files in the source tree.  And if you had to add a package you either had to update the make file or hope some side voodoo script could sniff it out, and the mess leftover was barely tolerable.  Recursive file sniffing and a separate build directories were the gold standard back at the turn of the century.  But the problem with higher standards is eventually they become the baseline expectation.  Consider how much building software stunk before even make existed!</p>

<p><strong>Hand Cranked to Configurable to Conventional</strong></p>

<p>The evolution we are witnessing here is one of increased automation, and the standardization.  This is just like the industrial revolution and the classic example of firearms.  You can hand craft a rife, and it will work just fine.  If anything breaks, however, you have to hand craft a replacement and often craft other pieces to make sure it continues to work.  When the parts were standardized, in both assembly and interface, you can mass produce many different rifles and do many interesting things with the various add ons.  If you want a slightly different grip or trigger, you can replace it because if the interface.  If you find a broken rifle you can figure out what is wrong with it because of the standard assembly,  And if you stick to the standards, ammunition is readily interchangeable between any rifle.</p>

<p>One of the key issues with interchangeable parts, however, is the need for a critical mass.  With a small audience conventions are merely incidental.  In large groups and with enough adoption they become the rules of society, for example what side you pass someone on the sidewalk.</p>

<p><strong>File Conventions</strong></p>

<p>To take us closer to the industrialized build we need to agree on some conventions. Even though I am building a Gradle plugin, I feel we need to accept and adopt widely some Maven conventions.  Specifically the <code>src/&lt;set&gt;/&lt;language|role&gt;/...</code> pattern for source files.  Gradle already adopts this pattern by default, which is good from the viewpoint of interchangeable parts.</p>

<pre><code>&lt;root&gt;/
+--src/
   +--main/
      +--java/
      |  +--&lt;Java Classes by package&gt;
      +--resources/
      |  +--&lt;Resources, like CSS and image, by package&gt;
      +--package/
         +--win/
         |  +--&lt;Bundle specific files&gt;
         +--macosx/
         |  +--&lt;Bundle specific files&gt;
         +--linux/
         |  +--&lt;Bundle specific files&gt;
         +--&lt;icon files for bundles&gt;
</code></pre>

<p>This is notional, and I am more than willing to hear comments as to where I am getting stuff wrong.  This is currently the file layout I am using for my Gradle JavaFX plugin, and I&#8217;ve pulled three of the JavaFX sample apps into this directory format, and the build files are all quite short (after the yak shaving to install the plugin).  <a href="https://bitbucket.org/shemnon/javafx-gradle/src/c52be485c341796394ae9c7ba9d44f1d79c45889/samples/brickbreaker/build.gradle?at=master">Brickbreaker</a> just installs the plugin.  <a href="https://bitbucket.org/shemnon/javafx-gradle/src/c52be485c341/samples/ConferenceScheduleApp/build.gradle?at=master">ConferenceScheduleApp</a> only names the executable (with bonus Java Version yak shaving) while <a href="https://bitbucket.org/shemnon/javafx-gradle/src/c52be485c341/samples/Ensemble2/build.gradle?at=master">Ensemble2</a> has the most to do, and none of it involved JavaFX but it is peculiar to how the app works.</p>

<p>My goal here, is to make all of the JavaFX yak shaving transparent, so you can focus on indexing your samples in your build rather than remembering the syntax of the ant deploy task.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting a JavaFX Gradle Plugin]]></title>
    <link href="http://speling.shemnon.com//blog/2012/10/17/javafx-gradle-plugin/"/>
    <updated>2012-10-17T22:47:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2012/10/17/javafx-gradle-plugin</id>
    <content type="html"><![CDATA[<p>I wanted to get this out there early, since &#8220;release early release often&#8221; is one of the open source mantras.  I have a longer blog post planned on this subject, but I have so many balls in the air right now I&#8217;m not sure when I&#8217;ll get to write it.</p>

<p>I am starting to write a <a href="https://bitbucket.org/shemnon/javafx-gradle">JavaFX 2.0 Gradle Plugin</a> over at bitbucket.  Right now it handles just the <code>fx:jar</code> and <code>fx:deploy</code> ant tasks.  And not completely. I don&#8217;t have the resources wired into the native bundles.  But that will come.  I also am not doing binary CSS or Jar signing.</p>

<!-- more -->


<p>There are two samples in the repo demonstrating the build.  I pulled from the JavaFX 2.2.0 Samples brickbreaker and Ensemble2 which represents a small and large project. I moved the files around into a conventional layout, and provided the barest of Gradle scripts I could, with the help of the plugin.  The script for <a href="https://bitbucket.org/shemnon/javafx-gradle/src/4f1f197a845d5fccc4408ad3c49167e65421b1df/brickbreaker/build.gradle?at=master">brickbreaker</a> is awesomely short.  And <a href="https://bitbucket.org/shemnon/javafx-gradle/src/955cc9b99dc86c3b384b40157801ffd3c1adfe94/Ensemble2/build.gradle?at=master">Ensemble2</a> is a bit longer because of the custom build work it is doing to bring the source of the samples into the jar.  When you run &#8216;gradle assemble` it will actually create the Mac OSX .app and .dmg files.  It probably does the correct thing on Linux and Windows but I haven&#8217;t tried yet.  But first you need to install the plugin via &#8216;gradle install&#8217; in the plugin dir.</p>

<p><strong>Conventions</strong></p>

<p>My main purpose in this exercise is to try and nail down a set of file layout conventions that Gradle and Maven can use to create a shippable app with a minimum of configuration.  Layouts that match the Maven way for the most part.  And Ant scripts can be written to these conventions.  If, you know, Ant is your thing.</p>

<p>The only out there conventions would be the bundle resources, which I am placing in <code>src/main/resources</code>.  I also intend to add some other standard files, like <code>src/main/resources/icon.png</code> and associated files and directories being loaded into the proper place for native bundling.  I also need to figure out what to do about signing keys.  Likely this will have to be a configuration thing since checking in your signing key to source control would be a bad idea, even if you have the world&#8217;s most awesome password.</p>

<p>Finally, I have zero intention of writing this hypothetical Maven plugin. Gradle is what I do for fun. I&#8217;de rather write Perl scripts than Maven plugins, no offense to the Perl crowd. But being part of the conversation to set the conventions is something I intend to be a part of.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mirroring OpenJFX on BitBucket]]></title>
    <link href="http://speling.shemnon.com//blog/2012/10/09/mirroring-openjfx-on-bitbucket/"/>
    <updated>2012-10-09T21:16:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2012/10/09/mirroring-openjfx-on-bitbucket</id>
    <content type="html"><![CDATA[<p>I&#8217;ve started mirroring the OpenJFX repositories over at <a href="http://bitbucket.org/shemnon/">bitbucket</a>.  Viewing the repos on bitbucket has several advantages:</p>

<ol>
<li>It has an easier on the eyes user interface.  Really, I could stop here.</li>
<li>The push request mechanism encourages social coding</li>
<li>It has a code review feature</li>
</ol>


<p>This last point is the most recent one.  You can comment on commits and comment at specific lines in the commit.  Useful when you have to send a pull request back.</p>

<p><strong>Repos</strong></p>

<p>As for the repositories I have four repos right now.</p>

<!-- more -->


<p>The first three are direct mirrors of their <code>rt</code> counterparts in the JavaFX portion of the <a href="http://hg.openjdk.java.net/">official OpenJDK Mercurial repository</a>.</p>

<ul>
<li><a href="http://hg.openjdk.java.net/openjfx/8/master/rt/">master/rt</a> -> <a href="https://bitbucket.org/shemnon/openjfx-8-rt-master-branch">openjfx-rt-master-branch</a></li>
<li><a href="http://hg.openjdk.java.net/openjfx/8/controls/rt/">controls/rt</a> -> <a href="https://bitbucket.org/shemnon/openjfx-8-rt-controls-branch">openjfx-rt-controls-branch</a></li>
<li><a href="http://hg.openjdk.java.net/openjfx/8/graphics/rt/">graphics/rt</a> -> <a href="https://bitbucket.org/shemnon/openjfx-8-rt-graphics-branch">openjfx-rt-graphics-branch</a></li>
</ul>


<p>I am not mirroring the parent repo nor the <code>test</code> repo.  The parent repo is just a holder for the <code>rt</code> repo and (presumed) binary repos.  The <code>test</code> repo contains jemmy and a smoke test driven off of ensemble, i.e. parts needed for a professional build but not needed for the casual hack.  The casual hack is why I am doing this.</p>

<p>The fourth repo is my <a href="https://bitbucket.org/shemnon/openjfx-rt/">openfx-rt</a> repo.  This is a merger of the three previous repos.  Instead of keeping a branch for each I am pushing the bookmark for <code>controls</code>, <code>graphics</code>, and <code>master</code> to match the current tip of each of the real repos.  Bookmarks in Mercurial are more like branches in Git, just pointers to a change list.  Branches in mercurial embed themselves in the commit message, so you cannot retroactively create them without rewriting history.</p>

<p>This is also the repo where I do my hacks.  Look for the stray tips.</p>

<p><strong>Builds</strong></p>

<p>Also, as best as I can tell the open source build is currently broken.  The instructions pre-date the JRE integration of JavaFX, and also predate the addition of some of the more interesting sub projects, like FXML.  So to fix that I threw together some Gradle builds <a href="https://bitbucket.org/shemnon/openjfx-rt/changeset/46b2f08c0a3cb40c12a1e67184ba0b05c70d5596">here</a> and <a href="https://bitbucket.org/shemnon/openjfx-rt/changeset/a5a78c8ed2c4f287d2525ddf2231ea05f3659a99">here</a> that will compile the code and the tests.  Some of the tests even run. To completion. Successfully.  But it doesn&#8217;t create a usable <code>jfxrt.jar</code> at the end.  Until the while kit and caboodle is released I don&#8217;t think it&#8217;s worth going that far.  i.e. not fit for production use.  But perfect for casual hacking.</p>

<p>To run it you need to either</p>

<ul>
<li>Run Gradle with a <a href="http://jdk8.java.net/download.html">current JDK8 build</a></li>
<li>Point the env var <code>JFXRT_HOME</code> to the directory <code>jfxrt.jar</code> lives from a <a href="http://jdk8.java.net/download.html">current JDK8 build</a> before running Gradle.</li>
</ul>


<p>Then do something like <code>gradle assemble</code>, <code>gradle test</code>, <code>gradle compileJava</code>, <code>gradle compileTest</code>.  Be careful with the <code>test</code> task, it will go into an infinite loop in <code>javafx-concurrent</code>, I&#8217;m sure I don&#8217;t have something set up right.</p>

<p><strong>Casual Hacking</strong></p>

<p>I did this to aid my casual hacking, or as I like to call it &#8220;random acts of coding.&#8221;  You will note that I hooked up the JIRA bugs to the <a href="http://javafx-jira.kenai.com/">OpenJFX bug database</a>, and that <a href="https://bitbucket.org/shemnon/openjfx-rt/changeset/ab6e4c5150e45a92391bd2bf4c6a78255c283535">my first random act of code</a> is hooked up to the <a href="http://javafx-jira.kenai.com/browse/RT-25559">associated JIRA</a>.  It is a feature request I tweeted to Jonathan Giles several months ago, and was too lazy to write up a JIRA specifying what I want. The problem was that it seemed like a long loop of (a) landing in someone&#8217;s bug queue then (b) they have the bandwidth to do it and (c) that they do it the way I intended it to work.  If (c) fails it is another giant loop with the jiras to iterate (a), (b), and (c) again.  That and I&#8217;ve always been the type of person who would rather jump in and do it. I do have to say thug, that this has been quite a bit of yak shaving for 10 lines of code. And my <a href="http://preshavedyak.com/">pre shaved yak hoodie</a> I got at JavaOne only helps me with web apps.</p>

<p>If we want to make OpenJFX more accessible to casual hacking then some of the barriers need to be removed.  A &#8216;blessed&#8217; repo on BitBucket would make sandbox hacking more accessible.  A build that requires nothing more that a current Java 8 build and the build tool installed would be another great step.  With this casual hackers could push changes and a quick yes/no/maybe on the hack could be said in the pull queue before they fire up a JIRA and make sure their contributor paperwork is in order. In my opinion a hack then shave the yak ordering will get a lot more interest than a shave the yak then hack ordering.</p>

<p>But all of this only holds for the Java portions of the build.  When it comes to the native libraries I really don&#8217;t think you can wander too far from your yak shaving shears.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fashion Forward: Styling your Controls in JavaFX 2.2]]></title>
    <link href="http://speling.shemnon.com//blog/2012/09/13/fashion-forward-styling-your-controls-in-javafx-2-dot-2/"/>
    <updated>2012-09-13T08:02:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2012/09/13/fashion-forward-styling-your-controls-in-javafx-2-dot-2</id>
    <content type="html"><![CDATA[<p>JavaFX is finally delivering on it&#8217;s promise (made 5 years) to open source JavaFX. It started last December with the controls code. And now that the <a href="http://hg.openjdk.java.net/openjfx/8/master/">JavaFX 8 repos</a> are open we can now look at the internals of JavaFX in a format much more readable than <code>javap</code> decompilations. (The previous statement is not an admission, wink wink nod nod).</p>


<p>One of the questions I had was how the CSS styles are used in a Node. And after looking at some of the innards I realized that I didn&#8217;t really care how JavaFX does it, I care about how I can get my control stylized like the built in controls. To demonstrate the CSS stylings, I created <code>DemoTwo</code> in my <a href="https://github.com/shemnon/DeckControl/">DeckControl</a> project, allowing you to customize the control via CSS. Only the shelf variants in this demo use the custom properties, the others are just using the built in <code>-fx-skin</code> style to do the switching.</p>




<!-- more -->




<p><strong>A Word of Warning</strong></p>


<p>These are all internal APIs, the kind that the java compiler ought to warn you about but doesn&#8217;t. These APIs will change before JavaFX 8 is released in some fashion (assuming that they can keep the schedule and get these APIs exposed properly). These changes may be as minor as package names but are likely to change in more substantive ways. So before you read further I want you to raise your right hand, place your left hand behind your back, cross your fingers, and swear to me that you will not whine, complain, or moan when Oracle changes things and ruins all your fun. Now pinky swear on it. Ok, now we can begin.</p>


<p><strong>Make Your Property Styleable</strong></p>


<p>First, you have to make the properties use the styleable types. The types you will want to use are the  <code>com.sun.javafx.css.Styleable&lt;Foo&gt;Property</code> classes. It&#8217;s not a find-and-replace option, you will need to use an inner class of some sort.The classes are abstract and three methods are not implemented: <code>getStyleableProperty()</code>, <code>getBean()</code>, and <code>getName()</code>. The first method <code>getStyleableProperty()</code> returns an instance of <code>StyleableProperty</code> that describes this property. We will discuss this more in the next section. The other two methods (<code>getBean()</code> and <code>getName()</code>) actually come from the <code>javafx.beans.properties.ReadOnlyProperties</code> interface, so their role is already a known quantity. You may also want to overload the <code>invalidated()</code> method, which at this point provides less overhead than attaching an invalidated listener.</p>


<p>There are also some stylistic concerns with extending the property. You may want to use some lazy loading of the property to make overriding easier to detect. You can also return a default value from the getter if the property is null, and only initialize the getter in the property method. Here is an example from my Deck class of the styleable property.</p>


<div><script src='https://gist.github.com/3711714.js?file=StyleableProperty1.java'></script>
<noscript><pre><code>    public final void setBackScale(double value) {
        backScaleProperty().set(value);
    }
    public final double getBackScale() {
        return backScale == null ? 0.7 : backScale.get();
    }

    public final DoubleProperty backScaleProperty() {
        if (backScale == null) {
            backScale = new StyleableDoubleProperty(0.7) {

                @Override
                protected void invalidated() {
                    styleablePropertyInvalidated();
                }

                @Override
                public StyleableProperty getStyleableProperty() {
                    return BACK_SCALE;
                }

                @Override
                public Object getBean() {
                    return ShelfDeckSkin.this;
                }

                @Override
                public String getName() {
                    return &quot;backScale&quot;;
                }
            };
        }
        return backScale;
    }
</code></pre></noscript></div>




<p><strong>Describe Your Styleable Property</strong></p>


<p>The next step is to describe your styleable property. It&#8217;s kind of chicken and egg with the property instance itself since you have to reference the description in the property and the description needs to know how to get the property.</p>


<p>All of these descriptions are of type <code>com.sun.javafx.css.StyleableProperty</code> and this class is (you guessed it) abstract. All of the concrete version of this class in the codebase I can find are all anonymous or implementation details.</p>


<p>The class is generically typed, with the first type <code>N</code> being the type of the <code>Node</code> you are creating the styleable property for, and the second type <code>V</code> being the type of the property in the Java code, such as Number or Boolean.</p>


<p>Since this is an abstract class and not an interface we have to deal with the parent constructor. The two required variables are the CSS name of the property and an object responsible for the conversions of the CSS strings to the real type. Do yourself a favor and just use one of the converters in <code>com.sun.javafx.css.convrrters</code>. There are constructors with more parameters, such as a default value, CSS inheritance flags, and information for marking the property as one that can be composed by other properties (such as font handling).  I would anticipate that the two or three argument constructors being the most useful ones.</p>


<p>The two methods you have to implement are <code>isSettable(N)</code> and <code>getWritableValue(N)</code>. The first method returns a boolean flag that tells the CSS engine if it should try and set the property from CSS or not. If you don&#8217;t want to set the property under some circumstances, like it is bound to some other properties value, you will return false. This is where the first type parameter comes into play, it doesn&#8217;t have to exactly be your type, but it will be the type of the parameter of this and the next method. The second method is where you return your property object from the previous section.  Since the declaration is shared among multiple controls, the particular instance is passed in as a parameter.</p>


<p>Remember, this object is more of a type declaration than the actual value of the property. We are telling the engine about the property and not becoming the property itself, that is what the previous section was about.</p>


<div><script src='https://gist.github.com/3711714.js?file=StyleableProperty2.java'></script>
<noscript><pre><code>    private static final StyleableProperty&lt;ShelfDeckSkin,Number&gt; BACK_SCALE =
            new StyleableProperty&lt;ShelfDeckSkin,Number&gt;(&quot;-x-back-scale&quot;,
                    SizeConverter.getInstance(), 0.7) {

                @Override
                public boolean isSettable(ShelfDeckSkin deck) {
                    return deck.backScale == null || !deck.backScale.isBound();
                }

                @Override
                public WritableValue&lt;Number&gt; getWritableValue(ShelfDeckSkin deck) {
                    return deck.backScaleProperty();
                }
            };
</code></pre></noscript></div>




<p><strong>Enumerate Your Styleable Property</strong></p>


<p>Finally we have to let the engine know about our CSS properties. The magic incantation in this case is to add a method <code>public List&lt;StyleableProperty&gt; impl_getStyleableProperties()</code> to your control class. Note that this method is marked as deprecated and starts with <code>impl_</code>. The combination of these two markings are how the JavaFX team tells us that this method will change and break in unexpected ways. But I think we are safe for JavaFX 2.2.x.</p>


<p>In this method simply return all of the <code>StyleableProperty</code> objects that you want the CSS engine to set and alter. Remember, this is all of the properties, including the properties of the parent class. So be sure you return those (unless you explicitly want to hide them). You can be a good software engineer and use a lazy cache if you like. It will perform (slightly) better.</p>


<div><script src='https://gist.github.com/3711714.js?file=StyleableProperty3.java'></script>
<noscript><pre><code>    private static List&lt;StyleableProperty&gt; STYLEABLES;

    @Override
    @Deprecated
    public List&lt;StyleableProperty&gt; impl_getStyleableProperties() {
        if (STYLEABLES == null) {
            final List&lt;StyleableProperty&gt; styleables = new ArrayList&lt;StyleableProperty&gt;(super.impl_getStyleableProperties());
            Collections.addAll(styleables,
                    BACK_ANGLE,
                    BACK_OFFSET,
                    BACK_SCALE,
                    BACK_SPACING);
            STYLEABLES = Collections.unmodifiableList(styleables);
        }
        return STYLEABLES;    //To change body of overridden methods use File | Settings | File Templates.
    }
</code></pre></noscript></div>




<p><strong>The Proof is in the Pudding</strong></p>


<p>I am sure I violated some coding standards the JavaFX team uses to create their CSS properties, but at the end of the day the code works. I do have to say, there is quite a bit of Yak Shaving that goes on. Hopefully in JavaFX 8 they will come up with some amazingly simple means to mark properties as styleable (I have <a href="https://gist.github.com/3711882">some ideas</a>). But until that future day, you can do CSS styling on your custom controls now.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX, Groovy, and Griffon]]></title>
    <link href="http://speling.shemnon.com//blog/2012/09/04/javafx-groovy-and-griffon/"/>
    <updated>2012-09-04T07:24:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2012/09/04/javafx-groovy-and-griffon</id>
    <content type="html"><![CDATA[<p>Over the weekend the GroovyFX 0.3 libraries were released. &nbsp;With this domino as well as the release of Griffon 1.0.2 I was able to update my Gr8Conf US presentation on JavaFX use only published libraries, rather than the local snapshots I had been using.</p>


<p><strong>Gr8Cooking Presentation</strong></p>


<p>My first Session at Gr8 US this year talked about JavaFX, Groovy, and Griffon.  Having watched too many episodes of <a href="http://www.foodnetwork.com/chopped/index.html">Chopped</a> I decided that my presentation needed to use the required ingredients of JavaFX, Groovy, Griffon, and Dogfood.  The results are in the <a href="https://github.com/shemnon/Gr8Cooking">Gr8Cooking</a> project on my github account.  And this is an interactive presentation, feel free to click on buttons and whatnot that are actually on the slide.  That was the point of this presentation.</p>


<!-- more -->


<p><strong>Griffon JavaFX Archetype</strong></p>


<p>This presentation also was built using the JavaFX Archetype in Griffon.  The new release merely updates the required Griffon version since the latest version of GroovyFX depends on some bug fixes in the core of Griffon.  To use the archetype simply use the <code>-archetype</code> parameter at the command line: <div><script src='https://gist.github.com/3621275.js?file='></script>
<noscript><pre><code>griffon create-app MyJavaFXApp -archetype=javafx</code></pre></noscript></div>
</p>


<p><strong>Griffon JavaFX Plugin</strong></p>


<p>The JavaFX Plugin was also upgraded.  With the release of JavaFX 2.2 the Java Developers Kit now supports the creation of native installer and app bundles for JavaFX applications.  No need to pay someone to write InstallShield scripts anymore.  (There&#8217;s a reason I never mention that in my resume).  Creating a native JavaFX package of your Griffon application is now insanely easy: <div><script src='https://gist.github.com/3621291.js?file='></script>
<noscript><pre><code>griffon package jfx-native</code></pre></noscript></div>
 Afterwards you can look for the native installers in <code>&lt;app&gt;/dist/jfxnative/bundles</code>.  Of course you can only create native bundles for the platform you are building on, and there are some required libraries for each platform you must install that vary for each platform.  Oracle has the <a href="http://docs.oracle.com/javafx/2/deployment/self-contained-packaging.htm#A1324980">details</a> in it&#8217;s JDK documentation.</p>


<p><strong>GroovyFX</strong></p>


<p>The final piece of the puzzle is the GroovyFX library, the integration of JavaFX into Groovy.  GroovyFX has upgraded in version 0.3 to require the 2.2 release of JavaFX, which includes support for the new Canvas element.  Jim Clarke did nearly all the work on that piece and <a href="http://www.codetown.us/profiles/blogs/javafx-2-2-canvas">blogged about it</a> a couple of months ago.</p>


<p>The other major feature add is the ability to reference FXML elements in a <code>fxml</code> block in your Groovy scripts and code.  This allows you to take an FXML file with only a visual description of the nodes and add the behavior code in the code creating the FXML, rather than in the xml declarations.  It looks like this: <div><script src='https://gist.github.com/3621462.js?file='></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;?import java.lang.*?&gt;
&lt;?import javafx.scene.*?&gt;
&lt;?import javafx.scene.control.*?&gt;
&lt;?import javafx.scene.layout.*?&gt;

&lt;AnchorPane xmlns:fx=&quot;http://javafx.com/fxml&quot;
            id=&quot;AnchorPane&quot; 
            prefHeight=&quot;150.0&quot; prefWidth=&quot;320.0&quot; &gt;
  &lt;children&gt;
    &lt;Button id=&quot;buttonCSSID&quot; 
            layoutX=&quot;40.0&quot; layoutY=&quot;65.0&quot; 
            prefWidth=&quot;100.0&quot; 
            text=&quot;Click Me!&quot; /&gt;
    &lt;Label id=&quot;labelCSSID&quot; 
           alignment=&quot;CENTER&quot; contentDisplay=&quot;CENTER&quot; 
           layoutX=&quot;40.0&quot; layoutY=&quot;100.0&quot; 
           minHeight=&quot;16.0&quot; minWidth=&quot;69.0&quot; 
           prefHeight=&quot;16.0&quot; prefWidth=&quot;100.0&quot; /&gt;
    &lt;Button fx:id=&quot;buttonFXID&quot; 
            layoutX=&quot;180.0&quot; layoutY=&quot;65.0&quot; 
            prefWidth=&quot;100.0&quot; text=&quot;Click Me!&quot; /&gt;
    &lt;Label fx:id=&quot;labelFXID&quot; 
           alignment=&quot;CENTER&quot; contentDisplay=&quot;CENTER&quot; 
           layoutX=&quot;180.0&quot; layoutY=&quot;100.0&quot; 
           minHeight=&quot;16.0&quot; minWidth=&quot;69.0&quot; 
           prefHeight=&quot;16.0&quot; prefWidth=&quot;100.0&quot; /&gt;
  &lt;/children&gt;
&lt;/AnchorPane&gt;</code></pre></noscript></div>
</p>


<p><strong>Summary</strong></p>


<p>There are a lot of moving parts in getting a high quality JavaFX application written.  But Griffon makes a point to hide the mechanical details so that you can focus on what matters: the application itself.  Do you know how to convert a 64x64 PNG file into a Mac Application Icon?  Griffon does, and you don&#8217;t need to.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Life and Times of a JavaFX Skin]]></title>
    <link href="http://speling.shemnon.com//blog/2012/08/28/the-life-and-times-of-a-javafx-skin/"/>
    <updated>2012-08-28T21:06:00-06:00</updated>
    <id>http://speling.shemnon.com//blog/2012/08/28/the-life-and-times-of-a-javafx-skin</id>
    <content type="html"><![CDATA[<p>As a consequence of the <a href="http://gr8conf.us/Presentations/Groovy-plus-JavaFX-equals-Grif">talk</a> I gave at <a href="http://gr8conf.us/">Gr8Conf US</a> I&#8217;ve been wanting to create a real &#8220;Deck&#8221; control. Basically it is a stack of nodes that can be added to and navigated arbitrarily. And it displays these nodes in interesting ways. Something like a Powerpoint deck or a deck of cards. Also useful for UIs that use the &#8220;back&#8221; metaphor but the path forward isn&#8217;t fixed, like a Wizard.</p>


<p>Last evening I finally got around to coding some stuff up. My work is currently on github under my craftily named <a href="https://github.com/shemnon/DeckControl/">DeckControl</a> project. Nothing earth shattering (yet). So there will be no screenshots or demos in this post. What I do want to talk about is the Skin model JavaFX is using. These tidbits I have yet to find in any documentation. But that also may be because I haven&#8217;t really read the documentation beyond a cursory level, or any of the books for that matter.  I still haven&#8217;t finished reading the Wheel of Time, so it&#8217;s not too surprising.</p>


<!-- more -->


<p>Skins in JavaFX provide something Swing never could fully arrive at: total separation between the abstract control and the literal representation of the control on the screen. There were always ways to subvert and abuse the PLAF mechanisms. While a poorly constructed control can still present problems the architecture is there for a complete look and structure separation.</p>


<p><strong>Structure of a Skin</strong></p>


<p>A Skin is mostly a class that extends <code>javafx.scene.control.Skin</code>. I say mostly because there are two caveats. First, the <code>Skin</code> interface is a generic interface. The type parameter must be the same type as the control you are skinning. Second you must provide a constructor that takes a single argument of the type of the generic parameter. A piece of trivia is that the Skin need not be a <code>javafx.scene.Node</code>, although they often are a <code>StackPane</code>.  Just to prove my point my skin didn&#8217;t extend from <code>Node</code>.</p>


<p><strong>Lifecycle of a Skin</strong></p>


<p>The lifecycle of the skin is fairly straight forward. Simplified by the fact that skins are created for only one control, ever. No double dipping or reuse here. Garbage Collection has come a long way in the last 15 years.</p>


<ol>
<li><strong>Construct the Skin</strong><br />First the single argument constructor is called. If you are subclassing a skin pass the argument to the super. If not, stash the node you are passed in. You will need it later.<br />Next you will need to prepare everything you need. The constructor is a good place, although lazily in the next step is an option. But I think initializing in the constructor is the best place.</li>
<li><strong>Stuff Happens</strong><br />Stuff in the world will now happen. Some of this may or may not affect your control you are skinning. It&#8217;s hard to tell, unless you attached listeners to the parts of the world you care about.</li>
<li><strong>Node and Control Queried</strong><br />Two of the interface methods may now get called. They may get called multiple times, or once. Or not at all in pathological cases. (The kind of pathological cases QA departments are paid to find).<br />First for <code>getSkinnable()</code> you must return the control passed into your constructor.  If you subclassed an existing skin you are in the clear.<br />Second, <code>getNode()</code> will be called to get the <em>singular</em> node you are using to represent the control.  If you extend a Node class and it is the representation, return <code>this</code>.  Otherwise return the node you are using.  But whatever you do you must always return the same value (until you don&#8217;t have to, see step 6).</li>
<li><strong>More Stuff Happens</strong><br />This is much like step 2.  Except now that your node is in the wild anything in the world that changes that you need to reflect in the skin node tree must be reflected in that node.  In my case I have to pay attention to what nodes are being added to the deck and what node in the deck is showing.  This step repeats with step 3 for an indeterminate number of cycles, zero or more times.  Make sure you play nicely with repetition</li>
<li><strong>Disposal</strong><br />Finally, <code>dispose()</code> is called.  This is JavaFX saying &#8220;we&#8217;re through&#8221; and storming out the door, never(?) to be seen again.  There is no getting back together, if a new skin of the same kind is needed it will be created anew.<br />All that is left to do now is to clean up whatever messes you made.  Most importantly this includes any listeners you have attached outside the world of your Skin.  So keep track of listeners you attach.  And if you are not sure if the listener left your little world then cut it off, just to be sure.</li>
<li><strong>Afterlife</strong><br />There is a chance that JavaFX may drunk-dial you and <code>getNode()</code> and <code>getSkinnable()</code> may be called again.  Don&#8217;t get excited, things won&#8217;t be like they were before, this was an accident.  You can return null at this point as long as you immediately start returning null after <code>dispose()</code> is called.</li>
</ol>


<p><strong>Clean up after yourself</strong></p>


<p>If there is one thing to point out in the lifecycle, it is that you should clean up after yourself. The listeners you attach don&#8217;t always fall away magically. And you should design for on the fly skin changes. This isn&#8217;t like Swing where changing the PLAF after the controls were shown was the exception to the rule, and formally dissed by core developers in conference sessions. Skins will change at runtime and they will result in magical effects, so plan accordingly.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NPEs: Permission vs. Forgiveness]]></title>
    <link href="http://speling.shemnon.com//blog/2012/02/20/npes-permission-vs-forgiveness/"/>
    <updated>2012-02-20T17:52:00-07:00</updated>
    <id>http://speling.shemnon.com//blog/2012/02/20/npes-permission-vs-forgiveness</id>
    <content type="html"><![CDATA[<p>Is it better to ask for permission or forgiveness? That is a question that always depends on the context.</p>


<!-- more -->


<p>For one shot events forgiveness is always less of a hassle. For example, if your motivational speaker for your group at work performs stunts like juggling flaming batons and swallowing swords, it&#8217;s best not to get HR involved. From your perspective it is a onetime deal and if nothing goes wrong it will just be an uncomfortable e-mail thread when the responsible adults in the company find out. And that is assuming HR isn&#8217;t dealing with any real issues (like making sure everyone has finished their sensitivity training). However, the speaker will likely have been through this process before. A true professional who does these stunts all the time will insist on signed releases from the company, especially from anyone authorized to sue.</p>


<p>Another context is programming. Instead of lawsuits we have exceptions. And instead of juggling flaming batons and swallowing swords we dereference pointers, a truly dangerous practice. When writing code to deal with these pointers there are two broad approaches: guard blocks where you check for null before dereferencing, and attempting it without the guard and catching the inevitable exception.</p>


<p>Old school C and C++ coders will always use guard blocks. This is primarily for two reasons, (a) null dereferences were almost always fatal, and (b) they didn&#8217;t always have fancy things like exception handling&#8230;&nbsp;<em>and they liked it!</em>&nbsp;Permission was the only reliable approach (now get off my lawn you script kiddie).</p>


<p>New generation languages like Java and later incarnations of C++ standardized exception catching. If you make a mistake you can pick up the pieces and move on. Forgiveness became an option. And for a lot of code it is easier to read and write forgiving code rather than permission seeking code.</p>


<p>But easier to read and write is a very subjective criteria. Whether permission or forgiveness is better has no hard metric. But which is more efficient and faster? That is a hard metric! Time of execution. So I&nbsp;<a href="https://gist.github.com/1871252">coded up an experiment</a>&nbsp;to get cold hard numbers.</p>


<p>But before we conduct this experiment we should predict the outcome. Can forgiveness ever be faster than permission? If we get rid of all of the null checks those are less cycles to burn on every execution through a loop. If the overhead of an exception is low enough then with infrequent enough exceptions it should be faster. Kind of like a parking ticket. If it&#8217;s 5 cents a minute to park and for every 4 hours you are parked you will get a $20 ticket (with no other consequences) should you feed the meter? Never! you can save about a dollar an our just paying the parking ticket. But if the fine is $24 then it&#8217;s a wash, and you depend on beating the parking enforcement officer to make any gains. So if the exception overhead is low enough eventually forgiveness makes sense. Right?</p>


<p><img style="border-style: initial; border-color: initial;" src="http://chart.apis.google.com/chart?chxl=0:|-5|-10|-15|-20|1:|1ms|0.5ms|0.3ms|0.2ms|0.1ms&amp;chxp=0,5,10,15,20|1,1,0.5,0.3,0.2,0.1&amp;chxr=0,4,20|1,0,1&amp;chxs=1,676767,11.5,0,lt,676767&amp;chxt=x,y&amp;chs=440x220&amp;cht=lxy&amp;chco=3072F3,FF0000&amp;chds=5,20,0,1,5,20,0,1&amp;chd=t:-1,-1,-1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20|0.109,0.098,0.098,0.094,0.092,0.092,0.093,0.093,0.092,0.093,0.095,0.098,0.095,0.093,0.092,0.095,0.094,0.094,0.094|-1,-1,-1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20|-1,-1,-1,0.998,0.55,0.331,0.213,0.151,0.127,0.11,0.104,0.098,0.097,0.096,0.095,0.105,0.116,0.094,0.093&amp;chdl=Permission|Forgiveness&amp;chg=0,20,4,9&amp;chls=2|1&amp;chma=5,0,5,25|0,5&amp;chtt=Permission+vs+Forgiveness" alt="Permission vs Forgiveness" width="440" height="220" /></p>


<p>Well, it looks like forgiveness is not very rewarding on the JVM. For this chart the Y axis is the average time through my test call, and the X axis is the increasing rarity of the exception, a probability of between 2<sup>-4</sup> and 2<sup>-20</sup>, or 1 in 16 to over 1 in a million (so your saying there&#8217;s a chance!). Forgiveness is&nbsp;<em>at best</em>&nbsp;nearly as good as permission, and at worst over two magnitudes of order worse (it&#8217;s like 147x at 100% forgiveness).</p>


<p>So that motivational speaker may really be awesome, but it is almost always better to ask for permission. Especially when he sets the carpet on fire.</p>


<p>&nbsp;</p>

]]></content>
  </entry>
  
</feed>
